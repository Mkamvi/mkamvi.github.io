<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>入门 - Rollup</title>
    <link href="/notes/rollup/%E5%85%A5%E9%97%A8/"/>
    <url>/notes/rollup/%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>rollup -c</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// rollup.config.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;src/main.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;cjs&quot;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="不相关的-批次构建"><a href="#不相关的-批次构建" class="headerlink" title="(不相关的)批次构建"></a>(不相关的)批次构建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// rollup.config.js (building more than one bundle)</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;main-a.js&quot;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;dist/bundle-a.js&quot;</span>,<br>      <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;cjs&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;main-b.js&quot;</span>,<br>    <span class="hljs-attr">output</span>: [<br>      &#123;<br>        <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;dist/bundle-b1.js&quot;</span>,<br>        <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;cjs&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;dist/bundle-b2.js&quot;</span>,<br>        <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;es&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><h4 id="配置智能提示"><a href="#配置智能提示" class="headerlink" title="配置智能提示"></a>配置智能提示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// rollup.config.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">import(&#x27;rollup&#x27;).RollupOptions</span>&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="npm包加载"><a href="#npm包加载" class="headerlink" title="npm包加载"></a>npm包加载</h4><p>jj</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这将首先尝试加载包 &quot;rollup-config-my-special-config&quot;</span><br><span class="hljs-comment"># 如果失败，则尝试加载 &quot;my-special-config&quot;</span><br>rollup --config node:my-special-config<br></code></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h3 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h3><h3 id="SystemJS"><a href="#SystemJS" class="headerlink" title="SystemJS"></a>SystemJS</h3>]]></content>
    
    
    <categories>
      
      <category>Rollup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rollup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年03月02日11:44:47 - 周报</title>
    <link href="/notes/weeks/2024-03-02/"/>
    <url>/notes/weeks/2024-03-02/</url>
    
    <content type="html"><![CDATA[<h3 id="南网项目"><a href="#南网项目" class="headerlink" title="南网项目"></a>南网项目</h3><ul><li>jeecg</li><li>antdv + vite</li></ul><h3 id="官网部署"><a href="#官网部署" class="headerlink" title="官网部署"></a>官网部署</h3><ul><li>Centos</li><li>SEO</li></ul>]]></content>
    
    
    <categories>
      
      <category>周报</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>确认Linux发行版本 - Linux</title>
    <link href="/notes/linux/%E5%A6%82%E4%BD%95%E7%A1%AE%E8%AE%A4Linux%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/"/>
    <url>/notes/linux/%E5%A6%82%E4%BD%95%E7%A1%AE%E8%AE%A4Linux%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>lsb_release -a</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH 免密登录 - Linux</title>
    <link href="/notes/linux/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <url>/notes/linux/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>每次登录特别麻烦</p><h2 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h2><p>在目标Linux ~&#x2F;.ssh&#x2F;authorized_keys 文件中添加自己机器的ssh公钥</p><h2 id="配置目标机器IP及登录用户"><a href="#配置目标机器IP及登录用户" class="headerlink" title="配置目标机器IP及登录用户"></a>配置目标机器IP及登录用户</h2><p>在 ~&#x2F;.ssh&#x2F;config 文件中添加IP及登录用户</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host  karl<br>  HostName <span class="hljs-number">121.121</span>.<span class="hljs-number">121.121</span><br>  <span class="hljs-keyword">User</span>  <span class="hljs-title">abc</span><br>  IdentityFile  ~/.ssh/id_rsa<br><br></code></pre></td></tr></table></figure><h2 id="OK"><a href="#OK" class="headerlink" title="OK"></a>OK</h2><p>后面可直接通过ssh&#x2F;sftp karl快速登录</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Centos安装nginx并部署单页应用 - Linux</title>
    <link href="/notes/linux/%E5%9C%A8Centos%E5%AE%89%E8%A3%85nginx/"/>
    <url>/notes/linux/%E5%9C%A8Centos%E5%AE%89%E8%A3%85nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>yum install nginx</p><h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><p>&#x2F;etc&#x2F;nginx&#x2F;</p><h2 id="安装unzip"><a href="#安装unzip" class="headerlink" title="安装unzip"></a>安装unzip</h2><p>yum install unzip</p><h2 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h2><p>service nginx start&#x2F;restart&#x2F;stop</p><h2 id="服务目录"><a href="#服务目录" class="headerlink" title="服务目录"></a>服务目录</h2><p>使用默认的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</p><h2 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h2><p>put 命名上传文件</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 - 年度总结</title>
    <link href="/notes/years/2023/"/>
    <url>/notes/years/2023/</url>
    
    <content type="html"><![CDATA[<h2 id="2-0-2-3"><a href="#2-0-2-3" class="headerlink" title="2 0 2 3"></a>2 0 2 3</h2><h3 id="工艺组态"><a href="#工艺组态" class="headerlink" title="工艺组态"></a>工艺组态</h3><blockquote><p>因为BIM业务的开展，今年对3D技术做了进一步的学习及应用</p></blockquote><ul><li>进一步对Cesium的学习及理解 (Fabric、材质、纹理、实体、网格体、原子、粒子系统等相关概念，并参考相关产品开发了气泡弹窗、管道流水、场景导出、键盘巡游、实时航线、行人漫游等场景通用组件)</li><li>在做工艺组态项目时，对3D模型格式做了大量调研，包含obj、3d tiles 、gltf等，并在此过程中对3d tiles原始模型写入业务数据，设计了2D页面与3D页面交互方案（包含实时数据、自动导航、节点高亮等）</li><li>HT 3D(新管理看板，提供模型交互方案)</li><li>ThreeJS(测试渲染性能)</li></ul><h3 id="运维平台"><a href="#运维平台" class="headerlink" title="运维平台"></a>运维平台</h3><blockquote><p>React + Umi，非常庞大且古老的项目</p></blockquote><ul><li><p>antd 5.0集成：因为使用antd 3.0实在是太痛苦了（缺乏大量常用组件，如FormList、骨架屏，尤其是在动态表单方面显得非常难用且有不少bug），于是尝试嵌入antd 5.0，借助命名空间成功将antd 5.0二次封装后集成到运维平台（无冲突的样式、可二次扩展）</p></li><li><p>甘特图：基于rc-gantt的二次改造</p></li><li><p>无界：新版流程集成（vue项目，因为内部有弹窗无法直接使用iframe，使用无界代理是最完美的集成方案）</p></li><li><p>物联网平台集成：使用动态组件的方式(因为是新项目，可以享受最新工程化构建框架的同时，非常简单的将其集成到任一React项目)</p></li></ul><h3 id="新管理看板"><a href="#新管理看板" class="headerlink" title="新管理看板"></a>新管理看板</h3><blockquote><p>Vue 3 + Vite + Echarts + HT 3D</p></blockquote><ul><li>canvas: 定制圆形精度条</li><li>echarts: 使用vue组件定制的悬浮效果(与系统其他弹窗共享、异常点位展示)</li><li>HT 3D：悬浮弹窗(包含计算表达式)、设计了M1机房与数据中心两个BIM页面的技术方案</li><li>2D 与 3D 页面集成交互（包含管道控制、视图切换、数据展示）</li></ul><h3 id="Nvim-amp-Emacs"><a href="#Nvim-amp-Emacs" class="headerlink" title="Nvim &amp; Emacs"></a>Nvim &amp; Emacs</h3><blockquote><p>这是信仰 ！</p></blockquote><ul><li>Nvim: nvim 版本做了一次升级(0.8 -&gt; 0.9)，且更新了大量配置，并兼容了Mac、Window(Neovide)、Linux(Ubunut，使用远程登录和Mac本身基本一样)三端</li><li>Emacs: 已经快要放弃了(无聊的时候还会玩一下)，超级冗长的组合键按的确实没有vim好用</li><li>Lua: 断断续续的学了一段时间，现在阅读和修改Nvim插件基本毫无压力</li></ul><h3 id="慢-不得不提"><a href="#慢-不得不提" class="headerlink" title="慢(不得不提)"></a>慢(不得不提)</h3><blockquote><p>以前做事总是火急火燎，或是非常急于处理当下问题，而经常忽略问题的本质（这种情况下处理的问题很有可能在未来的某一天又引发另外一个问题）</p></blockquote><ul><li>在编码前深度思考，这是一个非常好的习惯</li><li>在改别人代码时，首先要明白它为啥要这么写</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今年主要在3D、项目之间的集成(数据交换、不同框架的集成)、Vue和Echarts方面积累了大量经验，然后Vim的使用已然炉火纯青，并养成了一个编码时深度思考的好习惯</p>]]></content>
    
    
    <categories>
      
      <category>年度总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器返回功能测试 - HTML · 返回动作</title>
    <link href="/notes/html/confused/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%94%E5%9B%9E%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <url>/notes/html/confused/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%94%E5%9B%9E%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="页面加载销毁相关事件-按顺序"><a href="#页面加载销毁相关事件-按顺序" class="headerlink" title="页面加载销毁相关事件(按顺序)"></a>页面加载销毁相关事件(按顺序)</h2><h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><h3 id="pageshow"><a href="#pageshow" class="headerlink" title="pageshow"></a>pageshow</h3><h3 id="beforeunload"><a href="#beforeunload" class="headerlink" title="beforeunload"></a>beforeunload</h3><h3 id="pagehide"><a href="#pagehide" class="headerlink" title="pagehide"></a>pagehide</h3><h2 id="iframe内部跳转特点"><a href="#iframe内部跳转特点" class="headerlink" title="iframe内部跳转特点"></a>iframe内部跳转特点</h2><h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><ul><li>会触发iframe内部的load和pageshow事件</li><li>历史记录会+1</li></ul><h3 id="window-location-href"><a href="#window-location-href" class="headerlink" title="window.location.href"></a>window.location.href</h3><ul><li>会触发iframe内部的load和pageshow事件</li><li>历史记录会+1</li></ul><h3 id="window-location-reload"><a href="#window-location-reload" class="headerlink" title="window.location.reload"></a>window.location.reload</h3><ul><li>不会触发任何事件</li><li>历史记录保持不变</li></ul><h3 id="window-location-replace"><a href="#window-location-replace" class="headerlink" title="window.location.replace"></a>window.location.replace</h3><ul><li>会触发iframe内部load和pageshow事件</li><li>历史记录(长度)保持不变</li></ul><h3 id="window-history-pushState"><a href="#window-history-pushState" class="headerlink" title="window.history.pushState"></a>window.history.pushState</h3><ul><li>不会触发任何事件</li><li>历史记录会+1</li></ul><h3 id="window-history-replaceState"><a href="#window-history-replaceState" class="headerlink" title="window.history.replaceState"></a>window.history.replaceState</h3><ul><li>不会触发任何事件</li><li>历史记录不会+1</li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>iframe</category>
      
      <category>浏览器返回</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>iframe</tag>
      
      <tag>浏览器返回</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈希表- Hero · 算法 · Hello 算法</title>
    <link href="/notes/hero/algo/hello-algo/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/notes/hero/algo/hello-algo/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>「哈希表 hash table」，又称「散列表」，它通过建立键 key 与值 value 之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键 key ，则可以在时间内获取对应的值 value 。</p><h3 id="哈希表的常用操作"><a href="#哈希表的常用操作" class="headerlink" title="哈希表的常用操作"></a>哈希表的常用操作</h3><p>初始化、查询操作、添加键值对和删除键值对</p><h3 id="哈希表的实现"><a href="#哈希表的实现" class="headerlink" title="哈希表的实现"></a>哈希表的实现</h3><p>哈希函数的作用是将一个较大的输入空间映射到一个较小的输出空间。在哈希表中，输入空间是所有 key ，输出空间是所有桶（数组索引）。换句话说，输入一个 key ，我们可以通过哈希函数得到该 key 对应的键值对在数组中的存储位置</p><h3 id="哈希冲突与扩容"><a href="#哈希冲突与扩容" class="headerlink" title="哈希冲突与扩容"></a>哈希冲突与扩容</h3><p>从本质上看，哈希函数的作用是将所有 key 构成的输入空间映射到数组所有索引构成的输出空间，而输入空间往往远大于输出空间。因此，理论上一定存在“多个输入对应相同输出”的情况。</p><h2 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h2><h3 id="链式地址"><a href="#链式地址" class="headerlink" title="链式地址"></a>链式地址</h3><h3 id="开放寻址"><a href="#开放寻址" class="headerlink" title="开放寻址"></a>开放寻址</h3><h4 id="线性探测"><a href="#线性探测" class="headerlink" title="线性探测"></a>线性探测</h4><h4 id="平方探测"><a href="#平方探测" class="headerlink" title="平方探测"></a>平方探测</h4><h4 id="多次哈希"><a href="#多次哈希" class="headerlink" title="多次哈希"></a>多次哈希</h4><h3 id="编程语言的选择"><a href="#编程语言的选择" class="headerlink" title="编程语言的选择"></a>编程语言的选择</h3><ul><li>Python 采用开放寻址</li><li>Java和Go采用链式地址</li></ul><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><h3 id="常见哈希算法"><a href="#常见哈希算法" class="headerlink" title="常见哈希算法"></a>常见哈希算法</h3><ul><li>MD5</li><li>SHA-1</li><li>SGA-2</li><li>SHA-3</li></ul>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Hello 算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Hello 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈和队列 - Hero · 算法 · Hello 算法</title>
    <link href="/notes/hero/algo/hello-algo/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <url>/notes/hero/algo/hello-algo/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>「栈」 stack 是一种遵循先入后出逻辑的线性数据结构</p><h3 id="栈的常用操作"><a href="#栈的常用操作" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h3><table><thead><tr><th>方法</th><th>描述</th><th>时间复杂度</th></tr></thead><tbody><tr><td>push()</td><td>元素入栈(添加到栈顶)</td><td>O(1)</td></tr><tr><td>pop()</td><td>栈顶元素出栈</td><td>O(1)</td></tr><tr><td>peek()</td><td>访问栈顶元素</td><td>O(1)</td></tr></tbody></table><h3 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h3><ul><li>基于链表的实现</li><li>基于数组的实现</li></ul><h3 id="栈的典型应用"><a href="#栈的典型应用" class="headerlink" title="栈的典型应用"></a>栈的典型应用</h3><ul><li>浏览器中的后退与前进、软件中的撤销与反撤销</li><li>程序内存管理(栈帧)</li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>「队列 queue」是一种遵循先入先出规则的线性数据结构</p><h3 id="队列的常用操作"><a href="#队列的常用操作" class="headerlink" title="队列的常用操作"></a>队列的常用操作</h3><table><thead><tr><th>方法</th><th>描述</th><th>时间复杂度</th></tr></thead><tbody><tr><td>push()</td><td>元素入列(添加到末尾)</td><td>O(1)</td></tr><tr><td>pop()</td><td>队首元素出队</td><td>O(1)</td></tr><tr><td>peek()</td><td>访问队首元素</td><td>O(1)</td></tr></tbody></table><h3 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h3><ul><li>基于链表的实现(反向或空指针)</li><li>基于列表的实现</li></ul><h3 id="队列典型应用"><a href="#队列典型应用" class="headerlink" title="队列典型应用"></a>队列典型应用</h3><ul><li>淘宝订单</li><li>各类待办事项</li></ul><h2 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h2><h3 id="双向列表的实现"><a href="#双向列表的实现" class="headerlink" title="双向列表的实现"></a>双向列表的实现</h3><ul><li>基于双向链表</li><li>基于数组</li></ul><h3 id="双向队列的应用"><a href="#双向队列的应用" class="headerlink" title="双向队列的应用"></a>双向队列的应用</h3><p>双向队列兼具栈与队列的逻辑，因此它可以实现这两者的所有应用场景，同时提供更高的自由度。</p><p>当栈的长度超过一定数量时，软件需要在栈底（队首）执行删除操作。但栈无法实现该功能，此时就需要使用双向队列来替代栈</p>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Hello 算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Hello 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表 - Hero · 算法 · Hello 算法</title>
    <link href="/notes/hero/algo/hello-algo/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8(%E4%BA%8C)/"/>
    <url>/notes/hero/algo/hello-algo/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>内存空间是所有程序的公共资源，在一个复杂的系统运行环境下，空闲的内存空间可能散落在内存各处。我们知道，存储数组的内存空间必须是连续的，而当数组非常大时，内存可能无法提供如此大的连续空间。此时链表的灵活性优势就体现出来了。</p><p>「链表 linked list」是一种线性数据结构，其中的每个元素都是一个节点对象，各个节点通过“引用”相连接。引用记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点。</p><p>链表的设计使得各个节点可以分散存储在内存各处，它们的内存地址无须连续。</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ol><li>初始化链表</li><li>插入节点</li><li>删除节点</li><li>访问节点</li><li>查找节点</li></ol><h2 id="数组和链表的比较"><a href="#数组和链表的比较" class="headerlink" title="数组和链表的比较"></a>数组和链表的比较</h2><table><thead><tr><th></th><th>数组</th><th>链表</th></tr></thead><tbody><tr><td>存储方式</td><td>连续内存空间</td><td>分散内存空间</td></tr><tr><td>容量扩展</td><td>长度不可变</td><td>可灵活扩展</td></tr><tr><td>内存效率</td><td>元素占用内存少，但有可能浪费空间</td><td>元素占用内存多</td></tr><tr><td>访问元素</td><td>O(1)</td><td>O(n)</td></tr><tr><td>添加元素</td><td>O(n)</td><td>O(1)</td></tr><tr><td>删除元素</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><h2 id="常见链表类型"><a href="#常见链表类型" class="headerlink" title="常见链表类型"></a>常见链表类型</h2><ul><li>单向链表</li><li>环形链表</li><li>双向链表</li></ul>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Hello 算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Hello 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组 - Hero · 算法 · Hello 算法</title>
    <link href="/notes/hero/algo/hello-algo/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8(%E4%B8%80)/"/>
    <url>/notes/hero/algo/hello-algo/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>「数组 array」是一种线性数据结构，其将相同类型的元素存储在连续的内存空间中。我们将元素在数组中的位置称为该元素的「索引 index」</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><h3 id="扩容数组"><a href="#扩容数组" class="headerlink" title="扩容数组"></a>扩容数组</h3><p>在复杂的系统环境中，程序难以保证数组之后的内存空间是可用的，从而无法安全地扩展数组容量。因此在大多数编程语言中，数组的长度是不可变的。</p><p>如果我们希望扩容数组，则需重新建立一个更大的数组，然后把原数组元素依次复制到新数组。这是一个的操作，在数组很大的情况下非常耗时</p><h3 id="数组的优点与局限性"><a href="#数组的优点与局限性" class="headerlink" title="数组的优点与局限性"></a>数组的优点与局限性</h3><p>数组存储在连续的内存空间内，且元素类型相同。这种做法包含丰富的先验信息，系统可以利用这些信息来优化数据结构的操作效率。</p><ul><li>空间效率高：数组为数据分配了连续的内存块，无须额外的结构开销。</li><li>支持随机访问：数组允许在O(1)时间内访问任何元素。</li><li>缓存局部性：当访问数组元素时，计算机不仅会加载它，还会缓存其周围的其他数据，从而借助高速缓存来提升后续操作的执行速度。</li></ul><p>连续空间存储是一把双刃剑，其存在以下局限性。</p><ul><li>插入与删除效率低：当数组中元素较多时，插入与删除操作需要移动大量的元素。</li><li>长度不可变：数组在初始化后长度就固定了，扩容数组需要将所有数据复制到新数组，开销很大。</li><li>空间浪费：如果数组分配的大小超过实际所需，那么多余的空间就被浪费了。</li></ul><h3 id="数组典型应用"><a href="#数组典型应用" class="headerlink" title="数组典型应用"></a>数组典型应用</h3><ul><li>随机访问</li><li>排序和搜索</li><li>查找表</li><li>机器学习</li><li>数据结构实现</li></ul>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Hello 算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Hello 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构分类 - Hero · 算法 · Hello 算法</title>
    <link href="/notes/hero/algo/hello-algo/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB/"/>
    <url>/notes/hero/algo/hello-algo/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="逻辑结构：线性与非线性"><a href="#逻辑结构：线性与非线性" class="headerlink" title="逻辑结构：线性与非线性"></a>逻辑结构：线性与非线性</h2><h3 id="线性数据结构"><a href="#线性数据结构" class="headerlink" title="线性数据结构"></a>线性数据结构</h3><p>线性：数组、链表、栈、队列、哈希表</p><h3 id="非线性数据结构"><a href="#非线性数据结构" class="headerlink" title="非线性数据结构"></a>非线性数据结构</h3><p>树、堆、图、哈希表</p><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><p>树、堆、哈希表</p><h4 id="网状结构"><a href="#网状结构" class="headerlink" title="网状结构"></a>网状结构</h4><p>图</p><h2 id="物理结构：连续和非连续"><a href="#物理结构：连续和非连续" class="headerlink" title="物理结构：连续和非连续"></a>物理结构：连续和非连续</h2><p>所有数据结构都是基于数组、链表或二者的组合实现的</p><h3 id="基于数组可实现"><a href="#基于数组可实现" class="headerlink" title="基于数组可实现"></a>基于数组可实现</h3><p>栈、队列、哈希表、树、堆、图、矩阵、张量</p><h3 id="基于链表可实现"><a href="#基于链表可实现" class="headerlink" title="基于链表可实现"></a>基于链表可实现</h3><p>栈、队列、哈希表、树、堆、图</p>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Hello 算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Hello 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复杂度分析 - Hero · 算法 · Hello 算法</title>
    <link href="/notes/hero/algo/hello-algo/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
    <url>/notes/hero/algo/hello-algo/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="推算方法"><a href="#推算方法" class="headerlink" title="推算方法"></a>推算方法</h3><h4 id="第一步：统计操作数量"><a href="#第一步：统计操作数量" class="headerlink" title="第一步：统计操作数量"></a>第一步：统计操作数量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">algorithm</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>; <span class="hljs-comment">// +0（技巧 1）</span><br>  a = a + n; <span class="hljs-comment">// +0（技巧 1）</span><br>  <span class="hljs-comment">// +n（技巧 2）</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span> * n + <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-comment">// +n*n（技巧 3）</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; n + <span class="hljs-number">1</span>; j++) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt"><br>// 精细统计<br>T(n) = 2n * (n + 1) + (5 * n + 1) + 2<br>     = 2n² + 7n + 3<br><br>// 粗略统计<br>T(n) = n² + n<br></code></pre></td></tr></table></figure><h4 id="第二步：判断渐近上界"><a href="#第二步：判断渐近上界" class="headerlink" title="第二步：判断渐近上界"></a>第二步：判断渐近上界</h4><p>时间复杂度由T(n)中最高阶的项来决定</p><p>示例：</p><table><thead><tr><th>操作数量(T(n))</th><th>时间复杂度O(f(n))</th></tr></thead><tbody><tr><td>1000</td><td>O(1)</td></tr><tr><td>3n + 2</td><td>O(n)</td></tr><tr><td>n² + 2n + 2</td><td>O(n²)</td></tr><tr><td>n<sup>3</sup> + 2</td><td>O(n<sup>3</sup>)</td></tr></tbody></table><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(2<sup>n</sup>) &lt; O(n!)</p><p>常数阶&lt; 对数阶 &lt; 线性阶 &lt; 线性对数阶 &lt; 平方阶 &lt; 指数阶 &lt; 阶乘阶</p><h3 id="最差、最佳、平均时间复杂度"><a href="#最差、最佳、平均时间复杂度" class="headerlink" title="最差、最佳、平均时间复杂度"></a>最差、最佳、平均时间复杂度</h3><p>“最差时间复杂度”对应函数渐近上界，使用大记号O表示。相应地，“最佳时间复杂度”对应函数渐近下界，用记号Ω表示</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>一般只考虑 暂存数据、栈帧空间和输出数据三部分</p><h3 id="推算方法-1"><a href="#推算方法-1" class="headerlink" title="推算方法"></a>推算方法</h3><ol><li>以最差输入数据为准</li><li>以算法运行中的峰值内存为准</li></ol><h3 id="常见类型-1"><a href="#常见类型-1" class="headerlink" title="常见类型"></a>常见类型</h3><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(n²) &lt; O(2<sup>n</sup>)</p><p>常数阶 &lt; 对数阶 &lt; 线性阶 &lt; 平方阶 &lt; 指数阶</p>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Hello 算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Hello 算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子目录部署 - Hexo</title>
    <link href="/notes/hexo/%E5%AD%90%E7%9B%AE%E5%BD%95%E9%83%A8%E7%BD%B2/"/>
    <url>/notes/hexo/%E5%AD%90%E7%9B%AE%E5%BD%95%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天wanmeishijie.xyz的域名备案已经通过了，所以这个项目部署迁移到了腾讯云服务器上，挂载了HTTPS，暂时不想用二级域名，所以采用子目录的方式统一分发不同的服务。</p><h3 id="解决Hexo子目录问题"><a href="#解决Hexo子目录问题" class="headerlink" title="解决Hexo子目录问题"></a>解决Hexo子目录问题</h3><p>其实只需要设置root就可以了</p><p>可参考：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><h3 id="处理nginx配置"><a href="#处理nginx配置" class="headerlink" title="处理nginx配置"></a>处理nginx配置</h3><p>配置URL子路径映射</p><h3 id="处理Github-Action"><a href="#处理Github-Action" class="headerlink" title="处理Github Action"></a>处理Github Action</h3><p>因为之前是通过Github自动构建，且自动同步到gitee，这一步需要配置自动构建出的文件也需要加入子目录</p><p>我用的是 <a href="https://github.com/peaceiris/actions-gh-pages%E8%BF%99%E4%B8%AA%E6%8F%92%E4%BB%B6">https://github.com/peaceiris/actions-gh-pages这个插件</a> 因此只需配置destination_dir即可</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">name: Deploy</span><br>  <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>  <span class="hljs-attribute">with</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">github_token</span><span class="hljs-punctuation">:</span> <span class="hljs-string">$&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br>    <span class="hljs-attribute">publish_dir</span><span class="hljs-punctuation">:</span> <span class="hljs-string">./public</span><br>    <span class="hljs-attribute">destination_dir</span><span class="hljs-punctuation">:</span> <span class="hljs-string">notes</span><br></code></pre></td></tr></table></figure><h3 id="服务器自动抓取-TODO"><a href="#服务器自动抓取-TODO" class="headerlink" title="服务器自动抓取(TODO)"></a>服务器自动抓取(TODO)</h3><p>这里想的是服务端留一个命令服务，限制可执行的一些命令，这样其他服务可以直接调取这些命令，而不用走鉴权流程，可以直接在Github Action中通过http执行Git pull动作，完成更新</p><p>…</p><p>容本帅再掉两根头发…</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH断联问题 - Linux</title>
    <link href="/notes/linux/ssh%E6%96%AD%E8%81%94%E9%97%AE%E9%A2%98/"/>
    <url>/notes/linux/ssh%E6%96%AD%E8%81%94%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>通过 ssh user@ip 登录远程服务器，隔一段时间不操作后会自动端口，导致本地的终端无法操作</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>修改&#x2F;etc&#x2F;ssh&#x2F;sshd_config文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Apache"><span class="hljs-attribute">ClientAliveInterval</span> <span class="hljs-number">60</span><br><span class="hljs-attribute">ClientAliveCountMax</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://cloud.tencent.com/developer/article/1788071">https://cloud.tencent.com/developer/article/1788071</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0006 Z 字形变换- Hero · 算法 · Leetcode</title>
    <link href="/notes/hero/algo/leetcode/0006%20Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
    <url>/notes/hero/algo/leetcode/0006%20Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目地址-0006-Z-字型变换"><a href="#题目地址-0006-Z-字型变换" class="headerlink" title="题目地址(0006. Z 字型变换)"></a>题目地址(0006. Z 字型变换)</h3><p><a href="https://leetcode.cn/problems/zigzag-conversion">https://leetcode.cn/problems/zigzag-conversion</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs txt">将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。<br><br>比如输入字符串为 &quot;PAYPALISHIRING&quot; 行数为 3 时，排列如下：<br><br>P   A   H   N<br>A P L S I I G<br>Y   I   R<br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&quot;PAHNAPLSIIGYIR&quot;。<br><br>请你实现这个将字符串进行指定行数变换的函数：<br><br>string convert(string s, int numRows);<br><br><br>示例 1：<br><br>输入：s = &quot;PAYPALISHIRING&quot;, numRows = 3<br>输出：&quot;PAHNAPLSIIGYIR&quot;<br>示例 2：<br>输入：s = &quot;PAYPALISHIRING&quot;, numRows = 4<br>输出：&quot;PINALSIGYAHRPI&quot;<br>解释：<br>P     I    N<br>A   L S  I G<br>Y A   H R<br>P     I<br>示例 3：<br><br>输入：s = &quot;A&quot;, numRows = 1<br>输出：&quot;A&quot;<br><br><br>提示：<br><br>1 &lt;= s.length &lt;= 1000<br>s 由英文字母（小写和大写）、&#x27;,&#x27; 和 &#x27;.&#x27; 组成<br>1 &lt;= numRows &lt;= 1000<br></code></pre></td></tr></table></figure><h3 id="JS实现"><a href="#JS实现" class="headerlink" title="JS实现"></a>JS实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">numRows</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> convert = <span class="hljs-keyword">function</span> (<span class="hljs-params">s, numRows</span>) &#123;<br>  <span class="hljs-keyword">if</span> (numRows &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> s;<br>  <span class="hljs-keyword">let</span> rowIndex = <span class="hljs-number">0</span>,<br>    <span class="hljs-comment">// step作为标识值 也作为正向和反向遍历的插值</span><br>    step = -<span class="hljs-number">1</span>,<br>    res = [];<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!res[rowIndex]) res[rowIndex] = <span class="hljs-string">&quot;&quot;</span>;<br>    res[rowIndex] += s[i];<br>    <span class="hljs-keyword">if</span> (rowIndex === <span class="hljs-number">0</span> || rowIndex === numRows - <span class="hljs-number">1</span>) step = -step;<br>    rowIndex += step;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh无法连接问题 - Github</title>
    <link href="/notes/github/ssh%20%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/"/>
    <url>/notes/github/ssh%20%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用SSH无法连接到Github，最后显示重超时，但改用http可以正常拉取代码</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在~&#x2F;.ssh&#x2F;config中添加gihutb的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sshconfig">Host github.com<br> Hostname ssh.github.com<br> Port 443<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/15589682/ssh-connect-to-host-github-com-port-22-connection-timed-out">https://stackoverflow.com/questions/15589682/ssh-connect-to-host-github-com-port-22-connection-timed-out</a></p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事件冒泡的应用 - HTML · DOM</title>
    <link href="/notes/html/dom/event/"/>
    <url>/notes/html/dom/event/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天碰到一个问题，业务里有一个消息盒子，里面的内容是通过富文本配置出来的，最终通过React的dangerouslySetInnerHTML直接插入到了DOM中，然而里面有a标签，配置的本意是跳转内部链接，即打开平台内部的另外一个页面，然而a链接导致整个页面刷新了，体验非常不好（我们是单页面应用）</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>要解决这个问题其实也很简答，就是拦截原生的a标签点击事件，然后通过e.preventDefault()阻止默认事件，即a链接的href跳转。关键就在于如何捕捉这个事件，因为a链接是在富文本里配置的字符串，没法直接和React中的代码交互，所以只能将这个事件加在富文本挂载的元素上，然后通过在冒泡阶段捕获点击事件，通过事件目标和配置的Href配置是否跳转的是内部路由，是的话就阻止默认事件，使用react-router的historr.push()跳转</p><h3 id="胡思乱想"><a href="#胡思乱想" class="headerlink" title="胡思乱想"></a>胡思乱想</h3><p>突然想到好多网站(知乎、CSDN)在跳转外部链接时，都会弹出一个新标签页，并让确认是否跳转该链接。现在想来，应该也是这种实现方案吧</p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>Event</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>Event</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础编辑 - Emacs · 帮助文档</title>
    <link href="/notes/emacs/docs/basic_edit/"/>
    <url>/notes/emacs/docs/basic_edit/</url>
    
    <content type="html"><![CDATA[<h2 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>emacs默认就可以直接键入字符，像普通的文本编辑器一样</p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>使用 <kbd>Enter</kbd> 可换行，使用 <kbd>Ctrl-j</kbd> 进行无自动缩进换行</p><h3 id="特殊键位"><a href="#特殊键位" class="headerlink" title="特殊键位"></a>特殊键位</h3><p>可用通过 <kbd>Ctrl-q</kbd> 键，后面按下的特殊键位(如Delete、Enter、甚至Ctrl-g)便能插入编辑器</p><h2 id="改变光标的位置"><a href="#改变光标的位置" class="headerlink" title="改变光标的位置"></a>改变光标的位置</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl-f</td><td>向前移动一个字符</td></tr><tr><td>Ctrl-b</td><td>向后移动一个字符</td></tr><tr><td>Ctrl-p</td><td>向上移动一行</td></tr><tr><td>Ctrl-n</td><td>向下移动一行</td></tr><tr><td>Ctrl-a</td><td>移动到行首</td></tr><tr><td>Ctrl-e</td><td>移动到行尾</td></tr><tr><td>Alt-f</td><td>向前移动一个单词</td></tr><tr><td>Alt-b</td><td>向后移动一个单词</td></tr><tr><td>Alt-r</td><td>首行尾行反复横跳</td></tr><tr><td>Ctrl-v</td><td>屏幕向下一屏</td></tr><tr><td>Alt-v</td><td>屏幕向上一屏</td></tr><tr><td>Alt-g c n</td><td>移动到全文字符第n个位置</td></tr><tr><td>Alt-g Alt-g n</td><td>光标移动到第n行</td></tr><tr><td>Alt-g g n</td><td>光标移动到第n行</td></tr><tr><td>Alt-g Tab n</td><td>光标移动到当前行第n列</td></tr><tr><td>Ctrl-x Ctrl-n</td><td>默认被禁用了，应该还是设置列的</td></tr><tr><td>Ctrl-u Ctrl-x Ctrl-n</td><td>默认被禁用了，应该是取消光标列移动的</td></tr></tbody></table><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>BACKSPACE</td><td>删除光标前字符</td></tr><tr><td>Delete</td><td>删除光标后字符</td></tr><tr><td>Ctrl-d</td><td>删除光标后字符</td></tr><tr><td>Ctrl-k</td><td>删除整行</td></tr><tr><td>Alt-k</td><td>删除单词(和电脑默认快捷键冲突)</td></tr></tbody></table><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl-&#x2F;</td><td>撤销</td></tr><tr><td>Ctrl-x u</td><td>撤销</td></tr><tr><td>Ctrl-_</td><td>撤销</td></tr></tbody></table><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl-x Ctrl-f</td><td>打开&#x2F;创建文件</td></tr><tr><td>Ctrl-x Ctrl-s</td><td>保存文件</td></tr></tbody></table><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl-h k **</td><td>获取快捷键**的帮助说明</td></tr></tbody></table><h2 id="空白行"><a href="#空白行" class="headerlink" title="空白行"></a>空白行</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl-o</td><td>插入空行</td></tr><tr><td>Ctrl-x Ctrl-o</td><td>删除空行</td></tr></tbody></table><h2 id="数字参数"><a href="#数字参数" class="headerlink" title="数字参数"></a>数字参数</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Alt-3 Ctrl-p</td><td>向上移动3行，感觉像是重复指令</td></tr></tbody></table><h2 id="重复指令"><a href="#重复指令" class="headerlink" title="重复指令"></a>重复指令</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl-u 2 0 Ctrl-d</td><td>删除20个字符</td></tr><tr><td>Ctrl-x z z z …</td><td>重复前面命令，每个z重复一次</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>emacs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>emacs</tag>
      
      <tag>编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>屏幕组织 - Emacs · 帮助文档</title>
    <link href="/notes/emacs/docs/screen/"/>
    <url>/notes/emacs/docs/screen/</url>
    
    <content type="html"><![CDATA[<h2 id="点-Point"><a href="#点-Point" class="headerlink" title="点(Point)"></a>点(Point)</h2><p>这个概览和vim里的光标一致</p><h2 id="回显区域-The-Echo-Area"><a href="#回显区域-The-Echo-Area" class="headerlink" title="回显区域(The Echo Area)"></a>回显区域(The Echo Area)</h2><p>vim里的最后一行输入命令</p><h2 id="模式线-The-Mode-Line"><a href="#模式线-The-Mode-Line" class="headerlink" title="模式线(The Mode Line)"></a>模式线(The Mode Line)</h2><h2 id="菜单栏-The-menu-bar"><a href="#菜单栏-The-menu-bar" class="headerlink" title="菜单栏(The menu bar)"></a>菜单栏(The menu bar)</h2>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>emacs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>emacs</tag>
      
      <tag>编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.x版本问题汇总 - React · Antd</title>
    <link href="/notes/react/antd_v3%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/notes/react/antd_v3%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="动态表单无法清空"><a href="#动态表单无法清空" class="headerlink" title="动态表单无法清空"></a>动态表单无法清空</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>动态表单在删除后，数据仍然保存在表单中，导致校验时出现对旧值的校验，及保存时整个数据结构与预期不一致</p><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>getFieldDecoratorr()在3.x中(rc-from&#x2F;2.4.10)，使用ref判断组件是否卸载，而自定义的函数组件不支持ref，导致清理逻辑失效</p><p>这是ref实现的代码片段，注意clearField函数其实就是清理字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">saveRef</span>(<span class="hljs-params">name, _, component</span>) &#123;<br>   <span class="hljs-keyword">if</span> (!component) &#123;<br>     <span class="hljs-keyword">const</span> fieldMeta = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fieldsStore</span>.<span class="hljs-title function_">getFieldMeta</span>(name);<br>     <span class="hljs-keyword">if</span> (!fieldMeta.<span class="hljs-property">preserve</span>) &#123;<br>       <span class="hljs-comment">// after destroy, delete data</span><br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">clearedFieldMetaCache</span>[name] = &#123;<br>         <span class="hljs-attr">field</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">fieldsStore</span>.<span class="hljs-title function_">getField</span>(name),<br>         <span class="hljs-attr">meta</span>: fieldMeta,<br>       &#125;;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">clearField</span>(name);<br>     &#125;<br>     <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">domFields</span>[name];<br>     <span class="hljs-keyword">return</span>;<br>   &#125;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">domFields</span>[name] = <span class="hljs-literal">true</span>;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">recoverClearedField</span>(name);<br>   <span class="hljs-keyword">const</span> fieldMeta = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fieldsStore</span>.<span class="hljs-title function_">getFieldMeta</span>(name);<br>   <span class="hljs-keyword">if</span> (fieldMeta) &#123;<br>     <span class="hljs-keyword">const</span> ref = fieldMeta.<span class="hljs-property">ref</span>;<br>     <span class="hljs-keyword">if</span> (ref) &#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> ref === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`can not set ref string for <span class="hljs-subst">$&#123;name&#125;</span>`</span>);<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> ref === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>         <span class="hljs-title function_">ref</span>(component);<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(ref, <span class="hljs-string">&#x27;current&#x27;</span>)) &#123;<br>         ref.<span class="hljs-property">current</span> = component;<br>       &#125;<br>     &#125;<br>   &#125;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">instances</span>[name] = component;<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>给函数组件添加forwardRef，转发ref到子组件</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
      <category>Antd</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Antd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快捷键 - Mac</title>
    <link href="/notes/mac/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/notes/mac/%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td><kbd>Alt-N</kbd></td><td>显示通知中心</td></tr><tr><td><kbd>Alt-A</kbd></td><td>显示启动台</td></tr><tr><td><kbd>F1</kbd></td><td>降低显示器亮度</td></tr><tr><td><kbd>F1</kbd></td><td>提高显示器亮度</td></tr><tr><td><kbd>Alt-D</kbd></td><td>显示桌面</td></tr><tr><td><kbd>Ctrl-8</kbd></td><td>焦点移动到菜单栏</td></tr><tr><td><kbd>Win-`</kbd></td><td>将焦点移动到下一窗口(屏幕)</td></tr><tr><td><kbd>Ctrl-F3</kbd></td><td>将焦点移动到程序坞</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令行快速输入 - Hero · Nvim · 帮助文档</title>
    <link href="/notes/nvim/help/command/"/>
    <url>/notes/nvim/help/command/</url>
    
    <content type="html"><![CDATA[<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>&lt;Left&gt;</td><td>向左移动</td></tr><tr><td>&lt;Right&gt;</td><td>向右移动</td></tr><tr><td>&lt;Right&gt;</td><td>向右移动</td></tr><tr><td>&lt;S-Left&gt;</td><td>向左移动一个单词</td></tr><tr><td>Ctrl-B</td><td>起始处</td></tr><tr><td>Ctrl-E</td><td>结尾处</td></tr><tr><td>Ctrl-W</td><td>删除一个单词</td></tr></tbody></table><h3 id="替换模式-❌-实际尝试是出现一个奇怪的字符-然后没法替换…"><a href="#替换模式-❌-实际尝试是出现一个奇怪的字符-然后没法替换…" class="headerlink" title="替换模式 ❌ (实际尝试是出现一个奇怪的字符 然后没法替换…)"></a>替换模式 ❌ (实际尝试是出现一个奇怪的字符 然后没法替换…)</h3><p>键入<kbd>Insert</kbd>进入替换模式，再次键入则退出替换模式</p>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>Vim</category>
      
      <category>Nvim</category>
      
      <category>VimHelp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nvim</tag>
      
      <tag>Vim</tag>
      
      <tag>Hero</tag>
      
      <tag>VimHelp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>registers - Nvim · 帮助文档</title>
    <link href="/notes/nvim/help/resgisters/"/>
    <url>/notes/nvim/help/resgisters/</url>
    
    <content type="html"><![CDATA[<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>使用 “ 查看当前registers</p><h3 id="Unnamed-register-“”"><a href="#Unnamed-register-“”" class="headerlink" title="Unnamed register “”"></a>Unnamed register “”</h3><p>“d”, “c”, “s”, “x”, “y” 命令</p><blockquote><p>注意使用 “_dd 命令不会存储在任何注册器中</p></blockquote><h3 id="数字注册器-“0-9”"><a href="#数字注册器-“0-9”" class="headerlink" title="数字注册器 “0 ~ 9”"></a>数字注册器 “0 ~ 9”</h3><p>会按照最近的操作从0~9按顺序存储到注册器中</p><h3 id="小规模删除注册器-“"><a href="#小规模删除注册器-“" class="headerlink" title="小规模删除注册器 “_"></a>小规模删除注册器 “_</h3><p>存储一行内的删除，如 x, dw</p><h3 id="命名注册器-“a-“z-或-“A-“Z"><a href="#命名注册器-“a-“z-或-“A-“Z" class="headerlink" title="命名注册器 “a ~ “z 或 “A ~ “Z"></a>命名注册器 “a ~ “z 或 “A ~ “Z</h3><p>可以在大小写总共52个字母里自己选一个作为存储标识</p><h3 id="只读存储器-“-“-和-“-“"><a href="#只读存储器-“-“-和-“-“" class="headerlink" title="只读存储器 “:, “. 和 “ “%"></a>只读存储器 “:, “. 和 “ “%</h3><ol><li>“. 存储最后插入的文本</li><li>“% 存储当前文件的名称</li><li>“: 存储最近执行的命令</li></ol><h3 id="候选文件注册器-“"><a href="#候选文件注册器-“" class="headerlink" title="候选文件注册器 “#"></a>候选文件注册器 “#</h3><blockquote><p>没太懂 😕</p></blockquote><p>存储文件名</p><h3 id="表达式注册器-“-x3D"><a href="#表达式注册器-“-x3D" class="headerlink" title="表达式注册器 “&#x3D;"></a>表达式注册器 “&#x3D;</h3><h3 id="选择注册器-“-和-“"><a href="#选择注册器-“-和-“" class="headerlink" title="选择注册器 “* 和 “+"></a>选择注册器 “* 和 “+</h3><blockquote><p>没懂 😕</p></blockquote><h3 id="黑洞-原文Black-hole-🤣-注册器-“"><a href="#黑洞-原文Black-hole-🤣-注册器-“" class="headerlink" title="黑洞(原文Black hole 🤣)注册器 “_"></a>黑洞(原文Black hole 🤣)注册器 “_</h3><p>用于删除操作不修改注册器</p><h3 id="最后搜索匹配注册器-“-x2F"><a href="#最后搜索匹配注册器-“-x2F" class="headerlink" title="最后搜索匹配注册器 “&#x2F;"></a>最后搜索匹配注册器 “&#x2F;</h3>]]></content>
    
    
    <categories>
      
      <category>Vim</category>
      
      <category>Nvim</category>
      
      <category>VimHelp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nvim</tag>
      
      <tag>Vim</tag>
      
      <tag>VimHelp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0005 最长回文子串 - Hero · 算法 · Leetcode</title>
    <link href="/notes/hero/algo/leetcode/0005%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <url>/notes/hero/algo/leetcode/0005%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目地址-0005-最长回文子串"><a href="#题目地址-0005-最长回文子串" class="headerlink" title="题目地址(0005. 最长回文子串)"></a>题目地址(0005. 最长回文子串)</h3><p><a href="https://leetcode.cn/problems/longest-palindromic-substring">https://leetcode.cn/problems/longest-palindromic-substring</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs txt">给你一个字符串 s，找到 s 中最长的回文子串。<br><br>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。<br><br><br><br>示例 1：<br><br>输入：s = &quot;babad&quot;<br>输出：&quot;bab&quot;<br>解释：&quot;aba&quot; 同样是符合题意的答案。<br>示例 2：<br><br>输入：s = &quot;cbbd&quot;<br>输出：&quot;bb&quot;<br><br><br>提示：<br><br>1 &lt;= s.length &lt;= 1000<br>s 仅由数字和英文字母组成<br><br></code></pre></td></tr></table></figure><!-- ### 核心知识 --><h3 id="JS实现-暴力双循环"><a href="#JS实现-暴力双循环" class="headerlink" title="JS实现(暴力双循环)"></a>JS实现(暴力双循环)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> longestPalindrome = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">let</span> idx = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt;= s.<span class="hljs-property">length</span>; j++) &#123;<br>      <span class="hljs-keyword">if</span> (j - i &gt; idx[<span class="hljs-number">1</span>] - idx[<span class="hljs-number">0</span>] &amp;&amp; <span class="hljs-title function_">validPalindromic</span>(s.<span class="hljs-title function_">slice</span>(i, j))) &#123;<br>        idx[<span class="hljs-number">0</span>] = i;<br>        idx[<span class="hljs-number">1</span>] = j;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">slice</span>(idx[<span class="hljs-number">0</span>], idx[<span class="hljs-number">1</span>]);<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">validPalindromic</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (i &lt; str.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (str[i] !== str[str.<span class="hljs-property">length</span> - i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    i++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JS实现-暴力双循环-回文串确认优化版"><a href="#JS实现-暴力双循环-回文串确认优化版" class="headerlink" title="JS实现(暴力双循环 回文串确认优化版)"></a>JS实现(暴力双循环 回文串确认优化版)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> longestPalindrome = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">let</span> targetArr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; s.<span class="hljs-property">length</span>; j++) &#123;<br>      <span class="hljs-keyword">if</span> (targetArr[<span class="hljs-number">1</span>] - targetArr[<span class="hljs-number">0</span>] &lt; j - i + <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-title function_">isPalindrome</span>(s, i, j)) &#123;<br>        targetArr = [i, j + <span class="hljs-number">1</span>];<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">slice</span>(targetArr[<span class="hljs-number">0</span>], targetArr[<span class="hljs-number">1</span>]);<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">str, left, right</span>) &#123;<br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">if</span> (str[left] !== str[right]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    left++;<br>    right--;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JS实现-动态规划"><a href="#JS实现-动态规划" class="headerlink" title="JS实现(动态规划)"></a>JS实现(动态规划)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> longestPalindrome = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">const</span> smap = [];<br>  <span class="hljs-keyword">let</span> [start, end] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; s.<span class="hljs-property">length</span>; j++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = j; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      <span class="hljs-keyword">if</span> (!smap[i]) smap[i] = [];<br>      <span class="hljs-comment">// 单个情况</span><br>      <span class="hljs-keyword">if</span> (i === j) &#123;<br>        smap[i][j] = <span class="hljs-literal">true</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] !== s[j]) &#123;<br>        smap[i][j] = <span class="hljs-literal">false</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j - i === <span class="hljs-number">1</span> &amp;&amp; s[i] === s[j]) &#123;<br>        smap[i][j] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (end - start &lt; j - i) &#123;<br>          start = i;<br>          end = j;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] === s[j] &amp;&amp; smap[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) &#123;<br>        smap[i][j] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (end - start &lt; j - i) &#123;<br>          start = i;<br>          end = j;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">slice</span>(start, end + <span class="hljs-number">1</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="JS实现-中心扩散"><a href="#JS实现-中心扩散" class="headerlink" title="JS实现(中心扩散)"></a>JS实现(中心扩散)</h3><p>中心扩散的核心还是在回文串的判断方式上，是从中心扩散的方式j</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> longestPalindrome = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">if</span> (s.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> s.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">let</span> maxLen = <span class="hljs-number">1</span>,<br>    max;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> [s1, e1] = <span class="hljs-title function_">isPalindrome</span>(s, i, i);<br>    <span class="hljs-keyword">let</span> [s2, e2] = <span class="hljs-title function_">isPalindrome</span>(s, i, i + <span class="hljs-number">1</span>);<br>    maxLen = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(maxLen, e1 - s1, e2 - s2);<br>  &#125;<br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 待补充</span><br>  <span class="hljs-comment">// return s.substring()</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">str, left, right</span>) &#123;<br>  <span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; str.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">if</span> (str[left] !== str[right]) <span class="hljs-keyword">return</span> [left - <span class="hljs-number">1</span>, right - <span class="hljs-number">1</span>];<br>    left--;<br>    right++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> [left, right];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串 - Hero · Lua · Lua程序设计读书笔记</title>
    <link href="/notes/hero/lua/Lua%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/notes/hero/lua/Lua%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="长度操作符"><a href="#长度操作符" class="headerlink" title="长度操作符"></a>长度操作符</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- #  使用 # 操作符可以获取字符串长度</span><br>#<span class="hljs-string">&#x27;aaa&#x27;</span><br><span class="hljs-comment">-- 3</span><br></code></pre></td></tr></table></figure><h3 id="连接操作符"><a href="#连接操作符" class="headerlink" title="连接操作符"></a>连接操作符</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- ..  使用 .. 操作符可以获取字符串长度</span><br><span class="hljs-string">&#x27;Hello &#x27;</span> .. <span class="hljs-string">&#x27;World&#x27;</span><br><span class="hljs-comment">--  Hello World</span><br></code></pre></td></tr></table></figure><h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">longString = <span class="hljs-string">[[</span><br><span class="hljs-string">  Hello,</span><br><span class="hljs-string">  Hello...</span><br><span class="hljs-string">]]</span><br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h5 id="tonumber"><a href="#tonumber" class="headerlink" title="tonumber()"></a>tonumber()</h5><h5 id="tostring"><a href="#tostring" class="headerlink" title="tostring()"></a>tostring()</h5><h3 id="字符串标准库"><a href="#字符串标准库" class="headerlink" title="字符串标准库"></a>字符串标准库</h3><ol><li>string.len(s)</li><li>string.reverse()</li><li>string.lower()</li><li>string.upper()</li><li>string.sub()</li><li>string.char()</li><li>string.byte()</li><li>string.format()</li><li>string.find()</li><li>string.gsub()</li></ol><h3 id="冒号操作符"><a href="#冒号操作符" class="headerlink" title="冒号操作符"></a>冒号操作符</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- : 操作符可以用来函数调用</span><br><span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>()<br><span class="hljs-comment">-- 可以重写为</span><br><span class="hljs-built_in">string</span>:<span class="hljs-built_in">format</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>Lua</category>
      
      <category>Lua程序设计读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>Lua</tag>
      
      <tag>Lua程序设计读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0004 寻找两个正序数组的中位数 - Hero · 算法 · Leetcode</title>
    <link href="/notes/hero/algo/leetcode/0004%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <url>/notes/hero/algo/leetcode/0004%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目地址-0004-寻找两个正序数组的中位数"><a href="#题目地址-0004-寻找两个正序数组的中位数" class="headerlink" title="题目地址(0004. 寻找两个正序数组的中位数 )"></a>题目地址(0004. 寻找两个正序数组的中位数 )</h3><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs txt"><br>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。<br><br>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。<br><br>你可以假设 nums1 和 nums2 不会同时为空。<br><br> <br><br>示例 1:<br><br>nums1 = [1, 3]<br>nums2 = [2]<br><br>则中位数是 2.0<br>示例 2:<br><br>nums1 = [1, 2]<br>nums2 = [3, 4]<br><br>则中位数是 (2 + 3)/2 = 2.5<br><br></code></pre></td></tr></table></figure><!-- ### 核心知识 --><h3 id="JS实现-粗暴版"><a href="#JS实现-粗暴版" class="headerlink" title="JS实现(粗暴版)"></a>JS实现(粗暴版)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> findMedianSortedArrays = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums1, nums2</span>) &#123;<br>  <span class="hljs-keyword">const</span> combinedArr = nums1.<span class="hljs-title function_">concat</span>(nums2).<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);<br>  <span class="hljs-keyword">const</span> halfLen = combinedArr.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(halfLen)) &#123;<br>    <span class="hljs-keyword">return</span> (combinedArr[halfLen - <span class="hljs-number">1</span>] + combinedArr[halfLen]) / <span class="hljs-number">2</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> combinedArr[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(halfLen)];<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="JS实现-归并排序-粗暴版"><a href="#JS实现-归并排序-粗暴版" class="headerlink" title="JS实现(归并排序 粗暴版)"></a>JS实现(归并排序 粗暴版)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> findMedianSortedArrays = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums1, nums2</span>) &#123;<br>  <span class="hljs-keyword">const</span> combinedArr = [];<br><br>  <span class="hljs-keyword">while</span> (nums1.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> || nums2.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (nums1.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>      combinedArr.<span class="hljs-title function_">push</span>(nums2.<span class="hljs-title function_">shift</span>());<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums2.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>      combinedArr.<span class="hljs-title function_">push</span>(nums1.<span class="hljs-title function_">shift</span>());<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[<span class="hljs-number">0</span>] &lt; nums2[<span class="hljs-number">0</span>]) &#123;<br>      combinedArr.<span class="hljs-title function_">push</span>(nums1.<span class="hljs-title function_">shift</span>());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      combinedArr.<span class="hljs-title function_">push</span>(nums2.<span class="hljs-title function_">shift</span>());<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> halfLen = combinedArr.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(halfLen)) &#123;<br>    <span class="hljs-keyword">return</span> (combinedArr[halfLen - <span class="hljs-number">1</span>] + combinedArr[halfLen]) / <span class="hljs-number">2</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> combinedArr[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(halfLen)];<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0003 无重复字符的最长子串 - Hero · 算法 · Leetcode</title>
    <link href="/notes/hero/algo/leetcode/0003%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <url>/notes/hero/algo/leetcode/0003%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目地址-0003-无重复字符的最长子串"><a href="#题目地址-0003-无重复字符的最长子串" class="headerlink" title="题目地址(0003. 无重复字符的最长子串)"></a>题目地址(0003. 无重复字符的最长子串)</h3><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs txt">给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。<br><br>示例 1:<br><br>输入: &quot;abcabcbb&quot;<br>输出: 3<br>解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<br>示例 2:<br><br>输入: &quot;bbbbb&quot;<br>输出: 1<br>解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。<br>示例 3:<br><br>输入: &quot;pwwkew&quot;<br>输出: 3<br>解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。<br><br></code></pre></td></tr></table></figure><h3 id="核心知识"><a href="#核心知识" class="headerlink" title="核心知识"></a>核心知识</h3><ol><li>滑动窗口</li><li>哈希表</li></ol><h3 id="JS实现"><a href="#JS实现" class="headerlink" title="JS实现"></a>JS实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> lengthOfLongestSubstring = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>,<br>    end = <span class="hljs-number">0</span>,<br>    freqMap = &#123;&#125;,<br>    maxLen = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (end &lt; s.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">if</span> (freqMap[s[end]] === <span class="hljs-literal">undefined</span>) &#123;<br>      freqMap[s[end]] = <span class="hljs-number">1</span>;<br>      maxLen = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(maxLen, end - start + <span class="hljs-number">1</span>);<br>      end++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">delete</span> freqMap[s[start]];<br>      start++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> maxLen;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h3><p>使用map确认是否有重复字符，滑动窗口记录当前最长的无重复子串. 在移除的过程中还是很挫，因为获得重复索引的话，start是可以直接一步跳到位的，而不必做无用的累加，但基于map的确认，还是需要逐个从map中移除.若使用数组的话，又会添加确认重复的检索负担</p>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios-mock-adapter - 数据模拟 · 三方库</title>
    <link href="/notes/js-libs/mock/"/>
    <url>/notes/js-libs/mock/</url>
    
    <content type="html"><![CDATA[<h3 id="axios-mock-adapter"><a href="#axios-mock-adapter" class="headerlink" title="axios-mock-adapter"></a>axios-mock-adapter</h3><p>今天看大屏的源码时，发现了这个库，看了看发现真好用</p><p>基于axios的代码可以很随意和方便的在各自模块进行这种无侵入式的数据模拟，非常方便</p><blockquote><p><a href="https://www.npmjs.com/package/axios-mock-adapter">https://www.npmjs.com/package/axios-mock-adapter</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>js-libs</category>
      
      <category>axios</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js-libs</tag>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事件拦截 - HTML · Event</title>
    <link href="/notes/html/confused/%E4%BA%8B%E4%BB%B6/"/>
    <url>/notes/html/confused/%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>一些无关紧要的错误被抛到window.onerror事件上，导致异常触发了原有的事件监听，但原有的时间监听是框架内部的无法改动，所以需要拦截事件</p><p><a href="https://github.com/juggle/resize-observer/issues/103">https://github.com/juggle/resize-observer/issues/103</a></p><h3 id="阻止触发其他事件监听器"><a href="#阻止触发其他事件监听器" class="headerlink" title="阻止触发其他事件监听器"></a>阻止触发其他事件监听器</h3><p>event.stopImmediatePropagation()</p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>Event</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>Event</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用技巧 - Nvim · 帮助文档</title>
    <link href="/notes/nvim/help/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/notes/nvim/help/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="替换一个单词"><a href="#替换一个单词" class="headerlink" title="替换一个单词"></a>替换一个单词</h3><blockquote><p>:%s&#x2F;&lt;four&gt;&#x2F;4&#x2F;gc</p></blockquote><ul><li>% 匹配全行(文)</li><li>g 匹配单行全部</li><li>&lt; 匹配单词开始</li><li>&gt; 匹配单词开始</li><li>c 将会在每个匹配出给出确认提示</li></ul><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><blockquote><p>:%s&#x2F;([^,]_), (._)&#x2F;\2 \1&#x2F;</p></blockquote><p>可以使用类正则的表达</p>]]></content>
    
    
    <categories>
      
      <category>Vim</category>
      
      <category>Nvim</category>
      
      <category>VimHelp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nvim</tag>
      
      <tag>Vim</tag>
      
      <tag>VimHelp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序 - 微前端</title>
    <link href="/notes/micro-front/%E5%BA%8F/"/>
    <url>/notes/micro-front/%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="几种实现方案"><a href="#几种实现方案" class="headerlink" title="几种实现方案"></a>几种实现方案</h3><h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><p>天然的跨应用集成方案，缺点也很明显(跨域通信限制、DOM割裂导致的类弹窗类区域限制)</p><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>全屏嵌入</li><li>需要快速集成的跨框架、跨版本的已有老项目</li></ul><h4 id="基于路由的渲染"><a href="#基于路由的渲染" class="headerlink" title="基于路由的渲染"></a>基于路由的渲染</h4><ol><li><p>SingleSPA:</p><p>基座应用统筹管理路由，基于路由渲染，基座管理和理解都相当费事，且很多事情都需要自己控制和约束</p></li><li><p>乾坤:</p><p>对single-spa做了进一步封装和完善，简化了注册流程，实现了应用隔离(沙箱)，但基于路由渲染的本质没有变化</p></li></ol><h5 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>新项目</li><li>基于UMI的项目</li><li>需要跨框架开发的项目</li><li>需要在同一个宿主环境集成的项目</li></ul><h4 id="基于代理WebComponet的实现-已有的开源框架中看起来Bug都还比较多，不太稳定"><a href="#基于代理WebComponet的实现-已有的开源框架中看起来Bug都还比较多，不太稳定" class="headerlink" title="基于代理WebComponet的实现(已有的开源框架中看起来Bug都还比较多，不太稳定)"></a>基于代理WebComponet的实现(已有的开源框架中看起来Bug都还比较多，不太稳定)</h4><p>本质都是通过解析原有DOM，并代理到自定义元素之上</p><ol><li>无界</li><li>micro-app</li></ol><h5 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>渐进式重构已有项目</li><li>有弹窗等需要跳出iframe限制的元素</li><li>需要沙箱环境防止污染的情况</li></ul><h4 id="基于Webpack的Module-Federation"><a href="#基于Webpack的Module-Federation" class="headerlink" title="基于Webpack的Module Federation"></a>基于Webpack的Module Federation</h4><p>本质上其实是提供了资源共享、资源分离和加载远程资源的能力</p><h5 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>新项目</li><li>框架确定的项目</li></ul><h4 id="基于特定框架的组件化分离方式-目前看来通过Webpack-Module-Federation就能实现"><a href="#基于特定框架的组件化分离方式-目前看来通过Webpack-Module-Federation就能实现" class="headerlink" title="基于特定框架的组件化分离方式(目前看来通过Webpack Module Federation就能实现)"></a>基于特定框架的组件化分离方式(目前看来通过Webpack Module Federation就能实现)</h4><p>基于特定框架，如React、Vue等，将子应用设计成一个组件</p><h5 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>新项目</li><li>框架确定的项目</li></ul>]]></content>
    
    
    <categories>
      
      <category>微前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置 - Nvim · 帮助文档</title>
    <link href="/notes/nvim/help/config/"/>
    <url>/notes/nvim/help/config/</url>
    
    <content type="html"><![CDATA[<h3 id="vimrc-文件"><a href="#vimrc-文件" class="headerlink" title="vimrc 文件"></a>vimrc 文件</h3><blockquote><p>:edit $MYVIMRC &#x2F;&#x2F; 在编辑器中执行即可打开配置文件</p></blockquote><ul><li>~&#x2F;.config&#x2F;nvim&#x2F;init.vim (Unix and OSX)</li><li>~&#x2F;AppData&#x2F;Local&#x2F;nvim&#x2F;init.vim (Windows)</li></ul><h3 id="添加一个包-package"><a href="#添加一个包-package" class="headerlink" title="添加一个包(package)"></a>添加一个包(package)</h3><ul><li>启动时自动加载</li><li>可选包</li></ul><blockquote><p>packadd</p></blockquote><p>内置的包管理器</p><h3 id="添加一个插件"><a href="#添加一个插件" class="headerlink" title="添加一个插件"></a>添加一个插件</h3><ul><li>全局插件(所有文件类型, 目录为~&#x2F;.local&#x2F;share&#x2F;nvim&#x2F;site&#x2F;plugin)</li><li>指定文件类型插件(插件目录为~&#x2F;.local&#x2F;share&#x2F;nvim&#x2F;site&#x2F;plugin)</li></ul><h5 id="为一种文件类型定义多个插件"><a href="#为一种文件类型定义多个插件" class="headerlink" title="为一种文件类型定义多个插件"></a>为一种文件类型定义多个插件</h5><pre><code class="hljs">ftplugin/&lt;filetype&gt;.vimftplugin/&lt;filetype&gt;_&lt;name&gt;.vimftplugin/&lt;filetype&gt;/&lt;name&gt;.vim</code></pre><h3 id="添加帮助文档"><a href="#添加帮助文档" class="headerlink" title="添加帮助文档"></a>添加帮助文档</h3><p>路径： ~&#x2F;.local&#x2F;share&#x2F;nvim&#x2F;site&#x2F;doc</p><h3 id="options-窗口"><a href="#options-窗口" class="headerlink" title="options 窗口"></a>options 窗口</h3><blockquote><p>:options</p></blockquote><p>可通过set * 设置(如：set ignorecase)</p>]]></content>
    
    
    <categories>
      
      <category>Vim</category>
      
      <category>Nvim</category>
      
      <category>VimHelp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nvim</tag>
      
      <tag>Vim</tag>
      
      <tag>VimHelp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快捷键 - Nvim</title>
    <link href="/notes/nvim/shortcut/"/>
    <url>/notes/nvim/shortcut/</url>
    
    <content type="html"><![CDATA[<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>J</td><td>删除换行符</td></tr><tr><td>U</td><td>撤销行上所有操作，再次按下则是反撤销</td></tr><tr><td>O</td><td>当前行上方插入</td></tr><tr><td>ZZ</td><td>保存并退出</td></tr><tr><td>e!</td><td>恢复源文件并继续编辑</td></tr><tr><td>Ctrl-]</td><td>(帮助文档)进入子主题</td></tr><tr><td>Ctrl-T</td><td>(帮助文档)返回上一级</td></tr><tr><td>Ctrl-O</td><td>(帮助文档)回到初始的地方</td></tr><tr><td>d + i + [‘“{(…]</td><td>删除对应区间内的内容(d in …)</td></tr><tr><td>jk</td><td>从编辑器模式到Normal模式(jdhao&#x2F;better-escape.vim)</td></tr><tr><td>g + Ctrl + g</td><td>显示文本统计情况</td></tr><tr><td>Ctrl + g</td><td>显示当前文件全路径</td></tr><tr><td>cs</td><td>surround快捷键，快速替换包围符</td></tr><tr><td>cst</td><td>surround快捷键，替换标签</td></tr><tr><td>ds</td><td>surround快捷键，移除包围符</td></tr><tr><td>ys</td><td>surround快捷键，插入包围付可以使用(ys3j”, ysiw’, ys2w{)等</td></tr><tr><td>yssb, yss)</td><td>surround快捷键，整行插入圆括号</td></tr><tr><td>zz</td><td>当前行移动到屏幕中央</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Vim</category>
      
      <category>Nvim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nvim</tag>
      
      <tag>Vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object - 源码阅读 · lodash</title>
    <link href="/notes/code-reading/lodash/Object/"/>
    <url>/notes/code-reading/lodash/Object/</url>
    
    <content type="html"><![CDATA[<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h5 id="at-object-paths"><a href="#at-object-paths" class="headerlink" title="_.at(object, [paths])"></a>_.at(object, [paths])</h5><blockquote><p>返回一个由数组path作为key从object取到的所有值集合，这个可以很方便的从一个杂乱的对象数组中快速索引到想要获取到的一些对象或值</p></blockquote><p>path取值的实现是通过while循环，索引对象key而获得最终值</p>]]></content>
    
    
    <categories>
      
      <category>源码阅读</category>
      
      <category>lodash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>lodash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Function - 源码阅读 · lodash</title>
    <link href="/notes/code-reading/lodash/Function/"/>
    <url>/notes/code-reading/lodash/Function/</url>
    
    <content type="html"><![CDATA[<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><h5 id="after-n-func"><a href="#after-n-func" class="headerlink" title="_.after(n, func)"></a>_.after(n, func)</h5><blockquote><p>返回一个函数，在该函数调用n次后执行func函数，这个在多个异步操作中确认所有任务都结束时感觉非常有用</p></blockquote><p>实现原理是借助闭包将n存储作计数用</p>]]></content>
    
    
    <categories>
      
      <category>源码阅读</category>
      
      <category>lodash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>lodash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础知识 - art-template</title>
    <link href="/notes/art-template/%E5%9F%BA%E7%A1%80/"/>
    <url>/notes/art-template/%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><p>同时支持支持标准语法和原始语法，标准语法支持基本模板语法以及基本 JavaScript 表达式；原始语法支持任意 JavaScript 语句，这和 EJS 一样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><br><span class="hljs-comment">&lt;!-- -------------------------------- 标准语法 --------------------------------- --&gt;</span><br>&#123;&#123;if user&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;&#123;/if&#125;&#125;<br><br><br><span class="hljs-comment">&lt;!-- -------------------------------- 原始语法 --------------------------------- --&gt;</span><br>&lt;% if (user) &#123; %&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&lt;%= user.name %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="变量输出"><a href="#变量输出" class="headerlink" title="变量输出"></a>变量输出</h3><h5 id="标准语法"><a href="#标准语法" class="headerlink" title="标准语法"></a>标准语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&#123;&#123;value&#125;&#125;<br>&#123;&#123;data.key&#125;&#125;<br>&#123;&#123;data[&#x27;key&#x27;]&#125;&#125;<br>&#123;&#123;a ? b : c&#125;&#125;<br>&#123;&#123;a || b&#125;&#125;<br>&#123;&#123;a + b&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="原始语法"><a href="#原始语法" class="headerlink" title="原始语法"></a>原始语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&lt;%= value %&gt;<br>&lt;%= data.key %&gt;<br>&lt;%= data[&#x27;key&#x27;] %&gt;<br>&lt;%= a ? b : c %&gt;<br>&lt;%= a || b %&gt;<br>&lt;%= a + b %&gt;<br></code></pre></td></tr></table></figure><h3 id="原生输出"><a href="#原生输出" class="headerlink" title="原生输出"></a>原生输出</h3><h5 id="标准语法-1"><a href="#标准语法-1" class="headerlink" title="标准语法"></a>标准语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&#123;&#123;@ value &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="原始语法-1"><a href="#原始语法-1" class="headerlink" title="原始语法"></a>原始语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&lt;%- value %&gt;<br></code></pre></td></tr></table></figure><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><h5 id="标准语法-2"><a href="#标准语法-2" class="headerlink" title="标准语法"></a>标准语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&#123;&#123;if value&#125;&#125; ... &#123;&#123;/if&#125;&#125;<br>&#123;&#123;if v1&#125;&#125; ... &#123;&#123;else if v2&#125;&#125; ... &#123;&#123;/if&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="原始语法-2"><a href="#原始语法-2" class="headerlink" title="原始语法"></a>原始语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&lt;% if (value) &#123; %&gt; ... &lt;% &#125; %&gt;<br>&lt;% if (v1) &#123; %&gt; ... &lt;% &#125; else if (v2) &#123; %&gt; ... &lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h5 id="标准语法-3"><a href="#标准语法-3" class="headerlink" title="标准语法"></a>标准语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&#123;&#123;each target&#125;&#125;<br>    &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;<br>&#123;&#123;/each&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="原始语法-3"><a href="#原始语法-3" class="headerlink" title="原始语法"></a>原始语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&lt;% for(var i = 0; i &lt; target.length; i++)&#123; %&gt;<br>    &lt;%= i %&gt; &lt;%= target[i] %&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h5 id="标准语法-4"><a href="#标准语法-4" class="headerlink" title="标准语法"></a>标准语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&#123;&#123;set temp = data.sub.content&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="原始语法-4"><a href="#原始语法-4" class="headerlink" title="原始语法"></a>原始语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&lt;% var temp = data.sub.content; %&gt;<br></code></pre></td></tr></table></figure><h2 id="模版继承"><a href="#模版继承" class="headerlink" title="模版继承"></a>模版继承</h2><h5 id="标准语法-5"><a href="#标准语法-5" class="headerlink" title="标准语法"></a>标准语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&#123;&#123;extend &#x27;./layout.art&#x27;&#125;&#125;<br><br><span class="hljs-comment">&lt;!-- 这个会注入到layout.art里面  类似vue里的slot name为head --&gt;</span><br>&#123;&#123;block &#x27;head&#x27;&#125;&#125; ... &#123;&#123;/block&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="原始语法-5"><a href="#原始语法-5" class="headerlink" title="原始语法"></a>原始语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&lt;% extend(&#x27;./layout.art&#x27;) %&gt;<br>&lt;% block(&#x27;head&#x27;, function()&#123; %&gt; ... &lt;% &#125;) %&gt;<br></code></pre></td></tr></table></figure><h2 id="子模版"><a href="#子模版" class="headerlink" title="子模版"></a>子模版</h2><h5 id="标准语法-6"><a href="#标准语法-6" class="headerlink" title="标准语法"></a>标准语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&#123;&#123;include &#x27;./header.art&#x27;&#125;&#125;<br>&#123;&#123;include &#x27;./header.art&#x27; data&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="原始语法-6"><a href="#原始语法-6" class="headerlink" title="原始语法"></a>原始语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&lt;% include(&#x27;./header.art&#x27;) %&gt;<br>&lt;% include(&#x27;./header.art&#x27;, data) %&gt;<br></code></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h5 id="标准语法-7"><a href="#标准语法-7" class="headerlink" title="标准语法"></a>标准语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&#123;&#123;date | timestamp | dateFormat &#x27;yyyy-MM-dd hh:mm:ss&#x27;&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="原始语法-7"><a href="#原始语法-7" class="headerlink" title="原始语法"></a>原始语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&lt;%= $imports.dateFormat($imports.timestamp(date), &#x27;yyyy-MM-dd hh:mm:ss&#x27;) %&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>art-template</category>
      
    </categories>
    
    
    <tags>
      
      <tag>art-template</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内容超出后无法滚动查看全部 -  CSS · Flex</title>
    <link href="/notes/css/flex%E6%BB%9A%E5%8A%A8%E5%8C%BA%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <url>/notes/css/flex%E6%BB%9A%E5%8A%A8%E5%8C%BA%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>就是一个Flex盒子然后里面包含着诸多子项，比如有10 个，但是限制了容器的高度并且制定了子项的高度，这样的话容器放不下就只能滚动，但是实际结果是滚动条无法滚动到最上面，有一部分被截断了没法看全，大概代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">overflow-y</span>: auto;<br>&#125;<br><br><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>很好奇，所以搜罗了一番：</p><p>这篇说的比较明白：</p><ol><li><a href="https://stackoverflow.com/questions/33454533/cant-scroll-to-top-of-flex-item-that-is-overflowing-container">https://stackoverflow.com/questions/33454533/cant-scroll-to-top-of-flex-item-that-is-overflowing-container</a></li></ol><p>这个快速给你提供了几种可行的解决方案，可以通过在容器外设置滚动条或者子项使用margin: auto代替justify-content和align-items.里面还链了一个MDN的讨论文档，但失效了。不过还有一段描述（抄了一段）：</p><p>与CSS中的其他居中方法不同，Flexbox的对齐属性进行“真正”居中。这意味着弹性项将保持居中，即使它们溢出弹性容器。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对数坐标 - echarts</title>
    <link href="/notes/echarts/%E5%AF%B9%E6%95%B0%E5%9D%90%E6%A0%87/"/>
    <url>/notes/echarts/%E5%AF%B9%E6%95%B0%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h2 id="对数坐标"><a href="#对数坐标" class="headerlink" title="对数坐标"></a>对数坐标</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>echarts 支持将坐标轴设为 type: log 来使用对数坐标</p><h5 id="体现在坐标轴上其实是指数刻度"><a href="#体现在坐标轴上其实是指数刻度" class="headerlink" title="体现在坐标轴上其实是指数刻度"></a>体现在坐标轴上其实是指数刻度</h5><h5 id="提现在数据展示中则是对数函数"><a href="#提现在数据展示中则是对数函数" class="headerlink" title="提现在数据展示中则是对数函数"></a>提现在数据展示中则是对数函数</h5><h5 id="仅仅支持配置-logBase-来设置对数的低-基数"><a href="#仅仅支持配置-logBase-来设置对数的低-基数" class="headerlink" title="仅仅支持配置 logBase 来设置对数的低(基数)"></a>仅仅支持配置 logBase 来设置对数的低(基数)</h5><ol><li>如设为 2，则坐标为 2, 4, 8, 16, …</li><li>如设为 10(默认), 则坐标为 10， 100, 1000, …</li></ol><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><ol><li>坐标轴只会根logBase及data做出展示，其他的配置则不会生效</li><li>没办法在对数轴的基础上做更细致的划分</li><li>data中不能有0，否则只展示0, 10(logBase)两个刻度</li></ol>]]></content>
    
    
    <categories>
      
      <category>echarts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Math - 源码阅读 · lodash</title>
    <link href="/notes/code-reading/lodash/Math/"/>
    <url>/notes/code-reading/lodash/Math/</url>
    
    <content type="html"><![CDATA[<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h5 id="add"><a href="#add" class="headerlink" title="_.add()"></a>_.add()</h5><ol><li>函数生成函数</li><li>baseToNumber(): 处理了Symbol, 其他使用了 <strong>+</strong> 操作符转换</li><li>baseToString(): 处理了Array，Symbol，-0(-0 &#x3D;&#x3D;&#x3D; 0，所以使用 1 &#x2F; -0 &#x3D;&#x3D;&#x3D; Number.NEGATIVE_INFINITY)</li><li>相加的两个参数有一个为字符串，则以字符串的规则相加(和原生JS的+运算符操作类似)</li><li>处理了undefined</li></ol>]]></content>
    
    
    <categories>
      
      <category>源码阅读</category>
      
      <category>lodash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>lodash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆 (上) - Hero · 算法 · 算法通关之路</title>
    <link href="/notes/hero/algo/%E7%AE%97%E6%B3%95%E9%80%9A%E8%BF%87%E4%B9%8B%E8%B7%AF/%E5%A0%86%E4%B8%93%E9%A2%98/"/>
    <url>/notes/hero/algo/%E7%AE%97%E6%B3%95%E9%80%9A%E8%BF%87%E4%B9%8B%E8%B7%AF/%E5%A0%86%E4%B8%93%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>堆就是动态帮你求极值的，push和pop是其两个核心API</p><blockquote><p>关键词：优先队列  动态求极值</p></blockquote><h5 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h5><p>核心感觉跟搜索二叉树差不多，分层索引确实形成了一个搜索二叉树  Hah</p><h5 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h5><p>二叉堆就是一颗特殊的完全二叉树。它的特殊性只体现在一点，那就是父节点的权值不大于儿子的权值（小顶堆）</p>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>算法通关之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>算法通关之路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebSocket - Web</title>
    <link href="/notes/web/WebSocket/"/>
    <url>/notes/web/WebSocket/</url>
    
    <content type="html"><![CDATA[<h3 id="设计关键点"><a href="#设计关键点" class="headerlink" title="设计关键点"></a>设计关键点</h3><ol><li>onopen 事件确认连接建立</li><li>确认连接后可发送 send 事件</li><li>监听 message 事件获取后台推送消息</li><li>设计断线重连机制</li><li>不需要时及时调用 close 方法销毁</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树 - Hero · 算法 · 算法通关之路</title>
    <link href="/notes/hero/algo/%E7%AE%97%E6%B3%95%E9%80%9A%E8%BF%87%E4%B9%8B%E8%B7%AF/%E6%A0%91/"/>
    <url>/notes/hero/algo/%E7%AE%97%E6%B3%95%E9%80%9A%E8%BF%87%E4%B9%8B%E8%B7%AF/%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h3><ol><li>递归可视化：<a href="https://recursion.vercel.app/">https://recursion.vercel.app/</a></li></ol><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>树是一种非线性数据结构。树结构的基本单位是节点。节点之间的链接，称为分支（branch）。节点与分支形成树状，结构的开端，称为根（root），或根结点。根节点之外的节点，称为子节点（child）。没有链接到其他子节点的节点，称为叶节点（leaf）</p><h5 id="节点表示"><a href="#节点表示" class="headerlink" title="节点表示"></a>节点表示</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JSON">Node <span class="hljs-punctuation">&#123;</span><br>value<span class="hljs-punctuation">:</span> any; <span class="hljs-comment">// 当前节点的值</span><br>children<span class="hljs-punctuation">:</span> Array&lt;Node&gt;; <span class="hljs-comment">// 指向其儿子</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h5><ul><li>树的高度: 节点到叶子节点的最大值就是其高度</li><li>树的深度: 度和深度是相反的，高度是从下往上数，深度是从上往下。因此根节点的深度和叶子节点的高度是 0</li><li>树的层: 根开始定义，根为第一层，根的孩子为第二层</li><li>二叉树、N叉树…: 由其子节点最多可以有几个决定，最多有 N 个就是 N 叉树</li></ul><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树是树结构的一种，两个叉就是说每个节点最多只有两个子节点，我们习惯称之为左节点和右节点</p><h5 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON">Node <span class="hljs-punctuation">&#123;</span><br>value<span class="hljs-punctuation">:</span> any; <span class="hljs-comment">// 当前节点的值</span><br>left<span class="hljs-punctuation">:</span> Node | <span class="hljs-literal"><span class="hljs-keyword">null</span></span>; <span class="hljs-comment">// 左儿子</span><br>right<span class="hljs-punctuation">:</span> Node | <span class="hljs-literal"><span class="hljs-keyword">null</span></span>; <span class="hljs-comment">// 右儿子</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul><li>完全二叉树: 顺序</li><li>满二叉树</li><li>二叉搜索树：左小右大，查找极快</li><li>平衡二叉树</li><li>红黑树</li></ul><h5 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h5><ul><li>链表存储</li><li>数组存储(非常适合完全二叉树)</li></ul><h3 id="树的核心操作"><a href="#树的核心操作" class="headerlink" title="树的核心操作"></a>树的核心操作</h3><p>对树的核心操作始终是树的遍历</p><ul><li>后序遍历(区别在在于对当前父节点的处理时机，是在回溯是处理还是在访问是就处理)</li><li>先序遍历</li><li>中序遍历是有序的</li></ul><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><h5 id="深度优先遍历-DFS-细分前中后序遍历"><a href="#深度优先遍历-DFS-细分前中后序遍历" class="headerlink" title="深度优先遍历(DFS, 细分前中后序遍历)"></a>深度优先遍历(DFS, 细分前中后序遍历)</h5><p>借助函数调用栈；深度优先搜索算法（英语：Depth-First-Search，DFS）是一种用于遍历树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点 v 的所在边都己被探寻过，搜索将回溯到发现节点 v 的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止，属于盲目搜索。</p><h5 id="广度优先遍历-BFS-细分带层和不带层的"><a href="#广度优先遍历-BFS-细分带层和不带层的" class="headerlink" title="广度优先遍历(BFS, 细分带层和不带层的)"></a>广度优先遍历(BFS, 细分带层和不带层的)</h5><p>暴力枚举，BFS不是层次遍历(即一层一层的遍历)，BFS 的核心在于求最短问题时候可以提前终止，这才是它的核心价值，层次遍历是一种不需要提前终止的 BFS 的副产物</p>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>算法通关之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>算法通关之路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表 - Hero · 算法 · 算法通关之路</title>
    <link href="/notes/hero/algo/%E7%AE%97%E6%B3%95%E9%80%9A%E8%BF%87%E4%B9%8B%E8%B7%AF/%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98/"/>
    <url>/notes/hero/algo/%E7%AE%97%E6%B3%95%E9%80%9A%E8%BF%87%E4%B9%8B%E8%B7%AF/%E9%93%BE%E8%A1%A8%E4%B8%93%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><h3 id="操作技巧"><a href="#操作技巧" class="headerlink" title="操作技巧"></a>操作技巧</h3><h5 id="指针的修改"><a href="#指针的修改" class="headerlink" title="指针的修改"></a>指针的修改</h5><h5 id="链表的拼接"><a href="#链表的拼接" class="headerlink" title="链表的拼接"></a>链表的拼接</h5><h5 id="环、边界、前后序"><a href="#环、边界、前后序" class="headerlink" title="环、边界、前后序"></a>环、边界、前后序</h5><h5 id="虚拟头"><a href="#虚拟头" class="headerlink" title="虚拟头"></a>虚拟头</h5><h5 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h5><p>如在不知长度的情况下获取中间点，核心是快指针和慢指针的相对位置及根据这两个可获得指针位置的使用</p><h5 id="穿针引线"><a href="#穿针引线" class="headerlink" title="穿针引线"></a>穿针引线</h5><p>如翻转链表的一部分，断开两边，反转后再重新链接</p><blockquote><p>链表的核心是指针及指针的引用</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>算法通关之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>算法通关之路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构 - Hero · 算法 · 算法通关之路</title>
    <link href="/notes/hero/algo/%E7%AE%97%E6%B3%95%E9%80%9A%E8%BF%87%E4%B9%8B%E8%B7%AF/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/notes/hero/algo/%E7%AE%97%E6%B3%95%E9%80%9A%E8%BF%87%E4%B9%8B%E8%B7%AF/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="因果"><a href="#因果" class="headerlink" title="因果"></a>因果</h3><p>每次拾起数据结构和算法，内心其实都有一种排斥感，因为多数算法在工作中不会直接用到，导致给我的感觉是：学习这玩意就是为了应付差事，而这恰恰与我“喜欢就去做”的人生理念不符，有时候分不清到底是因为喜欢还是为了应付，而后终是没有持续的热情与坚持的理由。可能是最近发生的事情比较多，看了很多不一样的书，见了很多不一样的人，内心深处的一些想法也在逐渐改变。做一件事时，只有极其纯粹的一种想法，那就是完成它，不管过去处于何种理由，我确实对这件事做出了行动，现在却没有完成，而现在，我想完成它。</p><h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h3><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h3><h5 id="树"><a href="#树" class="headerlink" title="树"></a>树</h5><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><h5 id="二叉平衡树"><a href="#二叉平衡树" class="headerlink" title="二叉平衡树"></a>二叉平衡树</h5><h5 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h5><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>算法</category>
      
      <category>算法通关之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>算法</tag>
      
      <tag>算法通关之路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值 - Hero · Lua · Lua程序设计读书笔记</title>
    <link href="/notes/hero/lua/Lua%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%80%BC/"/>
    <url>/notes/hero/lua/Lua%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%95%B0%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="数值常量"><a href="#数值常量" class="headerlink" title="数值常量"></a>数值常量</h3><ol><li>双精度浮点格式(和JS一样)</li><li>32位整型和单精度浮点型(5.3版本引入，目前是5.4.6)</li><li>math.type()和type(), math.type能够区别数字类型</li></ol><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><ol><li>+ - * &#x2F; &#x2F;&#x2F; % ^</li></ol><blockquote><p>&#x2F;&#x2F; floor除法，结果向下取整, ^是幂运算</p></blockquote><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><ol><li>&lt; &gt; &lt;&#x3D; &gt;&#x3D; &#x3D;&#x3D; ~&#x3D;</li></ol><blockquote><p>~&#x3D; 是不等于</p></blockquote><h3 id="数学库"><a href="#数学库" class="headerlink" title="数学库"></a>数学库</h3><ol><li>math.random()</li><li>math.floor()</li><li>math.ceil()</li><li>math.modf()  向0取整，会返回小数部分作为第二个结果</li></ol><h3 id="表示范围"><a href="#表示范围" class="headerlink" title="表示范围"></a>表示范围</h3><ol><li>最大整数: 2^63 - 1(精简版使用32位)</li><li>出现溢出时会回环</li><li>1 &#x2F; 7 * 7 结果是0.999999994  而不是1(5.1版本测试是1，直接在线上测试是1.0，这个需要再调研下，0.1 + 0.2 &#x3D; 0.3，总之比JS处理的好多了)</li></ol><h3 id="惯例"><a href="#惯例" class="headerlink" title="惯例"></a>惯例</h3><ol><li>整型总是可以转换为浮点型</li><li>注意超过最大值(2^53)次时这种转换会出现异常</li><li>可以通过与0进行按位或运算，可以把浮点型值强制转换为整型值(若值超出范围则会抛出异常)</li><li>另一种强制转换方式是math.tointeger(), 不是整数或超出范围则返回nil</li></ol><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>Lua</category>
      
      <category>Lua程序设计读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>Lua</tag>
      
      <tag>Lua程序设计读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运算符 - JavaScript · 基础</title>
    <link href="/notes/javascript/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/notes/javascript/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><h5 id="lt-lt-左移"><a href="#lt-lt-左移" class="headerlink" title="&lt;&lt; (左移)"></a>&lt;&lt; (左移)</h5><p>左移操作符 (&lt;&lt;) 将第一个操作数向左移动指定位数，左边超出的位数将会被清除，右边将会补零</p><blockquote><p>x &lt;&lt; y: x * 2 ** y, 即结果是x乘以2的y次方，涉及到2倍数的数字相乘都可以使用左移运算提高执行效率</p></blockquote><h5 id="gt-gt-右移"><a href="#gt-gt-右移" class="headerlink" title="&gt;&gt; (右移)"></a>&gt;&gt; (右移)</h5><p>右移运算符（&gt;&gt;）将一个操作数的二进制表示形式向右移动指定位数，该操作数可以是数值或者 BigInt 类型。右边移出位被丢弃，左边移出的空位补符号位（最左边那位）。该操作也称为“符号位传播右移”（sign-propagating right shift）或“算术右移”（arithmetic right shift），因为返回值的符号位与第一个操作数的符号位相同</p><h5 id="gt-gt-gt-无符号右移"><a href="#gt-gt-gt-无符号右移" class="headerlink" title="&gt;&gt;&gt; (无符号右移)"></a>&gt;&gt;&gt; (无符号右移)</h5><blockquote><p>x &gt;&gt;&gt; 0: 这是被滥用的一个表达式，用于将非数字转换成0，或将数字转换为整数</p></blockquote><p>无符号右移运算符（&gt;&gt;&gt;）（零填充右移）将左操作数计算为无符号数，并将该数字的二进制表示形式移位为右操作数指定的位数，取模 32。向右移动的多余位将被丢弃，零位从左移入。其符号位变为 0，因此结果始终为非负数。与其他按位运算符不同，零填充右移返回一个无符号 32 位整数</p><blockquote><p>100 &gt;&gt;&gt; 32 与 100 &gt;&gt;&gt; 0结果相同，因为位偏移量将始终是介于 0 和 31 之间的正整数（包括 0 和 31）</p></blockquote><h3 id="自加运算"><a href="#自加运算" class="headerlink" title="自加运算"></a>自加运算</h3><p>++a</p><p>a++</p><blockquote><p>注意两者的区别，++a返回值是a + 1, a++ 返回值是a</p></blockquote><p>HoHo !</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Array - 源码阅读 · lodash</title>
    <link href="/notes/code-reading/lodash/Array/"/>
    <url>/notes/code-reading/lodash/Array/</url>
    
    <content type="html"><![CDATA[<h3 id="slice"><a href="#slice" class="headerlink" title="_.slice()"></a>_.slice()</h3><h5 id="和原生-Array-slice-的区别"><a href="#和原生-Array-slice-的区别" class="headerlink" title="和原生 Array.slice 的区别"></a>和原生 Array.slice 的区别</h5><ol><li>返回的是一个密集数组，原生的有可能会返回一个稀疏数组</li><li>稀疏数组在迭代器里不会执行</li></ol><h5 id="源码细节"><a href="#源码细节" class="headerlink" title="源码细节"></a>源码细节</h5><ol><li>使用 &gt;&gt;&gt; 0 无符号右移运算符处理有可能的异常情况，将非整数变成一个整数</li><li>然后使用 while 循环做了一次浅拷贝</li></ol><h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">slice</span>(<span class="hljs-params">array, start, end</span>) &#123;<br>    <span class="hljs-keyword">let</span> length = array == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : array.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">if</span> (!length) &#123;<br>        <span class="hljs-keyword">return</span> [];<br>    &#125;<br>    start = start == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : start;<br>    end = end === <span class="hljs-literal">undefined</span> ? length : end;<br><br>    <span class="hljs-keyword">if</span> (start &lt; <span class="hljs-number">0</span>) &#123;<br>        start = -start &gt; length ? <span class="hljs-number">0</span> : length + start;<br>    &#125;<br>    end = end &gt; length ? length : end;<br>    <span class="hljs-keyword">if</span> (end &lt; <span class="hljs-number">0</span>) &#123;<br>        end += length;<br>    &#125;<br>    length = start &gt; end ? <span class="hljs-number">0</span> : (end - start) &gt;&gt;&gt; <span class="hljs-number">0</span>;<br>    start &gt;&gt;&gt;= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">let</span> index = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(length);<br>    <span class="hljs-keyword">while</span> (++index &lt; length) &#123;<br>        result[index] = array[index + start];<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>HoHo !</p>]]></content>
    
    
    <categories>
      
      <category>源码阅读</category>
      
      <category>lodash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>lodash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023年11月25日 - 工作总结</title>
    <link href="/notes/work/2023-11-25/"/>
    <url>/notes/work/2023-11-25/</url>
    
    <content type="html"><![CDATA[<blockquote><p>区间项目：管理看板</p></blockquote><h3 id="rc-gantt库私有化扩展"><a href="#rc-gantt库私有化扩展" class="headerlink" title="rc-gantt库私有化扩展"></a>rc-gantt库私有化扩展</h3><ol><li>时间跨度限制</li><li>自动导航到当前项目开始时间</li><li>表格列初始化宽度异常问题(扩展属性字段后添加到store初始化依赖，导致多次初始化)</li></ol><h3 id="解决nexus-npm-仓库使用gropu无法安装依赖问题"><a href="#解决nexus-npm-仓库使用gropu无法安装依赖问题" class="headerlink" title="解决nexus npm 仓库使用gropu无法安装依赖问题"></a>解决nexus npm 仓库使用gropu无法安装依赖问题</h3><ol><li>见 <a href="/nexus/%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8group%E9%97%AE%E9%A2%98">无法使用group问题</a></li></ol><h3 id="管理看板与组态编辑器3D页面动作交互"><a href="#管理看板与组态编辑器3D页面动作交互" class="headerlink" title="管理看板与组态编辑器3D页面动作交互"></a>管理看板与组态编辑器3D页面动作交互</h3><ol><li>postMessage实现双向通信</li><li>指令式协议快速从管理看板调取组态3D API</li><li>设计管理看板视角控制组件及图层控制Checkbox组件</li></ol>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3中定义组件name - Vue</title>
    <link href="/notes/vue/Vue3%E4%B8%AD%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6name/"/>
    <url>/notes/vue/Vue3%E4%B8%AD%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6name/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>想要方便的通过组件名称在 vue dev tool 中查看对应的组件结构，选项式 API 可以通过设置 name 达到这一目的</p><h3 id="Vue3-0"><a href="#Vue3-0" class="headerlink" title="Vue3.0"></a>Vue3.0</h3><p>默认是通过的文件名称展示，不太灵活；除此之外，还可以通过 defineOptions()函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs VUE">defineOptions(&#123;<br>  name: &#x27;ComponentNameYouWant&#x27;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无法使用group问题 - Nexus</title>
    <link href="/notes/nexus/%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8group%E9%97%AE%E9%A2%98/"/>
    <url>/notes/nexus/%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8group%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="npm-login-无法登录"><a href="#npm-login-无法登录" class="headerlink" title="npm login 无法登录"></a>npm login 无法登录</h3><p>npm config设置了registry也无效，需要直接在命令后添加–registry</p><h3 id="npm-intall-无法安装依赖，提示401"><a href="#npm-intall-无法安装依赖，提示401" class="headerlink" title="npm intall 无法安装依赖，提示401"></a>npm intall 无法安装依赖，提示401</h3><ol><li>确认配置npm Bearer Token Realm，使其处于active</li><li>确认group的地址完全一致，包含最后一个 ‘&#x2F;‘</li><li>删除npm鉴权缓存，重新登录</li></ol>]]></content>
    
    
    <categories>
      
      <category>Nexus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Develop Tool 在Chrome里出不来的问题- React</title>
    <link href="/notes/react/Reverse%E5%BC%95%E5%8F%91%E7%9A%84%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF/"/>
    <url>/notes/react/Reverse%E5%BC%95%E5%8F%91%E7%9A%84%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><p>翻了下issues:</p><p><a href="https://github.com/facebook/react/issues/27564">https://github.com/facebook/react/issues/27564</a></p><p>然后点开偏好设置，恢复默认值并重新加载就好了…</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua语言入门 - Hero · Lua · Lua程序设计读书笔记</title>
    <link href="/notes/hero/lua/Lua%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Lua%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    <url>/notes/hero/lua/Lua%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Lua%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>代码运行流程和NodeJS差不多</p><h3 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs LUA"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fact</span><span class="hljs-params">(n)</span></span><br>  <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> n * fact(n - <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h3><p>和NodeJS一样可以直接在终端进行交互模式运行</p><ol><li>dofile(‘hello.lua’): 可以通过dofile在交互模式下加载lua文件</li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs LUA"><span class="hljs-comment">-- 单行注释</span><br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">  多行注释</span><br><span class="hljs-comment">]]</span><br><br><span class="hljs-comment">--[[</span><br><span class="hljs-comment">  多行注释，这种写法只需放开注释开头即可</span><br><span class="hljs-comment">-- ]]</span><br><br></code></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>全局变量无需声明即可使用，使用未经初始化的全局变量也不会导致错误(其值为nil)</p><h3 id="类型和值"><a href="#类型和值" class="headerlink" title="类型和值"></a>类型和值</h3><ol><li>nil</li><li>boolean</li><li>number</li><li>string</li><li>userdata</li><li>fucntion</li><li>thread</li><li>table</li></ol><blockquote><p>函数type()可以获值类型</p></blockquote><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li>and</li><li>not</li><li>or</li></ol>]]></content>
    
    
    <categories>
      
      <category>Hero</category>
      
      <category>Lua</category>
      
      <category>Lua程序设计读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hero</tag>
      
      <tag>Lua</tag>
      
      <tag>Lua程序设计读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我不知道的JavaScript - 源码阅读 · lodash</title>
    <link href="/notes/code-reading/lodash/%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript/"/>
    <url>/notes/code-reading/lodash/%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Object-prototype-toString"><a href="#1-Object-prototype-toString" class="headerlink" title="1. Object.prototype.toString()"></a>1. Object.prototype.toString()</h3><p>可以从其返回值 [object Undefined] 中判断出其对象类型，包括数组</p>]]></content>
    
    
    <categories>
      
      <category>源码阅读</category>
      
      <category>lodash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>lodash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何将微信缓存挂载到外挂硬盘</title>
    <link href="/notes/mac/%E5%A6%82%E4%BD%95%E5%BE%AE%E4%BF%A1%E7%BC%93%E5%AD%98%E6%8C%82%E8%BD%BD%E5%88%B0%E5%A4%96%E6%8C%82%E7%A1%AC%E7%9B%98/"/>
    <url>/notes/mac/%E5%A6%82%E4%BD%95%E5%BE%AE%E4%BF%A1%E7%BC%93%E5%AD%98%E6%8C%82%E8%BD%BD%E5%88%B0%E5%A4%96%E6%8C%82%E7%A1%AC%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>电脑磁盘满了，微信缓存站了20个G，Hah; 刚好有个外挂硬盘, SO:</p><h2 id="如何将微信缓存挪到这个外挂硬盘"><a href="#如何将微信缓存挪到这个外挂硬盘" class="headerlink" title="如何将微信缓存挪到这个外挂硬盘"></a>如何将微信缓存挪到这个外挂硬盘</h2><h4 id="第一步：退出微信"><a href="#第一步：退出微信" class="headerlink" title="第一步：退出微信"></a>第一步：退出微信</h4><h4 id="第二步：挪动缓存到指定外挂磁盘目录"><a href="#第二步：挪动缓存到指定外挂磁盘目录" class="headerlink" title="第二步：挪动缓存到指定外挂磁盘目录"></a>第二步：挪动缓存到指定外挂磁盘目录</h4><h4 id="第三步：创建软连接"><a href="#第三步：创建软连接" class="headerlink" title="第三步：创建软连接"></a>第三步：创建软连接</h4><p>找到微信保存文件的目录，然后在MessageTemp(需要删除原来的)这一层，执行下面的命令:</p><blockquote><p>ln -s 真实目录 MessageTemp</p></blockquote><h4 id="第四步：处理目录无法访问问题"><a href="#第四步：处理目录无法访问问题" class="headerlink" title="第四步：处理目录无法访问问题"></a>第四步：处理目录无法访问问题</h4><blockquote><p>sudo codesign –sign - –force –deep &#x2F;Applications&#x2F;WeChat.app — 解决目录无法写入。每次微信更新后需要再执行</p></blockquote><h4 id="第五步：登录微信"><a href="#第五步：登录微信" class="headerlink" title="第五步：登录微信"></a>第五步：登录微信</h4><blockquote><p>OK, 瑞思拜 !</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何选择第一个元素</title>
    <link href="/notes/css/%E7%94%BB%E4%B8%80%E4%B8%AA%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <url>/notes/css/%E7%94%BB%E4%B8%80%E4%B8%AA%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="潜意识"><a href="#潜意识" class="headerlink" title="潜意识"></a>潜意识</h2><p>第一反应就是 first-child:</p><p>然：表示在一组兄弟元素中的第一个元素</p><p>白: 只能选中第一个元素</p><p>第二反应就是 first-of-type:</p><p>然: 表示一组兄弟元素中其类型的第一个元素</p><p>白: 只能选中同类元素的第一个</p><h2 id="那么如何选择一类-class-选择器-中的第一个"><a href="#那么如何选择一类-class-选择器-中的第一个" class="headerlink" title="那么如何选择一类(class 选择器)中的第一个"></a>那么如何选择一类(class 选择器)中的第一个</h2><p>原理：通过兄弟选择器第二个元素到结束，然后取非</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.class</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-class">.class</span> ~ <span class="hljs-selector-class">.class</span>) &#123;<br>  // any style you want<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iframe在被移除的时候未触发beforeunload事件</title>
    <link href="/notes/html/confused/iframe-unload/"/>
    <url>/notes/html/confused/iframe-unload/</url>
    
    <content type="html"><![CDATA[<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>beforeunload 事件仅当浏览器窗口关闭或者刷新时才会触发</p><h3 id="如何监听-iframe-移除"><a href="#如何监听-iframe-移除" class="headerlink" title="如何监听 iframe 移除"></a>如何监听 iframe 移除</h3><p>可以使用 unload&#x2F;pagehide 事件代替</p><ol><li>unload 事件当文档或一个子资源正在被卸载时触发</li><li>pagehide 事件当浏览器在显示与会话历史记录不同的页面的过程中隐藏当前页面时触发</li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>Iframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>由Array.reverse引发的血案 - Vue</title>
    <link href="/notes/vue/Reverse%E5%BC%95%E5%8F%91%E7%9A%84%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF/"/>
    <url>/notes/vue/Reverse%E5%BC%95%E5%8F%91%E7%9A%84%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>项目部署后访问页面，竟然直接卡死 ！</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Array.reverse() 竟然直接修改原数组！然后 Vue 里面便形成了 监听变化 &#x3D;&gt; 修改元素组 &#x3D;&gt; 变化 &#x3D;&gt; 监听变化 的无限循环中！</p><p>(一直以为是返回新数组！所以排查到是因为 reverse 调用引起的问题时，大吃一惊！)</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Echarts使用setOption的合并方式</title>
    <link href="/notes/echarts/Echarts%E4%BD%BF%E7%94%A8setOption%E7%9A%84%E5%90%88%E5%B9%B6%E6%96%B9%E5%BC%8F/"/>
    <url>/notes/echarts/Echarts%E4%BD%BF%E7%94%A8setOption%E7%9A%84%E5%90%88%E5%B9%B6%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="合并方式"><a href="#合并方式" class="headerlink" title="合并方式"></a>合并方式</h2><h3 id="普通合并"><a href="#普通合并" class="headerlink" title="普通合并"></a>普通合并</h3><h4 id="触发条件："><a href="#触发条件：" class="headerlink" title="触发条件："></a>触发条件：</h4><ul><li>未设置 notMerge 参数</li><li>未设置 replaceMerge 参数</li></ul><h4 id="合并策略"><a href="#合并策略" class="headerlink" title="合并策略"></a>合并策略</h4><p>对于一种类型的组件（如：xAxis, series），新来的 option 中的每个“组件描述”（如：{type: ‘xAxis’, id: ‘xx’, name: ‘kk’, …}）会被尽量合并到已存在的组件中。剩余的情况，会在组件列表尾部创建新的组件。整体规则细节如下：</p><ol><li>先依次对 option 中每个有声明 id 或者 name 的“组件描述”，寻找能匹配其 id 或者 name 的已有的组件，找到的话则合并。</li><li>再依次对 option 中剩余的“组件描述”，寻找还未执行过前一条的已有组件，找到的话则合并。</li><li>其他 option 中剩余的“组件描述”，用于在组件列表尾部创建新组件。</li></ol><p><em>特点</em></p><ol><li>永远不会删除已存在的组件。也就是说，只支持增加，或者更新组件。</li><li>组件的索引（componentIndex）永远不会改变。</li><li>如果 id 和 name 没有在 option 中被指定（这是经常出现的情况），组件会按照它在 option 中的顺序一一合并到已有组件中。这种设定比较符合直觉。</li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 已有组件：</span><br><span class="hljs-punctuation">&#123;</span><br>    xAxis<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;m&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;n&#x27;<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> &#x27;nnn&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">6</span> <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;q&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">7</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 新来的 option ：</span><br>chart.setOption(<span class="hljs-punctuation">&#123;</span><br>    xAxis<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-comment">// id 没有指定。会寻找到第一个没有进行过合并的已有组件，进行合并。</span><br>        <span class="hljs-comment">// 即合并到 `id: &#x27;q&#x27;`。</span><br>        <span class="hljs-punctuation">&#123;</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">77</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// id 没有指定。最终会创建新组件。</span><br>        <span class="hljs-punctuation">&#123;</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">88</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// id 没有指定，但是 name 指定了。会被合并到已有的 `name: &#x27;nnn&#x27;` 组件。</span><br>        <span class="hljs-punctuation">&#123;</span> name<span class="hljs-punctuation">:</span> &#x27;nnn&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">66</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// id 指定了，会被合并到已有的 `id: &#x27;m&#x27;` 组件。</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;m&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">55</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span>);<br><span class="hljs-comment">// 结果组件：</span><br><span class="hljs-punctuation">&#123;</span><br>    xAxis<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;m&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">55</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;n&#x27;<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> &#x27;nnn&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">66</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;q&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">77</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">88</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="替换合并"><a href="#替换合并" class="headerlink" title="替换合并"></a>替换合并</h3><h4 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h4><ul><li>未设置 notMerge 参数</li><li>replaceMerge 指定组件类型</li></ul><h4 id="合并策略-1"><a href="#合并策略-1" class="headerlink" title="合并策略"></a>合并策略</h4><p>对于一种类型的组件（如：xAxis, series），只有 option 中指定了 id 并且已有组件中有此 id 时，已有组件会和 option 相应组件描述进行合并。否则，已有组件都会删除，新组件会被根据 option 创建。细节规则如下：</p><ol><li>先依次对 option 中每个有声明 id 的“组件描述”，寻找能匹配其 id 或者 name 的已有的组件，找到的话则合并。</li><li>删除其他没匹配到的已有组件。</li><li>依次对 option 中剩余的“组件描述”，创建新组件，填入刚因删除而空出来的位置上，或者增加到末尾。</li></ol><p><em>特点</em> ：</p><ol><li>与普通合并相比，支持了组件删除。</li><li>已有组件的索引永远不会变。这是为了保证，option 或者 API 中的 index 引用（例如：xAxisIndex: 2）仍能正常一致得使用。</li><li>整个处理过程结束后，可能存在一些“洞”，也就是说，在组件列表中的某些 index 上，并没有组件存在（被删除了）。但是这是可以被开发者预期和控制的。</li></ol><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 已有组件：</span><br><span class="hljs-punctuation">&#123;</span><br>    xAxis<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;m&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> min<span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;n&#x27;<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> &#x27;nnn&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span> min<span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span> <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;q&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> min<span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 新来的 option :</span><br>chart.setOption(<span class="hljs-punctuation">&#123;</span><br>    xAxis<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">111</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// id 已经指定了。因此会被合并进已有的组件 `id: &#x27;q&#x27;`。</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;q&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">77</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// id 已经指定了。但是已有组件没有此 id 。</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;t&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">222</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">333</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span> replaceMerge<span class="hljs-punctuation">:</span> &#x27;xAxis&#x27; <span class="hljs-punctuation">&#125;</span>);<br><span class="hljs-comment">// 结果组件：</span><br><span class="hljs-punctuation">&#123;</span><br>    xAxis<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-comment">// 原来的 id 为 &#x27;m&#x27; 的组件，被移除。</span><br>        <span class="hljs-comment">// 替换为新的组件。新组件中，并没有原来的 `min: 1000` 了。</span><br>        <span class="hljs-punctuation">&#123;</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">111</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 原来的 id 为 &#x27;n&#x27; 的组件，被移除。</span><br>        <span class="hljs-comment">// 替换为新的组件。新组件中，并没有原来的 `min: 1000` 了。</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;t&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">222</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 原来的组件没有被移除，而是和 option 中的组件描述进行了合并。</span><br>        <span class="hljs-comment">// 所以 `min: 1000` 被保留了。</span><br>        <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> &#x27;q&#x27;<span class="hljs-punctuation">,</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">77</span><span class="hljs-punctuation">,</span> min<span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 新添加的组件。</span><br>        <span class="hljs-punctuation">&#123;</span> interval<span class="hljs-punctuation">:</span> <span class="hljs-number">333</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="删除组件"><a href="#删除组件" class="headerlink" title="删除组件"></a>删除组件</h3><h4 id="触发条件-1"><a href="#触发条件-1" class="headerlink" title="触发条件"></a>触发条件</h4><ul><li>设置 notMerge 为 true</li></ul><h4 id="合并策略-2"><a href="#合并策略-2" class="headerlink" title="合并策略"></a>合并策略</h4><p>所有组件都会被删除，然后根据新 option 创建所有新组件</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://echarts.apache.org/zh/api.html#echartsInstance.setOption">https://echarts.apache.org/zh/api.html#echartsInstance.setOption</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>echarts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue中不展示Tooltip问题- echarts</title>
    <link href="/notes/echarts/Vue%E4%B8%AD%E4%B8%8D%E5%B1%95%E7%A4%BATooltip%E9%97%AE%E9%A2%98/"/>
    <url>/notes/echarts/Vue%E4%B8%AD%E4%B8%8D%E5%B1%95%E7%A4%BATooltip%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="echarts-实例在-Vue3-中不能是一个响应式对象，否则提示框会显示不出来"><a href="#echarts-实例在-Vue3-中不能是一个响应式对象，否则提示框会显示不出来" class="headerlink" title="echarts 实例在 Vue3 中不能是一个响应式对象，否则提示框会显示不出来!"></a>echarts 实例在 Vue3 中不能是一个响应式对象，否则提示框会显示不出来!</h3><p>可以使用 shallowRef 代替 ref !</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://blog.51cto.com/lenglingx/7050251">https://blog.51cto.com/lenglingx/7050251</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>echarts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在折线图上展示阈值 - echarts</title>
    <link href="/notes/echarts/%E5%A6%82%E4%BD%95%E5%9C%A8%E6%8A%98%E7%BA%BF%E5%9B%BE%E4%B8%8A%E5%B1%95%E7%A4%BA%E9%98%88%E5%80%BC/"/>
    <url>/notes/echarts/%E5%A6%82%E4%BD%95%E5%9C%A8%E6%8A%98%E7%BA%BF%E5%9B%BE%E4%B8%8A%E5%B1%95%E7%A4%BA%E9%98%88%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>核心是借助 echarts 的 visualMap 属性：</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">visualMap</span>: [<br>  &#123;<br>    <span class="hljs-attr">dimension</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 数据维度索引（可以将series中的data看做一个二维数组）</span><br>    <span class="hljs-attr">seriesIndex</span>: <span class="hljs-number">4</span>, <span class="hljs-comment">// 对应series的索引值，通过该属性可针对多个不同的的数据项设置不同的条件表达</span><br>    <span class="hljs-attr">outOfRange</span>: &#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-comment">// 超出范围的设置</span><br>    &#125;,<br>    <span class="hljs-attr">pieces</span>: [<br>      <span class="hljs-comment">// 针对单项的条件(限制)表达`</span><br>      &#123;<br>        <span class="hljs-attr">gt</span>: <span class="hljs-number">1000</span>,<br>        <span class="hljs-attr">lt</span>: <span class="hljs-number">1500</span>,<br>        <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;cyan&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>echarts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>画一个圆形进度条 - Canvas</title>
    <link href="/notes/canvas/%E7%94%BB%E4%B8%80%E4%B8%AA%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <url>/notes/canvas/%E7%94%BB%E4%B8%80%E4%B8%AA%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><p>不断绘制半圆弧(因为要形成间隔式透明线条效果)，绘制两层，一层用作背景，一层用作进度条展示</p><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; onMounted, ref, onUpdated &#125; from &#x27;vue&#x27;<br><br>const props = defineProps(&#123;<br>  value: &#123;<br>    type: Number,<br>    default: 0.3<br>  &#125;,<br>  color: &#123;<br>    type: String,<br>    default: &#x27;#46ebb7&#x27;<br>    // default: &#x27;#ffe699&#x27;<br>  &#125;,<br>  width: &#123;<br>    type: Number,<br>    default: 200<br>  &#125;,<br>  height: &#123;<br>    type: Number,<br>    default: 200<br>  &#125;<br>&#125;)<br><br>const canvasRef = ref(null)<br><br>const draw = () =&gt; &#123;<br>  const canvas = canvasRef.value<br>  const context = canvas.getContext(&#x27;2d&#x27;)<br>  const x = 0<br>  const y = 0<br>  const lineWidth = 20<br>  const radius = Math.min(canvas.width / 2, canvas.height / 2) - lineWidth / 2<br>  const segmentCount = 12 // 分割线数量<br>  const segmentAngle = (2 * Math.PI) / segmentCount // 每个分割线的角度<br>  const offsetAngle = Math.PI / 7 // 每个圆环偏移较多<br>  const halfWidth = canvas.width / 2<br>  const halfHeight = canvas.height / 2<br><br>  context.clearRect(0, 0, canvas.width, canvas.height)<br><br>  // 偏移画布起点到中心<br>  context.translate(halfWidth, halfHeight)<br>  context.rotate((-90 * Math.PI) / 180)<br><br>  // 绘制分割线<br>  for (let i = 0; i &lt; segmentCount; i++) &#123;<br>    const angle = i * segmentAngle<br>    const angleEnd = angle + offsetAngle<br><br>    // 绘制底部圆环<br>    context.beginPath()<br>    context.arc(x, y, radius, angle, angleEnd)<br>    context.lineWidth = lineWidth<br>    context.strokeStyle = &#x27;rgba(55,76,121,0.5)&#x27;<br>    context.stroke()<br><br>    // 绘制进度圆环<br>    const maxAngle = Math.PI * 2 * props.value<br>    if (angle &lt;= maxAngle) &#123;<br>      context.beginPath()<br>      context.arc(x, y, radius, angle, Math.min(angleEnd, maxAngle))<br>      context.lineWidth = lineWidth<br>      context.strokeStyle = props.color<br>      context.stroke()<br>    &#125;<br>  &#125;<br><br>  // 绘制中间文本<br>  context.rotate((90 * Math.PI) / 180)<br>  context.font = &#x27;bold 32px serif&#x27;<br>  context.textAlign = &#x27;center&#x27;<br>  context.textBaseline = &#x27;middle&#x27;<br>  context.fillStyle = props.color<br>  context.fillText(&#x27;92%&#x27;, 0, 0)<br>&#125;<br><br>onMounted(() =&gt; &#123;<br>  draw()<br>&#125;)<br><br>onUpdated(() =&gt; &#123;<br>  draw()<br>&#125;)<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div class=&quot;circle-process-container&quot;&gt;<br>    &lt;canvas :width=&quot;width&quot; :height=&quot;height&quot; ref=&quot;canvasRef&quot;&gt;&lt;/canvas&gt;<br>    &lt;div class=&quot;bottom-bg&quot;&gt;&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br>.circle-process-container &#123;<br>  display: inline-block;<br>&#125;<br>.bottom-bg &#123;<br>  height: 200px;<br>  background: url(&#x27;./bottom-bg.png&#x27;);<br>  background-size: cover;<br>  background-position: center;<br>  background-repeat: no-repeat;<br>  height: 48px;<br>&#125;<br>canvas &#123;<br>  border: solid 4px v-bind(color);<br>  border-radius: 50%;<br>  padding: 8px;<br>  box-shadow: v-bind(color) 0px 0px 26px;<br>  width: v-bind(width);<br>  height: v-bind(height);<br>  margin: 0 auto;<br>  display: block;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Canvas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>viewBox属性 - SVG</title>
    <link href="/notes/svg/viewBox%E5%B1%9E%E6%80%A7%E5%90%AB%E4%B9%89/"/>
    <url>/notes/svg/viewBox%E5%B1%9E%E6%80%A7%E5%90%AB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<p>以下配置将以 100 大小的画图区域填充 200 大小的 svg 区域，就是指示在指定大小的 svg 容器中，展示那部分区域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#x27;200&#x27;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;200&#x27;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 100 100&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SVG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SVG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用点动态绘制一个圆 - WebGL</title>
    <link href="/notes/webgl/test-circle/"/>
    <url>/notes/webgl/test-circle/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebGL测试<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">html</span>,</span><br><span class="language-css">      <span class="hljs-selector-tag">body</span>,</span><br><span class="language-css">      <span class="hljs-selector-id">#canvas</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-id">#canvas</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vertex-shader-2d&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;notjs&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 一个属性变量，将会从缓冲中获取数据</span></span><br><span class="language-javascript">      attribute vec4 a_position;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// gl_Position 是一个顶点着色器主要设置的变量</span></span><br><span class="language-javascript">        gl_Position = a_position;</span><br><span class="language-javascript">        gl_PointSize = <span class="hljs-number">5.0</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fragment-shader-2d&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;notjs&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      precision mediump float;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        gl_FragColor = <span class="hljs-title function_">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);</span><br><span class="language-javascript">      canvas.<span class="hljs-property">width</span> = canvas.<span class="hljs-property">clientWidth</span>;</span><br><span class="language-javascript">      canvas.<span class="hljs-property">height</span> = canvas.<span class="hljs-property">clientHeight</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> vertexShaderSource =</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#vertex-shader-2d&quot;</span>).<span class="hljs-property">text</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> fragmentShaderSource = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&quot;#fragment-shader-2d&quot;</span></span><br><span class="language-javascript">      ).<span class="hljs-property">text</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> vertexShader = <span class="hljs-title function_">createShader</span>(</span><br><span class="language-javascript">        gl,</span><br><span class="language-javascript">        gl.<span class="hljs-property">VERTEX_SHADER</span>,</span><br><span class="language-javascript">        vertexShaderSource</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> fragmentShader = <span class="hljs-title function_">createShader</span>(</span><br><span class="language-javascript">        gl,</span><br><span class="language-javascript">        gl.<span class="hljs-property">FRAGMENT_SHADER</span>,</span><br><span class="language-javascript">        fragmentShaderSource</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">createShader</span>(<span class="hljs-params">gl, type, source</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> shader = gl.<span class="hljs-title function_">createShader</span>(type);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">shaderSource</span>(shader, source);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">compileShader</span>(shader);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> success = gl.<span class="hljs-title function_">getShaderParameter</span>(shader, gl.<span class="hljs-property">COMPILE_STATUS</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (success) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> shader;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gl.<span class="hljs-title function_">getShaderInfoLog</span>(shader));</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">deleteShader</span>(shader);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">createProgram</span>(<span class="hljs-params">gl, vertexShader, fragmentShader</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> program = gl.<span class="hljs-title function_">createProgram</span>();</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">attachShader</span>(program, vertexShader);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">attachShader</span>(program, fragmentShader);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">linkProgram</span>(program);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> success = gl.<span class="hljs-title function_">getProgramParameter</span>(program, gl.<span class="hljs-property">LINK_STATUS</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (success) <span class="hljs-keyword">return</span> program;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gl.<span class="hljs-title function_">getProgramInfoLog</span>(program));</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">deleteProgram</span>(program);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> program = <span class="hljs-title function_">createProgram</span>(gl, vertexShader, fragmentShader);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positionAttributeLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(</span><br><span class="language-javascript">        program,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;a_position&quot;</span></span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> positions = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-number">2</span> * <span class="hljs-number">60</span> &#125;, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() : -<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> c_positions = [];</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> angle = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">60</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> angle360 = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> curAngle = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">while</span> (curAngle &lt; angle360) &#123;</span><br><span class="language-javascript">        curAngle += angle;</span><br><span class="language-javascript">        c_positions.<span class="hljs-title function_">push</span>(<span class="hljs-number">0.5</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(curAngle), <span class="hljs-number">0.5</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(curAngle));</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      positions = c_positions;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> bd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(positions);</span><br><span class="language-javascript">      gl.<span class="hljs-title function_">bufferData</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, bd, gl.<span class="hljs-property">STATIC_DRAW</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 一个是拥有的实际像素个数，一个是显示的大小</span></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">clearColor</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">      gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">useProgram</span>(program);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionAttributeLocation);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> size = <span class="hljs-number">2</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> type = gl.<span class="hljs-property">FLOAT</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> normalize = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> stride = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> offset = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> primitiveType = gl.<span class="hljs-property">POINTS</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">vertexAttribPointer</span>(</span><br><span class="language-javascript">        positionAttributeLocation,</span><br><span class="language-javascript">        size,</span><br><span class="language-javascript">        type,</span><br><span class="language-javascript">        normalize,</span><br><span class="language-javascript">        stride,</span><br><span class="language-javascript">        offset</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> timer = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        count ++;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (count &gt; positions.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);</span><br><span class="language-javascript">      &#125;, <span class="hljs-number">20</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何编写一个WebGL程序 - WebGL</title>
    <link href="/notes/webgl/hello-world/"/>
    <url>/notes/webgl/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="如何编写一个-WebGL-程序"><a href="#如何编写一个-WebGL-程序" class="headerlink" title="如何编写一个 WebGL 程序"></a>如何编写一个 WebGL 程序</h2><ol><li><p>通过 canvas 创建 WebGL 绘图上下文环境</p></li><li><p>着色器创建(顶点着色器和片元着色器)</p><ul><li><p>创建着色器</p></li><li><p>加载着色器代码(GLSL)</p><ul><li>gl_Position: 指定栅格位置</li><li>gl_FragColor: 指定栅格颜色</li></ul></li><li><p>着色器代码编译</p></li></ul></li><li><p>创建着色器程序</p><ul><li>挂载顶点着色器</li><li>挂载片元着色器</li><li>链接程序</li></ul></li><li><p>查找着色器变量位置(用来绑定状态数据)</p></li><li><p>创建缓冲区(用来存储状态数据)</p></li><li><p>绑定缓存区(将指定状态位置绑定到缓冲区)</p></li><li><p>缓冲区存入数据(将 js 数据存入 webgl 缓冲区)</p></li><li><p>指定可视区域</p></li><li><p>指定当前绘制程序</p></li><li><p>启用变量属性(着色器变量)</p></li><li><p>指定着色器变量数据读取方式</p></li><li><p>指定绘制类型及顶点绘制数量</p></li><li><p>绘制</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas设置高度100%出现滚动条问题</title>
    <link href="/notes/html/confused/canvas-style/"/>
    <url>/notes/html/confused/canvas-style/</url>
    
    <content type="html"><![CDATA[<p>查看默认display属性：</p><p>Canvas竟然是行内元素！CSS vertical-align基线对齐、预留空间，好坑啊！</p><p>下面这个说的比较清楚：</p><p><a href="https://www.bilibili.com/video/av943276909/?vd_source=231d7c3163c9cccae49860ce37d317a7">https://www.bilibili.com/video/av943276909/?vd_source=231d7c3163c9cccae49860ce37d317a7</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Canvas</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将NodeJS应用打成一个可执行文件</title>
    <link href="/notes/js-libs/pkg/"/>
    <url>/notes/js-libs/pkg/</url>
    
    <content type="html"><![CDATA[<h3 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pkg [options] &lt;input&gt;<br></code></pre></td></tr></table></figure><h3 id="核心参数说明"><a href="#核心参数说明" class="headerlink" title="核心参数说明"></a>核心参数说明</h3><ul><li>-t: 指定目标类型，多个类型可用逗号分隔添加</li><li>-c: 指定配置文件</li><li>–out-path: 指定输出目录</li><li>-d: 显示 debug 信息，可以看到虚拟目内的文件结构，但因为加载了 node_modules，有点没法看</li></ul><h3 id="目标类型"><a href="#目标类型" class="headerlink" title="目标类型"></a>目标类型</h3><p>target 分为三个部分，使用中划线分隔：[node 版本]-[平台]-[系统架构]</p><p>示例：node12-win-x64</p><ul><li>node 版本: (node8), node10, node12, node14, node16 or latest</li><li>平台: alpine, linux, linuxstatic, win, macos, (freebsd)</li><li>系统架构: x64, arm64, (armv6, armv7)</li></ul><p>Mac 和 Window 系统一般为：</p><ul><li>Mac: node14-macos-arm64</li><li>Window: node14-win-x64</li></ul><p><em>Tips: Mac支持打出Window版本执行文件</em></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在 package.json 中加入如下部分：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;pkg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build/**/*.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;assets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;assets&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;images&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;targets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;node14-macos-arm64&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;node14-win-x64&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outputPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dist&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>scripts: 这个没看懂</li><li>assets: 指定需要额外打包的外部资源</li></ul><h3 id="快照文件系统"><a href="#快照文件系统" class="headerlink" title="快照文件系统"></a>快照文件系统</h3><p>在打包的过程中，pkg会收集项目文件并把它们放到可执行文件内部(叫做快照)，在应用执行过程中可以获取所有快照内文件</p><p>快照结构：&#x2F;snapshot&#x2F;项目名称&#x2F;..资源路径</p>]]></content>
    
    
    <categories>
      
      <category>js-libs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js-libs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二维平移 - WebGL</title>
    <link href="/notes/webgl/2d-transform/"/>
    <url>/notes/webgl/2d-transform/</url>
    
    <content type="html"><![CDATA[<h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><p>通过清除画布，重新传值给绘制函数，重新绘制。缺点是每次绘制都需要更新所有的点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Get A WebGL context</span><br>  <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span><br>  <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);<br>  <span class="hljs-keyword">var</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!gl) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// setup GLSL program</span><br>  <span class="hljs-keyword">var</span> program = webglUtils.<span class="hljs-title function_">createProgramFromScripts</span>(gl, [<span class="hljs-string">&quot;vertex-shader-2d&quot;</span>, <span class="hljs-string">&quot;fragment-shader-2d&quot;</span>]);<br><br>  <span class="hljs-comment">// look up where the vertex data needs to go.</span><br>  <span class="hljs-keyword">var</span> positionLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_position&quot;</span>);<br><br>  <span class="hljs-comment">// lookup uniforms</span><br>  <span class="hljs-keyword">var</span> resolutionLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_resolution&quot;</span>);<br>  <span class="hljs-keyword">var</span> colorLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_color&quot;</span>);<br><br>  <span class="hljs-comment">// Create a buffer to put positions in</span><br>  <span class="hljs-keyword">var</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();<br><br>  <span class="hljs-comment">// Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br><br>  <span class="hljs-keyword">var</span> translation = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> width = <span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">var</span> height = <span class="hljs-number">30</span>;<br>  <span class="hljs-keyword">var</span> color = [<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-number">1</span>];<br><br>  <span class="hljs-title function_">drawScene</span>();<br><br>  <span class="hljs-comment">// Setup a ui.</span><br>  webglLessonsUI.<span class="hljs-title function_">setupSlider</span>(<span class="hljs-string">&quot;#x&quot;</span>, &#123;<span class="hljs-attr">slide</span>: <span class="hljs-title function_">updatePosition</span>(<span class="hljs-number">0</span>), <span class="hljs-attr">max</span>: gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span> &#125;);<br>  webglLessonsUI.<span class="hljs-title function_">setupSlider</span>(<span class="hljs-string">&quot;#y&quot;</span>, &#123;<span class="hljs-attr">slide</span>: <span class="hljs-title function_">updatePosition</span>(<span class="hljs-number">1</span>), <span class="hljs-attr">max</span>: gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>&#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">updatePosition</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">event, ui</span>) &#123;<br>      translation[index] = ui.<span class="hljs-property">value</span>;<br>      <span class="hljs-title function_">drawScene</span>();<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// Draw a the scene.</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawScene</span>(<span class="hljs-params"></span>) &#123;<br>    webglUtils.<span class="hljs-title function_">resizeCanvasToDisplaySize</span>(gl.<span class="hljs-property">canvas</span>);<br><br>    <span class="hljs-comment">// Tell WebGL how to convert from clip space to pixels</span><br>    gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>    <span class="hljs-comment">// Clear the canvas.</span><br>    gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);<br><br>    <span class="hljs-comment">// Tell it to use our program (pair of shaders)</span><br>    gl.<span class="hljs-title function_">useProgram</span>(program);<br><br>    <span class="hljs-comment">// Turn on the attribute</span><br>    gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionLocation);<br><br>    <span class="hljs-comment">// Bind the position buffer.</span><br>    gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br><br>    <span class="hljs-comment">// Setup a rectangle</span><br>    <span class="hljs-title function_">setRectangle</span>(gl, translation[<span class="hljs-number">0</span>], translation[<span class="hljs-number">1</span>], width, height);<br><br>    <span class="hljs-comment">// Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)</span><br>    <span class="hljs-keyword">var</span> size = <span class="hljs-number">2</span>;          <span class="hljs-comment">// 2 components per iteration</span><br>    <span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>;   <span class="hljs-comment">// the data is 32bit floats</span><br>    <span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>; <span class="hljs-comment">// don&#x27;t normalize the data</span><br>    <span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 0 = move forward size * sizeof(type) each iteration to get the next position</span><br>    <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;        <span class="hljs-comment">// start at the beginning of the buffer</span><br>    gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>        positionLocation, size, type, normalize, stride, offset);<br><br>    <span class="hljs-comment">// set the resolution</span><br>    gl.<span class="hljs-title function_">uniform2f</span>(resolutionLocation, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>    <span class="hljs-comment">// set the color</span><br>    gl.<span class="hljs-title function_">uniform4fv</span>(colorLocation, color);<br><br>    <span class="hljs-comment">// Draw the rectangle.</span><br>    <span class="hljs-keyword">var</span> primitiveType = gl.<span class="hljs-property">TRIANGLES</span>;<br>    <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">6</span>;<br>    gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Fill the buffer with the values that define a rectangle.</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setRectangle</span>(<span class="hljs-params">gl, x, y, width, height</span>) &#123;<br>  <span class="hljs-keyword">var</span> x1 = x;<br>  <span class="hljs-keyword">var</span> x2 = x + width;<br>  <span class="hljs-keyword">var</span> y1 = y;<br>  <span class="hljs-keyword">var</span> y2 = y + height;<br>  gl.<span class="hljs-title function_">bufferData</span>(<br>      gl.<span class="hljs-property">ARRAY_BUFFER</span>,<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<br>          x1, y1,<br>          x2, y1,<br>          x1, y2,<br>          x1, y2,<br>          x2, y1,<br>          x2, y2,<br>      ]),<br>      gl.<span class="hljs-property">STATIC_DRAW</span>);<br>&#125;<br><br><span class="hljs-title function_">main</span>();<br><br></code></pre></td></tr></table></figure><h3 id="着色器中平移"><a href="#着色器中平移" class="headerlink" title="着色器中平移"></a>着色器中平移</h3><p>通过状态控制平移量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Get A WebGL context</span><br>  <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span><br>  <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);<br>  <span class="hljs-keyword">var</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!gl) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// setup GLSL program</span><br>  <span class="hljs-keyword">var</span> program = webglUtils.<span class="hljs-title function_">createProgramFromScripts</span>(gl, [<span class="hljs-string">&quot;vertex-shader-2d&quot;</span>, <span class="hljs-string">&quot;fragment-shader-2d&quot;</span>]);<br>  gl.<span class="hljs-title function_">useProgram</span>(program);<br><br>  <span class="hljs-comment">// look up where the vertex data needs to go.</span><br>  <span class="hljs-keyword">var</span> positionLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_position&quot;</span>);<br><br>  <span class="hljs-comment">// lookup uniforms</span><br>  <span class="hljs-keyword">var</span> resolutionLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_resolution&quot;</span>);<br>  <span class="hljs-keyword">var</span> colorLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_color&quot;</span>);<br>  <span class="hljs-keyword">var</span> translationLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_translation&quot;</span>);<br><br>  <span class="hljs-comment">// Create a buffer to put positions in</span><br>  <span class="hljs-keyword">var</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();<br>  <span class="hljs-comment">// Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br>  <span class="hljs-comment">// Put geometry data into buffer</span><br>  <span class="hljs-title function_">setGeometry</span>(gl);<br><br>  <span class="hljs-keyword">var</span> translation = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> color = [<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-number">1</span>];<br><br>  <span class="hljs-title function_">drawScene</span>();<br><br>  <span class="hljs-comment">// Setup a ui.</span><br>  webglLessonsUI.<span class="hljs-title function_">setupSlider</span>(<span class="hljs-string">&quot;#x&quot;</span>, &#123;<span class="hljs-attr">slide</span>: <span class="hljs-title function_">updatePosition</span>(<span class="hljs-number">0</span>), <span class="hljs-attr">max</span>: gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span> &#125;);<br>  webglLessonsUI.<span class="hljs-title function_">setupSlider</span>(<span class="hljs-string">&quot;#y&quot;</span>, &#123;<span class="hljs-attr">slide</span>: <span class="hljs-title function_">updatePosition</span>(<span class="hljs-number">1</span>), <span class="hljs-attr">max</span>: gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>&#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">updatePosition</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">event, ui</span>) &#123;<br>      translation[index] = ui.<span class="hljs-property">value</span>;<br>      <span class="hljs-title function_">drawScene</span>();<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// Draw the scene.</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawScene</span>(<span class="hljs-params"></span>) &#123;<br>    webglUtils.<span class="hljs-title function_">resizeCanvasToDisplaySize</span>(gl.<span class="hljs-property">canvas</span>);<br><br>    <span class="hljs-comment">// Tell WebGL how to convert from clip space to pixels</span><br>    gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>    <span class="hljs-comment">// Clear the canvas.</span><br>    gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);<br><br>    <span class="hljs-comment">// Tell it to use our program (pair of shaders)</span><br>    gl.<span class="hljs-title function_">useProgram</span>(program);<br><br>    <span class="hljs-comment">// Turn on the attribute</span><br>    gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionLocation);<br><br>    <span class="hljs-comment">// Bind the position buffer.</span><br>    gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br><br>    <span class="hljs-comment">// Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)</span><br>    <span class="hljs-keyword">var</span> size = <span class="hljs-number">2</span>;          <span class="hljs-comment">// 2 components per iteration</span><br>    <span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>;   <span class="hljs-comment">// the data is 32bit floats</span><br>    <span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>; <span class="hljs-comment">// don&#x27;t normalize the data</span><br>    <span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 0 = move forward size * sizeof(type) each iteration to get the next position</span><br>    <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;        <span class="hljs-comment">// start at the beginning of the buffer</span><br>    gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>        positionLocation, size, type, normalize, stride, offset);<br><br>    <span class="hljs-comment">// set the resolution</span><br>    gl.<span class="hljs-title function_">uniform2f</span>(resolutionLocation, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>    <span class="hljs-comment">// set the color</span><br>    gl.<span class="hljs-title function_">uniform4fv</span>(colorLocation, color);<br><br>    <span class="hljs-comment">// Set the translation.</span><br>    gl.<span class="hljs-title function_">uniform2fv</span>(translationLocation, translation);<br><br>    <span class="hljs-comment">// Draw the geometry.</span><br>    <span class="hljs-keyword">var</span> primitiveType = gl.<span class="hljs-property">TRIANGLES</span>;<br>    <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">18</span>;  <span class="hljs-comment">// 6 triangles in the &#x27;F&#x27;, 3 points per triangle</span><br>    gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Fill the buffer with the values that define a letter &#x27;F&#x27;.</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setGeometry</span>(<span class="hljs-params">gl</span>) &#123;<br>  gl.<span class="hljs-title function_">bufferData</span>(<br>      gl.<span class="hljs-property">ARRAY_BUFFER</span>,<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<br>          <span class="hljs-comment">// left column</span><br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">150</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">150</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">150</span>,<br><br>          <span class="hljs-comment">// top rung</span><br>          <span class="hljs-number">30</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">100</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">30</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">30</span>,<br>          <span class="hljs-number">100</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">100</span>, <span class="hljs-number">30</span>,<br><br>          <span class="hljs-comment">// middle rung</span><br>          <span class="hljs-number">30</span>, <span class="hljs-number">60</span>,<br>          <span class="hljs-number">67</span>, <span class="hljs-number">60</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">90</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">90</span>,<br>          <span class="hljs-number">67</span>, <span class="hljs-number">60</span>,<br>          <span class="hljs-number">67</span>, <span class="hljs-number">90</span>,<br>      ]),<br>      gl.<span class="hljs-property">STATIC_DRAW</span>);<br>&#125;<br><br><span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像处理 - WebGL</title>
    <link href="/notes/webgl/image-processing/"/>
    <url>/notes/webgl/image-processing/</url>
    
    <content type="html"><![CDATA[<p>绘制图片需要使用纹理，WebGL 渲染时需要裁剪空间，渲染纹理时需要纹理坐标，纹理坐标的范围始终是 0.0~1.0</p><ol><li>创建程序</li><li>查找属性位置</li><li>创建 Buffer(接收外部数据)</li><li>关联 Buffer 与内部状态</li><li>传递数据</li><li>设置可视区域尺寸</li><li>指定使用程序</li><li>开启顶点属性</li><li>指定获取外部数据方式</li><li>设置分辨率</li><li>绘制</li><li>像素处理(颜色反转、计算、卷积内核)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>  image.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;/webgl/resources/leaves.jpg&quot;</span>; <span class="hljs-comment">// MUST BE SAME DOMAIN!!!</span><br>  image.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">render</span>(image);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">image</span>) &#123;<br>  <span class="hljs-comment">// Get A WebGL context</span><br>  <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span><br>  <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);<br>  <span class="hljs-keyword">var</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!gl) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// setup GLSL program</span><br>  <span class="hljs-keyword">var</span> program = webglUtils.<span class="hljs-title function_">createProgramFromScripts</span>(gl, [<br>    <span class="hljs-string">&quot;vertex-shader-2d&quot;</span>,<br>    <span class="hljs-string">&quot;fragment-shader-2d&quot;</span>,<br>  ]);<br><br>  <span class="hljs-comment">// look up where the vertex data needs to go.</span><br>  <span class="hljs-keyword">var</span> positionLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_position&quot;</span>);<br>  <span class="hljs-keyword">var</span> texcoordLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_texCoord&quot;</span>);<br><br>  <span class="hljs-comment">// Create a buffer to put three 2d clip space points in</span><br>  <span class="hljs-keyword">var</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();<br><br>  <span class="hljs-comment">// Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br>  <span class="hljs-comment">// Set a rectangle the same size as the image.</span><br>  <span class="hljs-title function_">setRectangle</span>(gl, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, image.<span class="hljs-property">width</span>, image.<span class="hljs-property">height</span>);<br><br>  <span class="hljs-comment">// provide texture coordinates for the rectangle.</span><br>  <span class="hljs-keyword">var</span> texcoordBuffer = gl.<span class="hljs-title function_">createBuffer</span>();<br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, texcoordBuffer);<br>  gl.<span class="hljs-title function_">bufferData</span>(<br>    gl.<span class="hljs-property">ARRAY_BUFFER</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<br>      <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>,<br>    ]),<br>    gl.<span class="hljs-property">STATIC_DRAW</span><br>  );<br><br>  <span class="hljs-comment">// Create a texture.</span><br>  <span class="hljs-keyword">var</span> texture = gl.<span class="hljs-title function_">createTexture</span>();<br>  gl.<span class="hljs-title function_">bindTexture</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, texture);<br><br>  <span class="hljs-comment">// Set the parameters so we can render any size image.</span><br>  gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_WRAP_S</span>, gl.<span class="hljs-property">CLAMP_TO_EDGE</span>);<br>  gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_WRAP_T</span>, gl.<span class="hljs-property">CLAMP_TO_EDGE</span>);<br>  gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_MIN_FILTER</span>, gl.<span class="hljs-property">NEAREST</span>);<br>  gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_MAG_FILTER</span>, gl.<span class="hljs-property">NEAREST</span>);<br><br>  <span class="hljs-comment">// Upload the image into the texture.</span><br>  gl.<span class="hljs-title function_">texImage2D</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">RGBA</span>, gl.<span class="hljs-property">RGBA</span>, gl.<span class="hljs-property">UNSIGNED_BYTE</span>, image);<br><br>  <span class="hljs-comment">// lookup uniforms</span><br>  <span class="hljs-keyword">var</span> resolutionLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_resolution&quot;</span>);<br><br>  webglUtils.<span class="hljs-title function_">resizeCanvasToDisplaySize</span>(gl.<span class="hljs-property">canvas</span>);<br><br>  <span class="hljs-comment">// Tell WebGL how to convert from clip space to pixels</span><br>  gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>  <span class="hljs-comment">// Clear the canvas</span><br>  gl.<span class="hljs-title function_">clearColor</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);<br><br>  <span class="hljs-comment">// Tell it to use our program (pair of shaders)</span><br>  gl.<span class="hljs-title function_">useProgram</span>(program);<br><br>  <span class="hljs-comment">// Turn on the position attribute</span><br>  gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionLocation);<br><br>  <span class="hljs-comment">// Bind the position buffer.</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br><br>  <span class="hljs-comment">// Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)</span><br>  <span class="hljs-keyword">var</span> size = <span class="hljs-number">2</span>; <span class="hljs-comment">// 2 components per iteration</span><br>  <span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>; <span class="hljs-comment">// the data is 32bit floats</span><br>  <span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>; <span class="hljs-comment">// don&#x27;t normalize the data</span><br>  <span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>; <span class="hljs-comment">// 0 = move forward size * sizeof(type) each iteration to get the next position</span><br>  <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>; <span class="hljs-comment">// start at the beginning of the buffer</span><br>  gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>    positionLocation,<br>    size,<br>    type,<br>    normalize,<br>    stride,<br>    offset<br>  );<br><br>  <span class="hljs-comment">// Turn on the texcoord attribute</span><br>  gl.<span class="hljs-title function_">enableVertexAttribArray</span>(texcoordLocation);<br><br>  <span class="hljs-comment">// bind the texcoord buffer.</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, texcoordBuffer);<br><br>  <span class="hljs-comment">// Tell the texcoord attribute how to get data out of texcoordBuffer (ARRAY_BUFFER)</span><br>  <span class="hljs-keyword">var</span> size = <span class="hljs-number">2</span>; <span class="hljs-comment">// 2 components per iteration</span><br>  <span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>; <span class="hljs-comment">// the data is 32bit floats</span><br>  <span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>; <span class="hljs-comment">// don&#x27;t normalize the data</span><br>  <span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>; <span class="hljs-comment">// 0 = move forward size * sizeof(type) each iteration to get the next position</span><br>  <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>; <span class="hljs-comment">// start at the beginning of the buffer</span><br>  gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>    texcoordLocation,<br>    size,<br>    type,<br>    normalize,<br>    stride,<br>    offset<br>  );<br><br>  <span class="hljs-comment">// set the resolution</span><br>  gl.<span class="hljs-title function_">uniform2f</span>(resolutionLocation, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>  <span class="hljs-comment">// Draw the rectangle.</span><br>  <span class="hljs-keyword">var</span> primitiveType = gl.<span class="hljs-property">TRIANGLES</span>;<br>  <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> count = <span class="hljs-number">6</span>;<br>  gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setRectangle</span>(<span class="hljs-params">gl, x, y, width, height</span>) &#123;<br>  <span class="hljs-keyword">var</span> x1 = x;<br>  <span class="hljs-keyword">var</span> x2 = x + width;<br>  <span class="hljs-keyword">var</span> y1 = y;<br>  <span class="hljs-keyword">var</span> y2 = y + height;<br><br>  <span class="hljs-comment">// 其实是画了两个三角形</span><br>  gl.<span class="hljs-title function_">bufferData</span>(<br>    gl.<span class="hljs-property">ARRAY_BUFFER</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]),<br>    gl.<span class="hljs-property">STATIC_DRAW</span><br>  );<br>&#125;<br><br><span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快捷键 - Emacs</title>
    <link href="/notes/emacs/tutoial/"/>
    <url>/notes/emacs/tutoial/</url>
    
    <content type="html"><![CDATA[<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl-x Ctrl-c</td><td>退出emacs</td></tr><tr><td>Ctrl-z</td><td>最小化emacs</td></tr></tbody></table><h3 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl + v</td><td>向下滚动一屏</td></tr><tr><td>Meta + v</td><td>向上移动一屏</td></tr><tr><td>Ctrl + l</td><td>重绘屏幕，并将光标所在行移动至中央(连续按可以在上中下反复横跳)</td></tr></tbody></table><h3 id="基本的光标控制"><a href="#基本的光标控制" class="headerlink" title="基本的光标控制"></a>基本的光标控制</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl + p</td><td>上一行</td></tr><tr><td>Ctrl + n</td><td>下一行</td></tr><tr><td>Ctrl + b</td><td>向左移</td></tr><tr><td>Ctrl + f</td><td>向右移</td></tr><tr><td>Meta + b</td><td>向左移一个词</td></tr><tr><td>Meta + f</td><td>向右移一个词</td></tr><tr><td>Ctrl + a</td><td>移动到行首</td></tr><tr><td>Ctrl + e</td><td>移动到行尾</td></tr><tr><td>Meta + a</td><td>移动到句首</td></tr><tr><td>Meta + e</td><td>移动到句尾</td></tr></tbody></table><blockquote><p>通过 Meta 系列组合键用来操作由语言定义的单位(词、句子、单位)，而 Ctrl 系列组合键用来操作与语言无关的基本单位(字符、行)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>emacs</tag>
      
      <tag>编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>着色器和GLSL - WebGL</title>
    <link href="/notes/webgl/shader-glsl/"/>
    <url>/notes/webgl/shader-glsl/</url>
    
    <content type="html"><![CDATA[<h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><p>一个顶点着色器的工作是生成裁剪空间坐标值，通常是以下的形式</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_Position</span> = doMathToMakeClipspaceCoordinates<br>&#125;<br></code></pre></td></tr></table></figure><p>每个顶点调用一次（顶点）着色器，每次调用都需要设置一个特殊的全局变量 gl_Position， 该变量的值就是裁减空间坐标值</p><p>顶点着色器需要的数据，可以通过以下三种方式获得:</p><ol><li>Attributes 属性 (从缓冲中获取的数据)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 创建缓冲</span><br><span class="hljs-keyword">var</span> buf = gl.<span class="hljs-title function_">createBuffer</span>();<br><br><span class="hljs-comment">// 将数据存入缓冲</span><br>gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, buf);<br>gl.<span class="hljs-title function_">bufferData</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, someData, gl.<span class="hljs-property">STATIC_DRAW</span>);<br><br><span class="hljs-comment">// 初始化的时候，在你制作的（着色）程序中找到属性所在地址</span><br><span class="hljs-keyword">var</span> positionLoc = gl.<span class="hljs-title function_">getAttribLocation</span>(someShaderProgram, <span class="hljs-string">&quot;a_position&quot;</span>);<br><br><span class="hljs-comment">// 开启从缓冲中获取数据</span><br>gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionLoc);<br><br><span class="hljs-keyword">var</span> numComponents = <span class="hljs-number">3</span>;  <span class="hljs-comment">// (x, y, z)</span><br><span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>;    <span class="hljs-comment">// 32位浮点数据</span><br><span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 不标准化</span><br><span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;         <span class="hljs-comment">// 从缓冲起始位置开始获取</span><br><span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>;         <span class="hljs-comment">// 到下一个数据跳多少位内存</span><br>                        <span class="hljs-comment">// 0 = 使用当前的单位个数和单位长度 （ 3 * Float32Array.BYTES_PER_ELEMENT ）</span><br><br><span class="hljs-comment">// 告诉WebGL怎么从缓冲中获取数据传递给属性</span><br>gl.<span class="hljs-title function_">vertexAttribPointer</span>(positionLoc, numComponents, type, <span class="hljs-literal">false</span>, stride, offset);<br><br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 属性可以用 float, vec2, vec3, vec4, mat2, mat3 和 mat4 数据类型</span><br><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec4</span> a_position;<br><br><span class="hljs-comment">// 不做任何运算直接将数据传递给gl_Position</span><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_Position</span> = a_position;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Uniforms 全局变量 (在一次绘制中对所有顶点保持一致值)</li></ol><p>全局变量在一次绘制过程中传递给着色器的值都一样</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec4</span> a_position;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec4</span> u_offset;<br><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_Position</span> = a_position + u_offset;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 在初始化时找到全局变量的地址</span><br><span class="hljs-keyword">var</span> offsetLoc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_offset&quot;</span>);<br><br><span class="hljs-comment">// 在绘制前设置全局变量</span><br>gl.<span class="hljs-title function_">uniform4fv</span>(offsetLoc, [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]);  <span class="hljs-comment">// 向右偏移一半屏幕宽度</span><br></code></pre></td></tr></table></figure><p>要注意的是全局变量属于单个着色程序，如果多个着色程序有同名全局变量，需要找到每个全局变量并设置自己的值。 我们调用 gl.uniform???的时候只是设置了当前程序的全局变量，当前程序是传递给 gl.useProgram 的最后一个程序</p><p>全局变量有很多类型，对应的类型有对应的设置方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">gl.<span class="hljs-property">uniform1f</span> (floatUniformLoc, v);                 <span class="hljs-comment">// float</span><br>gl.<span class="hljs-title function_">uniform1fv</span>(floatUniformLoc, [v]);               <span class="hljs-comment">// float 或 float array</span><br>gl.<span class="hljs-property">uniform2f</span> (vec2UniformLoc,  v0, v1);            <span class="hljs-comment">// vec2</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(vec2UniformLoc,  [v0, v1]);          <span class="hljs-comment">// vec2 或 vec2 array</span><br>gl.<span class="hljs-property">uniform3f</span> (vec3UniformLoc,  v0, v1, v2);        <span class="hljs-comment">// vec3</span><br>gl.<span class="hljs-title function_">uniform3fv</span>(vec3UniformLoc,  [v0, v1, v2]);      <span class="hljs-comment">// vec3 或 vec3 array</span><br>gl.<span class="hljs-property">uniform4f</span> (vec4UniformLoc,  v0, v1, v2, v4);    <span class="hljs-comment">// vec4</span><br>gl.<span class="hljs-title function_">uniform4fv</span>(vec4UniformLoc,  [v0, v1, v2, v4]);  <span class="hljs-comment">// vec4 或 vec4 array</span><br><br>gl.<span class="hljs-title function_">uniformMatrix2fv</span>(mat2UniformLoc, <span class="hljs-literal">false</span>, [  4x element array ])  <span class="hljs-comment">// mat2 或 mat2 array</span><br>gl.<span class="hljs-title function_">uniformMatrix3fv</span>(mat3UniformLoc, <span class="hljs-literal">false</span>, [  9x element array ])  <span class="hljs-comment">// mat3 或 mat3 array</span><br>gl.<span class="hljs-title function_">uniformMatrix4fv</span>(mat4UniformLoc, <span class="hljs-literal">false</span>, [ 16x element array ])  <span class="hljs-comment">// mat4 或 mat4 array</span><br><br>gl.<span class="hljs-property">uniform1i</span> (intUniformLoc,   v);                 <span class="hljs-comment">// int</span><br>gl.<span class="hljs-title function_">uniform1iv</span>(intUniformLoc, [v]);                 <span class="hljs-comment">// int 或 int array</span><br>gl.<span class="hljs-property">uniform2i</span> (ivec2UniformLoc, v0, v1);            <span class="hljs-comment">// ivec2</span><br>gl.<span class="hljs-title function_">uniform2iv</span>(ivec2UniformLoc, [v0, v1]);          <span class="hljs-comment">// ivec2 或 ivec2 array</span><br>gl.<span class="hljs-property">uniform3i</span> (ivec3UniformLoc, v0, v1, v2);        <span class="hljs-comment">// ivec3</span><br>gl.<span class="hljs-title function_">uniform3iv</span>(ivec3UniformLoc, [v0, v1, v2]);      <span class="hljs-comment">// ivec3 or ivec3 array</span><br>gl.<span class="hljs-property">uniform4i</span> (ivec4UniformLoc, v0, v1, v2, v4);    <span class="hljs-comment">// ivec4</span><br>gl.<span class="hljs-title function_">uniform4iv</span>(ivec4UniformLoc, [v0, v1, v2, v4]);  <span class="hljs-comment">// ivec4 或 ivec4 array</span><br><br>gl.<span class="hljs-property">uniform1i</span> (sampler2DUniformLoc,   v);           <span class="hljs-comment">// sampler2D (textures)</span><br>gl.<span class="hljs-title function_">uniform1iv</span>(sampler2DUniformLoc, [v]);           <span class="hljs-comment">// sampler2D 或 sampler2D array</span><br><br>gl.<span class="hljs-property">uniform1i</span> (samplerCubeUniformLoc,   v);         <span class="hljs-comment">// samplerCube (textures)</span><br>gl.<span class="hljs-title function_">uniform1iv</span>(samplerCubeUniformLoc, [v]);         <span class="hljs-comment">// samplerCube 或 samplerCube array</span><br></code></pre></td></tr></table></figure><p>还有一些类型 bool, bvec2, bvec3, and bvec4。它们可用 gl.uniform?f?或 gl.uniform?i?</p><p>一个数组可以一次设置所有的全局变量:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 着色器里</span><br>uniform vec2 u_someVec2[<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// JavaScript 初始化时</span><br><span class="hljs-keyword">var</span> someVec2Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2&quot;</span>);<br><br><span class="hljs-comment">// 渲染的时候</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Loc, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);  <span class="hljs-comment">// 设置数组 u_someVec2</span><br></code></pre></td></tr></table></figure><p>如果你想单独设置数组中的某个值，就要单独找到该值的地址:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// JavaScript 初始化时</span><br><span class="hljs-keyword">var</span> someVec2Element0Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2[0]&quot;</span>);<br><span class="hljs-keyword">var</span> someVec2Element1Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2[1]&quot;</span>);<br><span class="hljs-keyword">var</span> someVec2Element2Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2[2]&quot;</span>);<br><br><span class="hljs-comment">// 渲染的时候</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Element0Loc, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);  <span class="hljs-comment">// set element 0</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Element1Loc, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);  <span class="hljs-comment">// set element 1</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Element2Loc, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);  <span class="hljs-comment">// set element 2</span><br></code></pre></td></tr></table></figure><p>同样的，如果你创建了一个结构体:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs GLSL">struct SomeStruct &#123;<br>  <span class="hljs-type">bool</span> active;<br>  <span class="hljs-type">vec2</span> someVec2;<br>&#125;;<br><span class="hljs-keyword">uniform</span> SomeStruct u_someThing;<br></code></pre></td></tr></table></figure><p>你需要找到每个元素的地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> someThingActiveLoc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someThing.active&quot;</span>);<br><span class="hljs-keyword">var</span> someThingSomeVec2Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someThing.someVec2&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>⌛️ Textures 纹理 (从像素或纹理元素中获取的数据)</li></ol><h3 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a>片段着色器</h3><p>一个片段着色器的工作是为当前光栅化的像素提供颜色值，通常是以下的形式:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_FragColor</span> = doMathToMakeAColor;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个像素都将调用一次片段着色器，每次调用需要从你设置的特殊全局变量 gl_FragColor 中获取颜色信息</p><p>片段着色器所需的数据，可以通过以下三种方式获取:</p><ol><li>Uniforms 全局变量 (values that stay the same for every pixel of a single draw call)</li></ol><p>同上(顶点着色器)</p><ol start="2"><li>Textures 纹理 (data from pixels&#x2F;texels)</li></ol><p>在着色器中获取纹理信息，可以先创建一个 sampler2D 类型全局变量，然后用 GLSL 方法 texture2D 从纹理中提取信息:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> u_texture;<br><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-type">vec2</span> texcoord = <span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>);  <span class="hljs-comment">// 获取纹理中心的值</span><br>   <span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-built_in">texture2D</span>(u_texture, texcoord);<br>&#125;<br></code></pre></td></tr></table></figure><p>从纹理中获取的数据取决于很多设置。 至少要创建并给纹理填充数据，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> tex = gl.<span class="hljs-title function_">createTexture</span>();<br>gl.<span class="hljs-title function_">bindTexture</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, tex);<br><span class="hljs-keyword">var</span> level = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> width = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> height = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<br>   <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>,   <span class="hljs-comment">// 一个红色的像素</span><br>   <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>,   <span class="hljs-comment">// 一个绿色的像素</span><br>]);<br>gl.<span class="hljs-title function_">texImage2D</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, level, gl.<span class="hljs-property">RGBA</span>, width, height, <span class="hljs-number">0</span>, gl.<span class="hljs-property">RGBA</span>, gl.<span class="hljs-property">UNSIGNED_BYTE</span>, data);<br>gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_MIN_FILTER</span>, gl.<span class="hljs-property">LINEAR</span>);<br><br><span class="hljs-comment">// 初始化时找到全局变量的地址</span><br><span class="hljs-keyword">var</span> someSamplerLoc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_texture&quot;</span>);<br><br><span class="hljs-comment">// 在渲染的时候WebGL要求纹理必须绑定到一个纹理单元上</span><br><span class="hljs-keyword">var</span> unit = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 挑选一个纹理单元</span><br>gl.<span class="hljs-title function_">activeTexture</span>(gl.<span class="hljs-property">TEXTURE0</span> + unit);<br>gl.<span class="hljs-title function_">bindTexture</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, tex);<br><br><span class="hljs-comment">// 告诉着色器你要使用的纹理在那个纹理单元</span><br>gl.<span class="hljs-title function_">uniform1i</span>(someSamplerLoc, unit);<br><br></code></pre></td></tr></table></figure><ol start="3"><li>Varyings 可变量 (data passed from the vertex shader and interpolated)</li></ol><p>可变量是一种顶点着色器给片段着色器传值的方式</p><p>为了使用可变量，要在两个着色器中定义同名的可变量。 给顶点着色器中可变量设置的值，会作为参考值进行内插，在绘制像素时传给片段着色器的可变量</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// 顶点着色器</span><br><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec4</span> a_position;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec4</span> u_offset;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-type">vec4</span> v_positionWithOffset;<br><br><span class="hljs-type">void</span> main() &#123;<br>  <span class="hljs-built_in">gl_Position</span> = a_position + u_offset;<br>  v_positionWithOffset = a_position + u_offset;<br>&#125;<br><br><br><span class="hljs-comment">// 片段着色器</span><br><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-type">vec4</span> v_positionWithOffset;<br><br><span class="hljs-type">void</span> main() &#123;<br>  <span class="hljs-comment">// 从裁剪空间 (-1 &lt;-&gt; +1) 转换到颜色空间 (0 -&gt; 1).</span><br>  <span class="hljs-type">vec4</span> color = v_positionWithOffset * <span class="hljs-number">0.5</span> + <span class="hljs-number">0.5</span>;<br>  <span class="hljs-built_in">gl_FragColor</span> = color;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="GLSL"><a href="#GLSL" class="headerlink" title="GLSL"></a>GLSL</h3><p>GLSL 全称是 Graphics Library Shader Language （图形库着色器语言），是着色器使用的语言。 它有一些不同于 JavaScript 的特性，主要目的是为栅格化图形提供常用的计算功能。 所以它内建的数据类型例如 vec2, vec3 和 vec4 分别代表两个值，三个值和四个值， 类似的还有 mat2, mat3 和 mat4 分别代表 2x2, 3x3 和 4x4 矩阵。 你可以做一些运算例如常量和矢量的乘法</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">vec4</span> a = <span class="hljs-type">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-type">vec4</span> b = a * <span class="hljs-number">2.0</span>;<br><span class="hljs-comment">// b 现在是 vec4(2, 4, 6, 8);</span><br><br><br><span class="hljs-comment">// 做矩阵乘法以及矢量和矩阵的乘法</span><br><span class="hljs-type">mat4</span> a = ???<br><span class="hljs-type">mat4</span> b = ???<br><span class="hljs-type">mat4</span> c = a * b;<br><br><span class="hljs-type">vec4</span> v = ???<br><span class="hljs-type">vec4</span> y = c * v;<br><br></code></pre></td></tr></table></figure><p>他还为矢量数据提供多种分量选择器，例如 vec4:</p><ul><li>v.x 和 v.s 以及 v.r ， v[0] 表达的是同一个分量。</li><li>v.y 和 v.t 以及 v.g ， v[1] 表达的是同一个分量。</li><li>v.z 和 v.p 以及 v.b ， v[2] 表达的是同一个分量。</li><li>v.w 和 v.q 以及 v.a ， v[3] 表达的是同一个分量。</li></ul><p>它还支持矢量调制，意味者你可以交换或重复分量:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs GLSL">v.yyyy<br>同<br><span class="hljs-type">vec4</span>(v.y, v.y, v.y, v.y)<br><br>v.bgra<br>同<br><span class="hljs-type">vec4</span>(v.b, v.g, v.r, v.a)<br><br><span class="hljs-type">vec4</span>(v.rgb, <span class="hljs-number">1</span>)<br>同<br><span class="hljs-type">vec4</span>(v.r, v.g, v.b, <span class="hljs-number">1</span>)<br><br><span class="hljs-type">vec4</span>(<span class="hljs-number">1</span>)<br>同<br><span class="hljs-type">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p>值得注意的是 GLSL 是一个强类型的语言:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">float</span> f = <span class="hljs-number">1</span>;  // 错误，<span class="hljs-number">1</span>是<span class="hljs-built_in">int</span>类型，不能将<span class="hljs-built_in">int</span>型赋值给<span class="hljs-built_in">float</span><br><span class="hljs-built_in">float</span> f = <span class="hljs-number">1.0</span>;      // 使用<span class="hljs-built_in">float</span><br><span class="hljs-built_in">float</span> f = <span class="hljs-built_in">float</span>(<span class="hljs-number">1</span>)  // 转换<span class="hljs-keyword">integer</span>为<span class="hljs-built_in">float</span><br><br></code></pre></td></tr></table></figure><p>上例中 vec4(v.rgb, 1) 不会因为 1 报错，因为 vec4 内部进行了转换类似 float(1)</p><p>GLSL 有一系列内置方法，其中大多数运算支持多种数据类型，并且一次可以运算多个分量，例如:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// T可以是 float, vec2, vec3 或 vec4 。如果你传的是 vec4 返回的也是 vec4, 返回结果对应每个分量的正弦值。换句话说如果 v 是 vec4 类型</span><br>T <span class="hljs-built_in">sin</span>(T angle)<br><br><span class="hljs-type">vec4</span> s = <span class="hljs-built_in">sin</span>(v)<br>同<br><span class="hljs-type">vec4</span> s = <span class="hljs-type">vec4</span>(<span class="hljs-built_in">sin</span>(v.x), <span class="hljs-built_in">sin</span>(v.y), <span class="hljs-built_in">sin</span>(v.z), <span class="hljs-built_in">sin</span>(v.w))<br><br><span class="hljs-type">vec4</span> m = <span class="hljs-built_in">mix</span>(v1, v2, f);<br>同<br><span class="hljs-type">vec4</span> m = <span class="hljs-type">vec4</span>(<br>  <span class="hljs-built_in">mix</span>(v1.x, v2.x, f),<br>  <span class="hljs-built_in">mix</span>(v1.y, v2.y, f),<br>  <span class="hljs-built_in">mix</span>(v1.z, v2.z, f),<br>  <span class="hljs-built_in">mix</span>(v1.w, v2.w, f));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作原理 - WebGL</title>
    <link href="/notes/webgl/principle/"/>
    <url>/notes/webgl/principle/</url>
    
    <content type="html"><![CDATA[<p>WebGL 在 GPU 上的工作基本上分为两部分，第一部分是将顶点（或数据流）转换到裁剪空间坐标， 第二部分是基于第一部分的结果绘制像素点</p><p>传值可以使用 varyings(可变量)</p><h3 id="关于-buffer-和-attribute"><a href="#关于-buffer-和-attribute" class="headerlink" title="关于 buffer 和 attribute"></a>关于 buffer 和 attribute</h3><p>缓冲操作是在 GPU 上获取顶点和其他顶点数据的一种方式。 gl.createBuffer 创建一个缓冲；gl.bindBuffer 是设置缓冲为当前使用缓冲； gl.bufferData 将数据拷贝到缓冲，这个操作一般在初始化完成。</p><p>一旦数据存到缓冲中，还需要告诉 WebGL 怎么从缓冲中提取数据传给顶点着色器的属性。</p><p>要做这些，首先需要获取 WebGL 给属性分配的地址，如下方代码所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 询问顶点数据应该放在哪里</span><br><span class="hljs-keyword">var</span> positionLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_position&quot;</span>);<br><span class="hljs-keyword">var</span> colorLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_color&quot;</span>);<br></code></pre></td></tr></table></figure><p>一旦知道了属性的地址，在绘制前还需要发出三个命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 告诉WebGL我们想从缓冲中提供数据</span><br>gl.<span class="hljs-title function_">enableVertexAttribArray</span>(location);<br><br><span class="hljs-comment">// 将缓冲绑定到 ARRAY_BUFFER 绑定点，它是WebGL内部的一个全局变量</span><br>gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, someBuffer);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 这个命令告诉WebGL从 ARRAY_BUFFER 绑定点当前绑定的缓冲获取数据。 每个顶点有几个单</span><br><span class="hljs-comment">  * 位的数据(1 - 4)，单位数据类型是什么(BYTE, FLOAT, INT, UNSIGNED_SHORT, 等等...)，</span><br><span class="hljs-comment">  * stride 是从一个数据到下一个数据要跳过多少位，最后是数据在缓冲的什么位置。</span><br><span class="hljs-comment">  * 如果每个类型的数据都用一个缓冲存储，stride 和 offset 都是 0 。 对 stride 来说 0 表</span><br><span class="hljs-comment">  * 示 “用符合单位类型和单位个数的大小”。 对 offset 来说 0 表示从缓冲起始位置开始读取</span><br><span class="hljs-comment">  * 它们使用 0 以外的值时会复杂得多，虽然这样会取得一些性能能上的优势，</span><br><span class="hljs-comment">  * 但是一般情况下并不值得，除非你想充分压榨WebGL的性能。</span><br><span class="hljs-comment">  */</span><br><br>gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>    location,<br>    numComponents,<br>    typeOfData,<br>    normalizeFlag,<br>    strideToNextPieceOfData,<br>    offsetIntoBuffer);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础 - WebGL</title>
    <link href="/notes/webgl/basic/"/>
    <url>/notes/webgl/basic/</url>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>WebGL 在电脑的 GPU 中运行。因此你需要使用能够在 GPU 上运行的代码。 这样的代码需要提供成对的方法。每对方法中一个叫顶点着色器， 另一个叫片段着色器，并且使用一种和 C 或 C++类似的强类型的语言 GLSL。 (GL 着色语言)。 每一对组合起来称作一个 program（着色程序）。</p><p>顶点着色器的作用是计算顶点的位置。根据计算出的一系列顶点位置，WebGL 可以对点， 线和三角形在内的一些图元进行光栅化处理。当对这些图元进行光栅化处理时需要使用片段着色器方法。 片段着色器的作用是计算出当前绘制图元中每个像素的颜色值。</p><p>几乎整个 WebGL API 都是关于如何设置这些成对方法的状态值以及运行它们。 对于想要绘制的每一个对象，都需要先设置一系列状态值，然后通过调用 gl.drawArrays 或 gl.drawElements 运行一个着色方法对，使得你的着色器对能够在 GPU 上运行。</p><p>这些方法对所需的任何数据都需要发送到 GPU，这里有着色器获取数据的 4 种方法：</p><ol><li>属性(Attributes)和缓冲</li></ol><p>缓冲是发送到 GPU 的一些二进制数据序列，通常情况下缓冲数据包括位置，法向量，纹理坐标，顶点颜色值等。 你可以存储任何数据。</p><p>属性用来指明怎么从缓冲中获取所需数据并将它提供给顶点着色器。 例如你可能在缓冲中用三个 32 位的浮点型数据存储一个位置值。 对于一个确切的属性你需要告诉它从哪个缓冲中获取数据，获取什么类型的数据（三个 32 位的浮点数据）， 起始偏移值是多少，到下一个位置的字节数是多少。</p><p>缓冲不是随意读取的。事实上顶点着色器运行的次数是一个指定的确切数字， 每一次运行属性会从指定的缓冲中按照指定规则依次获取下一个值。</p><ol start="2"><li>全局变量(Uniforms)</li></ol><p>全局变量在着色程序运行前赋值，在运行过程中全局有效。</p><ol start="3"><li>纹理(Textures)</li></ol><p>纹理是一个数据序列，可以在着色程序运行中随意读取其中的数据。 大多数情况存放的是图像数据，但是纹理仅仅是数据序列， 你也可以随意存放除了颜色数据以外的其它数据</p><ol start="4"><li>可变量(Varyings)</li></ol><p>可变量是一种顶点着色器给片段着色器传值的方式，依照渲染的图元是点， 线还是三角形，顶点着色器中设置的可变量会在片段着色器运行中获取不同的插值</p><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><p><img src="/notes/img/posts/WebGL%E5%9F%BA%E7%A1%80%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png" alt="WebGL基础创建过程"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot; /&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-id">#canvas</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">99vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">99vh</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vertex-shader-2d&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;notjs&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 一个属性变量，将会从缓冲中获取数据</span></span><br><span class="language-javascript">      attribute vec4 a_position;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// gl_Position 是一个顶点着色器主要设置的变量</span></span><br><span class="language-javascript">        gl_Position = a_position;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fragment-shader-2d&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;notjs&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      precision mediump float;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        gl_FragColor = <span class="hljs-title function_">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> vertexShaderSource =</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#vertex-shader-2d&quot;</span>).<span class="hljs-property">text</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> fragmentShaderSource = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&quot;#fragment-shader-2d&quot;</span></span><br><span class="language-javascript">      ).<span class="hljs-property">text</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> vertexShader = <span class="hljs-title function_">createShader</span>(</span><br><span class="language-javascript">        gl,</span><br><span class="language-javascript">        gl.<span class="hljs-property">VERTEX_SHADER</span>,</span><br><span class="language-javascript">        vertexShaderSource</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> fragmentShader = <span class="hljs-title function_">createShader</span>(</span><br><span class="language-javascript">        gl,</span><br><span class="language-javascript">        gl.<span class="hljs-property">FRAGMENT_SHADER</span>,</span><br><span class="language-javascript">        fragmentShaderSource</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">createShader</span>(<span class="hljs-params">gl, type, source</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> shader = gl.<span class="hljs-title function_">createShader</span>(type);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">shaderSource</span>(shader, source);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">compileShader</span>(shader);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> success = gl.<span class="hljs-title function_">getShaderParameter</span>(shader, gl.<span class="hljs-property">COMPILE_STATUS</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (success) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> shader;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gl.<span class="hljs-title function_">getShaderInfoLog</span>(shader));</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">deleteShader</span>(shader);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">createProgram</span>(<span class="hljs-params">gl, vertexShader, fragmentShader</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> program = gl.<span class="hljs-title function_">createProgram</span>();</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">attachShader</span>(program, vertexShader);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">attachShader</span>(program, fragmentShader);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">linkProgram</span>(program);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> success = gl.<span class="hljs-title function_">getProgramParameter</span>(program, gl.<span class="hljs-property">LINK_STATUS</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (success) <span class="hljs-keyword">return</span> program;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gl.<span class="hljs-title function_">getProgramInfoLog</span>(program));</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">deleteProgram</span>(program);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> program = <span class="hljs-title function_">createProgram</span>(gl, vertexShader, fragmentShader);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positionAttributeLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(</span><br><span class="language-javascript">        program,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;a_position&quot;</span></span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positions = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0</span>];</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">bufferData</span>(</span><br><span class="language-javascript">        gl.<span class="hljs-property">ARRAY_BUFFER</span>,</span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(positions),</span><br><span class="language-javascript">        gl.<span class="hljs-property">STATIC_DRAW</span></span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 一个是拥有的实际像素个数，一个是显示的大小</span></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">clearColor</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">      gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">useProgram</span>(program);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionAttributeLocation);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> size = <span class="hljs-number">2</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> type = gl.<span class="hljs-property">FLOAT</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> normalize = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> stride = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> offset = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">vertexAttribPointer</span>(</span><br><span class="language-javascript">        positionAttributeLocation,</span><br><span class="language-javascript">        size,</span><br><span class="language-javascript">        type,</span><br><span class="language-javascript">        normalize,</span><br><span class="language-javascript">        stride,</span><br><span class="language-javascript">        offset</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> primitiveType = gl.<span class="hljs-property">TRIANGLES</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> count = <span class="hljs-number">3</span>;</span><br><span class="language-javascript">      gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> WebGL做的是一件简单的事，它仅仅运行用户提供的两个方法，一个顶点着色器和一个片段着色器， 去绘制点，线和三角形。WebGL API只做光栅化处理并且在概念上十分容易理解。</p>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上下文 - Github Actions</title>
    <link href="/notes/github/gh-actions/context/"/>
    <url>/notes/github/gh-actions/context/</url>
    
    <content type="html"><![CDATA[<h3 id="关于上下文"><a href="#关于上下文" class="headerlink" title="关于上下文"></a>关于上下文</h3><p>上下文是一种访问工作流运行、变量、运行器环境、作业及步骤相关信息的方式。 每个上下文都是一个包含属性的对象，属性可以是字符串或其他对象。</p><h5 id="使用表达式访问上下文"><a href="#使用表达式访问上下文" class="headerlink" title="使用表达式访问上下文"></a>使用表达式访问上下文</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&lt;context&gt;</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="访问上下文的两种方式"><a href="#访问上下文的两种方式" class="headerlink" title="访问上下文的两种方式"></a>访问上下文的两种方式</h5><ol><li>github[‘sha’]</li><li>github.sha</li></ol><h5 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h5><ol><li>默认环境变量：仅存在于执行作业的运行器上</li><li>上下文：你可以在工作流的任何时间点使用大多数上下文</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">prod-check:</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.ref</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;refs/heads/main&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Deploying to production server on branch $GITHUB_REF&quot;</span><br></code></pre></td></tr></table></figure><h5 id="可用的上下文"><a href="#可用的上下文" class="headerlink" title="可用的上下文"></a>可用的上下文</h5><ol><li><p>github:</p><p>上下文包含有关工作流运行和触发运行的事件的信息。 还可以读取环境变量中的大多数 github 上下文数据</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  action<span class="hljs-punctuation">:</span> 正在运行的操作的名称，或步骤的id<br>  action_path<span class="hljs-punctuation">:</span> 操作所在的路径<span class="hljs-punctuation">,</span><br>  action_ref<span class="hljs-punctuation">:</span> 对于执行操作的步骤，这是正在执行的操作的引用<span class="hljs-punctuation">,</span><br>  action_repository<span class="hljs-punctuation">:</span> 对于执行操作的步骤，这是操作的所有者和存储库名称<br>  action_status<span class="hljs-punctuation">:</span> 对于复合操作，这是复合操作的当前结果<br>  actor<span class="hljs-punctuation">:</span> 触发初始工作流运行的用户的用户名<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">CI</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>, <span class="hljs-string">pull_request</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">normal_ci:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">normal</span> <span class="hljs-string">CI</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./run-tests</span><br><br>  <span class="hljs-attr">pull_request_ci:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event_name</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;pull_request&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">PR</span> <span class="hljs-string">CI</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./run-additional-pr-ci</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>env</p><p>env 上下文包含已在工作流、作业或步骤中设置的变量</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  &lt;env_name&gt;<span class="hljs-punctuation">:</span> 特定环境变量的值<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Hi</span> <span class="hljs-string">Mascot</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">mascot:</span> <span class="hljs-string">Mona</span><br>  <span class="hljs-attr">super_duper_var:</span> <span class="hljs-string">totally_awesome</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">windows_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">windows-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hi $<span class="hljs-template-variable">&#123;&#123; env.mascot &#125;&#125;</span>&#x27;</span>  <span class="hljs-comment"># Hi Mona</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hi $<span class="hljs-template-variable">&#123;&#123; env.mascot &#125;&#125;</span>&#x27;</span>  <span class="hljs-comment"># Hi Octocat</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">mascot:</span> <span class="hljs-string">Octocat</span><br>  <span class="hljs-attr">linux_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">mascot:</span> <span class="hljs-string">Tux</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hi $<span class="hljs-template-variable">&#123;&#123; env.mascot &#125;&#125;</span>&#x27;</span>  <span class="hljs-comment"># Hi Tux</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>vars</p><p>vars 上下文的内容是配置变量名称与其值的映射。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-comment"># Setting an environment variable with the value of a configuration variable</span><br>  <span class="hljs-attr">env_var:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.ENV_CONTEXT_VAR</span> <span class="hljs-string">&#125;&#125;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">display-variables:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.JOB_NAME</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-comment"># You can use configuration variables with the `vars` context for dynamic jobs</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.USE_VARIABLES</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.RUNNER</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">environment:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.ENVIRONMENT_STAGE</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">variables</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        echo &quot;repository variable : $REPOSITORY_VAR&quot;</span><br><span class="hljs-string">        echo &quot;organization variable : $ORGANIZATION_VAR&quot;</span><br><span class="hljs-string">        echo &quot;overridden variable : $OVERRIDE_VAR&quot;</span><br><span class="hljs-string">        echo &quot;variable from shell environment : $env_var&quot;</span><br><span class="hljs-string"></span>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">REPOSITORY_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.REPOSITORY_VAR</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">ORGANIZATION_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.ORGANIZATION_VAR</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">OVERRIDE_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.OVERRIDE_VAR</span> <span class="hljs-string">&#125;&#125;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.HELLO_WORLD_STEP</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.HELLO_WORLD_ENABLED</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/hello-world-javascript-action@main</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">who-to-greet:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.GREET_NAME</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>job</p><p>job 上下文包含当前正在运行的作业相关信息</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 作业的容器相关信息</span><br>  container<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> 容器的 ID<span class="hljs-punctuation">,</span><br>    network<span class="hljs-punctuation">:</span> 容器网络的 ID<span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 为作业创建的服务容器</span><br>  services<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> 服务容器的 ID<span class="hljs-punctuation">,</span><br>    network<span class="hljs-punctuation">:</span> 服务容器网络的 ID<span class="hljs-punctuation">,</span><br>    ports<span class="hljs-punctuation">:</span> 服务容器显露的端口<span class="hljs-punctuation">,</span><br>    status<span class="hljs-punctuation">:</span> 作业的当前状态 success | failure | cancelled<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="5"><li><p>jobs</p><p>此示例可重用工作流使用 jobs 上下文设置可重用工作流的输出。 请注意输出如何从步骤流向作业，然后流向 workflow_call 触发器</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Reusable</span> <span class="hljs-string">workflow</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_call:</span><br>    <span class="hljs-comment"># Map the workflow outputs to job outputs</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">firstword:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The first output string&quot;</span><br>        <span class="hljs-attr">value:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">jobs.example_job.outputs.output1</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">secondword:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The second output string&quot;</span><br>        <span class="hljs-attr">value:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">jobs.example_job.outputs.output2</span> <span class="hljs-string">&#125;&#125;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example_job:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-string">output</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-comment"># Map the job outputs to step outputs</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">output1:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.step1.outputs.firstword</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">output2:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.step2.outputs.secondword</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">step1</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;firstword=hello&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_OUTPUT</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">step2</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;secondword=world&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_OUTPUT</span><br></code></pre></td></tr></table></figure><ol start="6"><li><p>steps</p><p>steps 上下文包含有关当前作业中已指定 id 且已运行的步骤的信息。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-string">random</span> <span class="hljs-string">failure</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">randomly-failing-job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-number">0</span> <span class="hljs-string">or</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">generate_number</span><br>        <span class="hljs-attr">run:</span>  <span class="hljs-string">echo</span> <span class="hljs-string">&quot;random_number=$(($RANDOM % 2))&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_OUTPUT</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pass</span> <span class="hljs-string">or</span> <span class="hljs-string">fail</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">if</span> [[ <span class="hljs-string">$<span class="hljs-template-variable">&#123;&#123; steps.generate_number.outputs.random_number &#125;&#125;</span></span> <span class="hljs-string">==</span> <span class="hljs-number">0</span> ]]<span class="hljs-string">;</span> <span class="hljs-string">then</span> <span class="hljs-string">exit</span> <span class="hljs-number">0</span><span class="hljs-string">;</span> <span class="hljs-string">else</span> <span class="hljs-string">exit</span> <span class="hljs-number">1</span><span class="hljs-string">;</span> <span class="hljs-string">fi</span><br></code></pre></td></tr></table></figure><ol start="7"><li><p>runner</p><p>runner 上下文包含正在执行当前作业的运行器相关信息。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">with</span> <span class="hljs-string">logs</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir $&#123;&#123; runner.temp &#125;&#125;/build_logs</span><br><span class="hljs-string">          ./build.sh --log-path $&#123;&#123; runner.temp &#125;&#125;/build_logs</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">logs</span> <span class="hljs-string">on</span> <span class="hljs-string">fail</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">failure()</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">failure</span> <span class="hljs-string">logs</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.temp</span> <span class="hljs-string">&#125;&#125;/build_logs</span><br></code></pre></td></tr></table></figure><ol start="8"><li><p>secrets</p><p>secrets 上下文的以下示例内容显示自动 GITHUB_TOKEN，以及可用于工作流运行的两个其他机密。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Pull</span> <span class="hljs-string">request</span> <span class="hljs-string">labeler</span><br><span class="hljs-attr">on:</span> [ <span class="hljs-string">pull_request_target</span> ]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">triage:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">read</span><br>      <span class="hljs-attr">pull-requests:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/labeler@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">repo-token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><ol start="9"><li><p>strategy</p><p>对于具有矩阵的工作流，strategy 上下文包含有关当前作业的矩阵执行策略的信息。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Test</span> <span class="hljs-string">matrix</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">test:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">test-group:</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>        <span class="hljs-attr">node:</span> [<span class="hljs-number">14</span>, <span class="hljs-number">16</span>]<br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">test</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">test-job-$&#123;&#123;</span> <span class="hljs-string">strategy.job-index</span> <span class="hljs-string">&#125;&#125;.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">logs</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">log</span> <span class="hljs-string">for</span> <span class="hljs-string">job</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">strategy.job-index</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">test-job-$&#123;&#123;</span> <span class="hljs-string">strategy.job-index</span> <span class="hljs-string">&#125;&#125;.txt</span><br></code></pre></td></tr></table></figure><ol start="10"><li><p>matrix</p><p>对于具有矩阵的工作流，matrix 上下文包含工作流程文件中定义的适用于当前作业的矩阵属性。 例如，如果使用 os 和 node 键配置矩阵，则 matrix 上下文对象包含 os 和 node 属性，该属性具有用于当前作业的值</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Test</span> <span class="hljs-string">matrix</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-latest</span>, <span class="hljs-string">windows-latest</span>]<br>        <span class="hljs-attr">node:</span> [<span class="hljs-number">14</span>, <span class="hljs-number">16</span>]<br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">ci</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">tests</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><ol start="11"><li><p>needs</p><p>needs 上下文包含定义为当前作业直接依赖项的所有作业的输出。 请注意，这不包括隐式依赖作业（例如依赖作业的依赖作业）</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">and</span> <span class="hljs-string">deploy</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">build_id:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.build_step.outputs.build_id</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">build_step</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          ./build</span><br><span class="hljs-string">          echo &quot;build_id=$BUILD_ID&quot; &gt;&gt; $GITHUB_OUTPUT</span><br><span class="hljs-string"></span>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">needs:</span> <span class="hljs-string">build</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">./deploy</span> <span class="hljs-string">--build</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.build.outputs.build_id</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">debug:</span><br>    <span class="hljs-attr">needs:</span> [<span class="hljs-string">build</span>, <span class="hljs-string">deploy</span>]<br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">failure()</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">./debug</span><br></code></pre></td></tr></table></figure><ol start="12"><li><p>inputs</p><p>inputs 上下文包含传递给操作可重用工作流或手动触发的工作流的输入属性。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Reusable</span> <span class="hljs-string">deploy</span> <span class="hljs-string">workflow</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_call:</span><br>    <span class="hljs-attr">inputs:</span><br>      <span class="hljs-attr">build_id:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">number</span><br>      <span class="hljs-attr">deploy_target:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">perform_deploy:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.perform_deploy</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">build</span> <span class="hljs-string">to</span> <span class="hljs-string">target</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">deploy</span> <span class="hljs-string">--build</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.build_id</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">--target</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.deploy_target</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>gh-actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本功能 - Gihub Actions</title>
    <link href="/notes/github/gh-actions/basic-feture/"/>
    <url>/notes/github/gh-actions/basic-feture/</url>
    
    <content type="html"><![CDATA[<h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example-job:</span><br>      <span class="hljs-attr">steps:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Connect</span> <span class="hljs-string">to</span> <span class="hljs-string">PostgreSQL</span><br>          <span class="hljs-attr">run:</span> <span class="hljs-string">node</span> <span class="hljs-string">client.js</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-attr">POSTGRES_HOST:</span> <span class="hljs-string">postgres</span><br>            <span class="hljs-attr">POSTGRES_PORT:</span> <span class="hljs-number">5432</span><br></code></pre></td></tr></table></figure><h3 id="添加脚本到工作流程"><a href="#添加脚本到工作流程" class="headerlink" title="添加脚本到工作流程"></a>添加脚本到工作流程</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example-job:</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">build</span> <span class="hljs-string">script</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./.github/scripts/build.sh</span><br>        <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span><br></code></pre></td></tr></table></figure><h3 id="在作业之间共享数据"><a href="#在作业之间共享数据" class="headerlink" title="在作业之间共享数据"></a>在作业之间共享数据</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example-job:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Save</span> <span class="hljs-string">output</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          expr 1 + 1 &gt; output.log</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">output</span> <span class="hljs-string">file</span>  <span class="hljs-comment"># 上传</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">output-log-file</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">output.log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Download</span> <span class="hljs-string">a</span> <span class="hljs-string">single</span> <span class="hljs-string">artifact</span>  <span class="hljs-comment"># 下载</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/download-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">output-log-file</span><br></code></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># $&#123;&#123; expression &#125;&#125;</span><br><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/hello-world-javascript-action@e76147da8e5c81eaf017dede5645551d4b94427b</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&lt;expression&gt;</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">MY_ENV_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&lt;expression&gt;</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">myNull:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-literal">null</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myBoolean:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-literal">false</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myIntegerNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">711</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myFloatNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">-9.2</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myHexNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">0xff</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myExponentialNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">-2.99e-2</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myString:</span> <span class="hljs-string">Mona</span> <span class="hljs-string">the</span> <span class="hljs-string">Octocat</span><br>  <span class="hljs-attr">myStringInBraces:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&#x27;It&#x27;</span><span class="hljs-string">&#x27;s open source!&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="运算符-JS-通用"><a href="#运算符-JS-通用" class="headerlink" title="运算符(JS 通用)"></a>运算符(JS 通用)</h5><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li><p>contains( search, item )</p></li><li><p>startsWith( searchString, searchValue )</p></li><li><p>endsWith( searchString, searchValue )</p></li><li><p>format( string, replaceValue0, replaceValue1, …, replaceValueN)</p></li><li><p>join( array, optionalSeparator )</p></li><li><p>toJSON(value)</p></li><li><p>fromJSON(value)</p></li><li><p>hashFiles(path)</p></li><li><p>success()  如果前面的步骤都没有失败或被取消，则返回 true。</p></li><li><p>always()</p></li><li><p>cancelled()</p></li><li><p>failure()</p></li><li> *  对象过滤器</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YAML">[<br>  &#123; <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-attr">&quot;quantity&quot;:</span> <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-attr">&quot;quantity&quot;:</span> <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-attr">&quot;quantity&quot;:</span> <span class="hljs-number">1</span> &#125;<br>]<br></code></pre></td></tr></table></figure><p>筛选器 fruits.*.name 返回数组 [ “apple”, “orange”, “pear” ]。</p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>gh-actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于 - Github Actions</title>
    <link href="/notes/github/gh-actions/abstract/"/>
    <url>/notes/github/gh-actions/abstract/</url>
    
    <content type="html"><![CDATA[<h3 id="Github-Actions-的组件"><a href="#Github-Actions-的组件" class="headerlink" title="Github Actions 的组件"></a>Github Actions 的组件</h3><h5 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h5><p>工作流程由签入到存储库的 YAML 文件定义，并在存储库中的事件触发时运行，也可以手动触发，或按定义的时间表触发。工作流程在存储库的 .github&#x2F;workflows 目录中定义，存储库可以有多个工作流程，每个工作流程都可以执行不同的任务集。</p><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>事件是存储库中触发工作流程运行的特定活动。 例如，当有人创建拉取请求、打开议题或将提交推送到存储库时。</p><h5 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h5><p>作业是工作流中在同一运行器上执行的一组步骤。 每个步骤要么是一个将要执行的 shell 脚本，要么是一个将要运行的动作。 步骤按顺序执行，并且相互依赖。 由于每个步骤都在同一运行器上执行，因此您可以将数据从一个步骤共享到另一个步骤。 例如，可以有一个生成应用程序的步骤，后跟一个测试已生成应用程序的步骤。</p><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p>操作是用于 GitHub Actions 平台的自定义应用程序，它执行复杂但经常重复的任务。 使用操作可帮助减少在工作流程文件中编写的重复代码量。</p><h5 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h5><p>运行程序是触发工作流时运行工作流的服务器。 每个运行器一次可以运行一个作业。 GitHub 提供 Ubuntu Linux、Microsoft Windows 和 macOS 运行器来运行您的工作流程；每个工作流程运行都在新预配的全新虚拟机中执行。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># .github/workflows/*.yml</span><br><br><span class="hljs-attr">name:</span> <span class="hljs-string">learn-github-actions</span>  <span class="hljs-comment"># 工作流名称</span><br><span class="hljs-attr">run-name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.actor</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">is</span> <span class="hljs-string">learning</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Actions</span>  <span class="hljs-comment"># 工作流运行名称</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]  <span class="hljs-comment"># 触发器，使用push事件</span><br><span class="hljs-attr">jobs:</span>  <span class="hljs-comment"># 工作流下的所有作业</span><br>  <span class="hljs-attr">check-bats-version:</span>  <span class="hljs-comment"># 定义一个作业名称</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>  <span class="hljs-comment"># 运行程序</span><br>    <span class="hljs-attr">steps:</span>  <span class="hljs-comment"># 作业下的所有步骤</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">-g</span> <span class="hljs-string">bats</span>  <span class="hljs-comment"># 操作(执行命令)</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">bats</span> <span class="hljs-string">-v</span><br></code></pre></td></tr></table></figure><h3 id="查找和自定义操作"><a href="#查找和自定义操作" class="headerlink" title="查找和自定义操作"></a>查找和自定义操作</h3><h5 id="使用-GitHub-Marketplace"><a href="#使用-GitHub-Marketplace" class="headerlink" title="使用 GitHub Marketplace"></a>使用 GitHub Marketplace</h5><h5 id="从相同仓库添加操作"><a href="#从相同仓库添加操作" class="headerlink" title="从相同仓库添加操作"></a>从相同仓库添加操作</h5><p>使用相对路径</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-- hello-world (repository)</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">__ .github</span><br><span class="hljs-string"></span>|<span class="hljs-string">       └── workflows</span><br><span class="hljs-string"></span>|<span class="hljs-string">           └── my-first-workflow.yml</span><br><span class="hljs-string"></span>|<span class="hljs-string">       └── actions</span><br><span class="hljs-string"></span>|<span class="hljs-string">           </span>|<span class="hljs-string">__ hello-world-action</span><br><span class="hljs-string"></span>|<span class="hljs-string">               └── action.yml</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># This step checks out a copy of your repository.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-comment"># This step references the directory that contains the action.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">./.github/actions/hello-world-action</span><br></code></pre></td></tr></table></figure><p>action.yml 文件用于提供操作的元数据。</p><h5 id="从不同仓库添加操作"><a href="#从不同仓库添加操作" class="headerlink" title="从不同仓库添加操作"></a>从不同仓库添加操作</h5><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">jobs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">my_first_job</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">steps</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: My first step</span><br>        <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">actions/setup-node@v3</span><br></code></pre></td></tr></table></figure><h5 id="对自定义操作使用发行版管理"><a href="#对自定义操作使用发行版管理" class="headerlink" title="对自定义操作使用发行版管理"></a>对自定义操作使用发行版管理</h5><ol><li>使用标签</li><li>使用 SHA</li><li>使用分支</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/javascript-action@mai</span><br></code></pre></td></tr></table></figure><h5 id="对操作使用输入和输出"><a href="#对操作使用输入和输出" class="headerlink" title="对操作使用输入和输出"></a>对操作使用输入和输出</h5>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>gh-actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC文档概览</title>
    <link href="/notes/gis/dc/%E6%A6%82%E8%A7%88/"/>
    <url>/notes/gis/dc/%E6%A6%82%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h3 id="基础构成"><a href="#基础构成" class="headerlink" title="基础构成"></a>基础构成</h3><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><ol><li>DC<blockquote><p>全局</p></blockquote></li><li>Cesium<blockquote><p>const { Cesium } &#x3D; DC.Namespace</p></blockquote></li><li>turf<blockquote><p>const { turf } &#x3D; DC.Namespace</p></blockquote></li></ol><h5 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h5><h5 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h5><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><h3 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h3><h5 id="Viewer"><a href="#Viewer" class="headerlink" title="Viewer"></a>Viewer</h5><h5 id="Popup"><a href="#Popup" class="headerlink" title="Popup"></a>Popup</h5><h5 id="ContextMenu"><a href="#ContextMenu" class="headerlink" title="ContextMenu"></a>ContextMenu</h5><h5 id="Tooltip"><a href="#Tooltip" class="headerlink" title="Tooltip"></a>Tooltip</h5><h5 id="MapSplit"><a href="#MapSplit" class="headerlink" title="MapSplit"></a>MapSplit</h5><h5 id="TilesetSplit"><a href="#TilesetSplit" class="headerlink" title="TilesetSplit"></a>TilesetSplit</h5><h5 id="SceneSplit"><a href="#SceneSplit" class="headerlink" title="SceneSplit"></a>SceneSplit</h5><h5 id="Compass"><a href="#Compass" class="headerlink" title="Compass"></a>Compass</h5><h5 id="ZoomController"><a href="#ZoomController" class="headerlink" title="ZoomController"></a>ZoomController</h5><h5 id="LocationBar"><a href="#LocationBar" class="headerlink" title="LocationBar"></a>LocationBar</h5><h5 id="DistanceLegend"><a href="#DistanceLegend" class="headerlink" title="DistanceLegend"></a>DistanceLegend</h5><h5 id="LoadingMask"><a href="#LoadingMask" class="headerlink" title="LoadingMask"></a>LoadingMask</h5><h5 id="SkyBox"><a href="#SkyBox" class="headerlink" title="SkyBox"></a>SkyBox</h5><h5 id="GroundSkyBox"><a href="#GroundSkyBox" class="headerlink" title="GroundSkyBox"></a>GroundSkyBox</h5><h5 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h5><h5 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h5><h5 id="TilesetStyle"><a href="#TilesetStyle" class="headerlink" title="TilesetStyle"></a>TilesetStyle</h5><h5 id="JulianDate"><a href="#JulianDate" class="headerlink" title="JulianDate"></a>JulianDate</h5><h5 id="Rect"><a href="#Rect" class="headerlink" title="Rect"></a>Rect</h5><h5 id="CallbackProperty"><a href="#CallbackProperty" class="headerlink" title="CallbackProperty"></a>CallbackProperty</h5><h5 id="Parse"><a href="#Parse" class="headerlink" title="Parse"></a>Parse</h5><h5 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h5><h5 id="CoordTransform"><a href="#CoordTransform" class="headerlink" title="CoordTransform"></a>CoordTransform</h5><h5 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h5><h5 id="Util"><a href="#Util" class="headerlink" title="Util"></a>Util</h5><h5 id="DomUtil"><a href="#DomUtil" class="headerlink" title="DomUtil"></a>DomUtil</h5><h3 id="地图地形"><a href="#地图地形" class="headerlink" title="地图地形"></a>地图地形</h3><h5 id="ImageryLayerFactory"><a href="#ImageryLayerFactory" class="headerlink" title="ImageryLayerFactory"></a>ImageryLayerFactory</h5><h5 id="TerrainFactory"><a href="#TerrainFactory" class="headerlink" title="TerrainFactory"></a>TerrainFactory</h5><h3 id="业务图层"><a href="#业务图层" class="headerlink" title="业务图层"></a>业务图层</h3><h5 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h5><h5 id="LayerGroup"><a href="#LayerGroup" class="headerlink" title="LayerGroup"></a>LayerGroup</h5><h5 id="VectorLayer"><a href="#VectorLayer" class="headerlink" title="VectorLayer"></a>VectorLayer</h5><h5 id="DynamicLayer"><a href="#DynamicLayer" class="headerlink" title="DynamicLayer"></a>DynamicLayer</h5><h5 id="PrimitiveLayer"><a href="#PrimitiveLayer" class="headerlink" title="PrimitiveLayer"></a>PrimitiveLayer</h5><h5 id="GroundPrimitiveLayer"><a href="#GroundPrimitiveLayer" class="headerlink" title="GroundPrimitiveLayer"></a>GroundPrimitiveLayer</h5><h5 id="TilesetLayer"><a href="#TilesetLayer" class="headerlink" title="TilesetLayer"></a>TilesetLayer</h5><h5 id="GeoJsonLayer"><a href="#GeoJsonLayer" class="headerlink" title="GeoJsonLayer"></a>GeoJsonLayer</h5><h5 id="TopoJsonLayer"><a href="#TopoJsonLayer" class="headerlink" title="TopoJsonLayer"></a>TopoJsonLayer</h5><h5 id="HtmlLayer"><a href="#HtmlLayer" class="headerlink" title="HtmlLayer"></a>HtmlLayer</h5><h5 id="CzmlLayer"><a href="#CzmlLayer" class="headerlink" title="CzmlLayer"></a>CzmlLayer</h5><h5 id="KmlLayer"><a href="#KmlLayer" class="headerlink" title="KmlLayer"></a>KmlLayer</h5><h5 id="GpxLayer"><a href="#GpxLayer" class="headerlink" title="GpxLayer"></a>GpxLayer</h5><h5 id="ClusterLayer"><a href="#ClusterLayer" class="headerlink" title="ClusterLayer"></a>ClusterLayer</h5><h5 id="HeatLayer"><a href="#HeatLayer" class="headerlink" title="HeatLayer"></a>HeatLayer</h5><h5 id="WindLayer"><a href="#WindLayer" class="headerlink" title="WindLayer"></a>WindLayer</h5><h5 id="S3MLayer"><a href="#S3MLayer" class="headerlink" title="S3MLayer"></a>S3MLayer</h5><h3 id="覆盖元素"><a href="#覆盖元素" class="headerlink" title="覆盖元素"></a>覆盖元素</h3><h5 id="Overlay"><a href="#Overlay" class="headerlink" title="Overlay"></a>Overlay</h5><h5 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h5><h5 id="Polyline"><a href="#Polyline" class="headerlink" title="Polyline"></a>Polyline</h5><h5 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h5><h5 id="Billboard"><a href="#Billboard" class="headerlink" title="Billboard"></a>Billboard</h5><h5 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h5><h5 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h5><h5 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h5><h5 id="Wall"><a href="#Wall" class="headerlink" title="Wall"></a>Wall</h5><h5 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h5><h5 id="Tileset"><a href="#Tileset" class="headerlink" title="Tileset"></a>Tileset</h5><h5 id="DivIcon"><a href="#DivIcon" class="headerlink" title="DivIcon"></a>DivIcon</h5><h5 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h5><h5 id="Corridor"><a href="#Corridor" class="headerlink" title="Corridor"></a>Corridor</h5><h5 id="Cylinder"><a href="#Cylinder" class="headerlink" title="Cylinder"></a>Cylinder</h5><h5 id="Ellipse"><a href="#Ellipse" class="headerlink" title="Ellipse"></a>Ellipse</h5><h5 id="Ellipsoid"><a href="#Ellipsoid" class="headerlink" title="Ellipsoid"></a>Ellipsoid</h5><h5 id="Plane"><a href="#Plane" class="headerlink" title="Plane"></a>Plane</h5><h5 id="PolylineVolume"><a href="#PolylineVolume" class="headerlink" title="PolylineVolume"></a>PolylineVolume</h5><h5 id="DynamicBillboard"><a href="#DynamicBillboard" class="headerlink" title="DynamicBillboard"></a>DynamicBillboard</h5><h5 id="DynamicModel"><a href="#DynamicModel" class="headerlink" title="DynamicModel"></a>DynamicModel</h5><h5 id="CustomBillboard"><a href="#CustomBillboard" class="headerlink" title="CustomBillboard"></a>CustomBillboard</h5><h5 id="CustomLabel"><a href="#CustomLabel" class="headerlink" title="CustomLabel"></a>CustomLabel</h5><h5 id="AttackArrow"><a href="#AttackArrow" class="headerlink" title="AttackArrow"></a>AttackArrow</h5><h5 id="DoubleArrow"><a href="#DoubleArrow" class="headerlink" title="DoubleArrow"></a>DoubleArrow</h5><h5 id="FineArrow"><a href="#FineArrow" class="headerlink" title="FineArrow"></a>FineArrow</h5><h5 id="GatheringPlace"><a href="#GatheringPlace" class="headerlink" title="GatheringPlace"></a>GatheringPlace</h5><h5 id="TailedAttackArrow"><a href="#TailedAttackArrow" class="headerlink" title="TailedAttackArrow"></a>TailedAttackArrow</h5><h5 id="BillboardPrimitive"><a href="#BillboardPrimitive" class="headerlink" title="BillboardPrimitive"></a>BillboardPrimitive</h5><h5 id="BounceBillboardPrimitive"><a href="#BounceBillboardPrimitive" class="headerlink" title="BounceBillboardPrimitive"></a>BounceBillboardPrimitive</h5><h5 id="DiffuseWallPrimitive"><a href="#DiffuseWallPrimitive" class="headerlink" title="DiffuseWallPrimitive"></a>DiffuseWallPrimitive</h5><h5 id="ElecEllipsoidPrimitive"><a href="#ElecEllipsoidPrimitive" class="headerlink" title="ElecEllipsoidPrimitive"></a>ElecEllipsoidPrimitive</h5><h5 id="FlowLinePrimitive"><a href="#FlowLinePrimitive" class="headerlink" title="FlowLinePrimitive"></a>FlowLinePrimitive</h5><h5 id="LabelPrimitive"><a href="#LabelPrimitive" class="headerlink" title="LabelPrimitive"></a>LabelPrimitive</h5><h5 id="LightCylinderPrimitive"><a href="#LightCylinderPrimitive" class="headerlink" title="LightCylinderPrimitive"></a>LightCylinderPrimitive</h5><h5 id="BounceLabelPrimitive"><a href="#BounceLabelPrimitive" class="headerlink" title="BounceLabelPrimitive"></a>BounceLabelPrimitive</h5><h5 id="ModelPrimitive"><a href="#ModelPrimitive" class="headerlink" title="ModelPrimitive"></a>ModelPrimitive</h5><h5 id="ModelCollectionPrimitive"><a href="#ModelCollectionPrimitive" class="headerlink" title="ModelCollectionPrimitive"></a>ModelCollectionPrimitive</h5><h5 id="PointPrimitive"><a href="#PointPrimitive" class="headerlink" title="PointPrimitive"></a>PointPrimitive</h5><h5 id="PolylinePrimitive"><a href="#PolylinePrimitive" class="headerlink" title="PolylinePrimitive"></a>PolylinePrimitive</h5><h5 id="ScanCirclePrimitive"><a href="#ScanCirclePrimitive" class="headerlink" title="ScanCirclePrimitive"></a>ScanCirclePrimitive</h5><h5 id="TrailLinePrimitive"><a href="#TrailLinePrimitive" class="headerlink" title="TrailLinePrimitive"></a>TrailLinePrimitive</h5><h5 id="WaterPrimitive"><a href="#WaterPrimitive" class="headerlink" title="WaterPrimitive"></a>WaterPrimitive</h5><h5 id="VideoPrimitive"><a href="#VideoPrimitive" class="headerlink" title="VideoPrimitive"></a>VideoPrimitive</h5><h3 id="材质属性"><a href="#材质属性" class="headerlink" title="材质属性"></a>材质属性</h3><h3 id="效果动画"><a href="#效果动画" class="headerlink" title="效果动画"></a>效果动画</h3><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><h3 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h3><h3 id="第三方集成"><a href="#第三方集成" class="headerlink" title="第三方集成"></a>第三方集成</h3>]]></content>
    
    
    <categories>
      
      <category>Gis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gis</tag>
      
      <tag>DC</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
