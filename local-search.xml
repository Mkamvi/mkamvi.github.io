<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>快捷键 - Emacs</title>
    <link href="/emacs/tutoial/"/>
    <url>/emacs/tutoial/</url>
    
    <content type="html"><![CDATA[<h3 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl + v</td><td>向下滚动一屏</td></tr><tr><td>Meta + v</td><td>向上移动一屏</td></tr><tr><td>Ctrl + l</td><td>重绘屏幕，并将光标所在行移动至中央(连续按可以在上中下反复横跳)</td></tr></tbody></table><h3 id="基本的光标控制"><a href="#基本的光标控制" class="headerlink" title="基本的光标控制"></a>基本的光标控制</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl + p</td><td>上一行</td></tr><tr><td>Ctrl + n</td><td>下一行</td></tr><tr><td>Ctrl + b</td><td>向左移</td></tr><tr><td>Ctrl + f</td><td>向右移</td></tr><tr><td>Meta + b</td><td>向左移一个词</td></tr><tr><td>Meta + f</td><td>向右移一个词</td></tr><tr><td>Ctrl + a</td><td>移动到行首</td></tr><tr><td>Ctrl + e</td><td>移动到行尾</td></tr><tr><td>Meta + a</td><td>移动到句首</td></tr><tr><td>Meta + e</td><td>移动到句尾</td></tr></tbody></table><blockquote><p>通过 Meta 系列组合键用来操作由语言定义的单位(词、句子、单位)，而 Ctrl 系列组合键用来操作与语言无关的基本单位(字符、行)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>emacs</tag>
      
      <tag>编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>着色器和GLSL - WebGL</title>
    <link href="/webgl/shader-glsl/"/>
    <url>/webgl/shader-glsl/</url>
    
    <content type="html"><![CDATA[<h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><p>一个顶点着色器的工作是生成裁剪空间坐标值，通常是以下的形式</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_Position</span> = doMathToMakeClipspaceCoordinates<br>&#125;<br></code></pre></td></tr></table></figure><p>每个顶点调用一次（顶点）着色器，每次调用都需要设置一个特殊的全局变量 gl_Position， 该变量的值就是裁减空间坐标值</p><p>顶点着色器需要的数据，可以通过以下三种方式获得:</p><ol><li>Attributes 属性 (从缓冲中获取的数据)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 创建缓冲</span><br><span class="hljs-keyword">var</span> buf = gl.<span class="hljs-title function_">createBuffer</span>();<br><br><span class="hljs-comment">// 将数据存入缓冲</span><br>gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, buf);<br>gl.<span class="hljs-title function_">bufferData</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, someData, gl.<span class="hljs-property">STATIC_DRAW</span>);<br><br><span class="hljs-comment">// 初始化的时候，在你制作的（着色）程序中找到属性所在地址</span><br><span class="hljs-keyword">var</span> positionLoc = gl.<span class="hljs-title function_">getAttribLocation</span>(someShaderProgram, <span class="hljs-string">&quot;a_position&quot;</span>);<br><br><span class="hljs-comment">// 开启从缓冲中获取数据</span><br>gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionLoc);<br><br><span class="hljs-keyword">var</span> numComponents = <span class="hljs-number">3</span>;  <span class="hljs-comment">// (x, y, z)</span><br><span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>;    <span class="hljs-comment">// 32位浮点数据</span><br><span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 不标准化</span><br><span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;         <span class="hljs-comment">// 从缓冲起始位置开始获取</span><br><span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>;         <span class="hljs-comment">// 到下一个数据跳多少位内存</span><br>                        <span class="hljs-comment">// 0 = 使用当前的单位个数和单位长度 （ 3 * Float32Array.BYTES_PER_ELEMENT ）</span><br><br><span class="hljs-comment">// 告诉WebGL怎么从缓冲中获取数据传递给属性</span><br>gl.<span class="hljs-title function_">vertexAttribPointer</span>(positionLoc, numComponents, type, <span class="hljs-literal">false</span>, stride, offset);<br><br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 属性可以用 float, vec2, vec3, vec4, mat2, mat3 和 mat4 数据类型</span><br><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec4</span> a_position;<br><br><span class="hljs-comment">// 不做任何运算直接将数据传递给gl_Position</span><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_Position</span> = a_position;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Uniforms 全局变量 (在一次绘制中对所有顶点保持一致值)</li></ol><p>全局变量在一次绘制过程中传递给着色器的值都一样</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec4</span> a_position;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec4</span> u_offset;<br><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_Position</span> = a_position + u_offset;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 在初始化时找到全局变量的地址</span><br><span class="hljs-keyword">var</span> offsetLoc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_offset&quot;</span>);<br><br><span class="hljs-comment">// 在绘制前设置全局变量</span><br>gl.<span class="hljs-title function_">uniform4fv</span>(offsetLoc, [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]);  <span class="hljs-comment">// 向右偏移一半屏幕宽度</span><br></code></pre></td></tr></table></figure><p>要注意的是全局变量属于单个着色程序，如果多个着色程序有同名全局变量，需要找到每个全局变量并设置自己的值。 我们调用 gl.uniform???的时候只是设置了当前程序的全局变量，当前程序是传递给 gl.useProgram 的最后一个程序</p><p>全局变量有很多类型，对应的类型有对应的设置方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">gl.<span class="hljs-property">uniform1f</span> (floatUniformLoc, v);                 <span class="hljs-comment">// float</span><br>gl.<span class="hljs-title function_">uniform1fv</span>(floatUniformLoc, [v]);               <span class="hljs-comment">// float 或 float array</span><br>gl.<span class="hljs-property">uniform2f</span> (vec2UniformLoc,  v0, v1);            <span class="hljs-comment">// vec2</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(vec2UniformLoc,  [v0, v1]);          <span class="hljs-comment">// vec2 或 vec2 array</span><br>gl.<span class="hljs-property">uniform3f</span> (vec3UniformLoc,  v0, v1, v2);        <span class="hljs-comment">// vec3</span><br>gl.<span class="hljs-title function_">uniform3fv</span>(vec3UniformLoc,  [v0, v1, v2]);      <span class="hljs-comment">// vec3 或 vec3 array</span><br>gl.<span class="hljs-property">uniform4f</span> (vec4UniformLoc,  v0, v1, v2, v4);    <span class="hljs-comment">// vec4</span><br>gl.<span class="hljs-title function_">uniform4fv</span>(vec4UniformLoc,  [v0, v1, v2, v4]);  <span class="hljs-comment">// vec4 或 vec4 array</span><br><br>gl.<span class="hljs-title function_">uniformMatrix2fv</span>(mat2UniformLoc, <span class="hljs-literal">false</span>, [  4x element array ])  <span class="hljs-comment">// mat2 或 mat2 array</span><br>gl.<span class="hljs-title function_">uniformMatrix3fv</span>(mat3UniformLoc, <span class="hljs-literal">false</span>, [  9x element array ])  <span class="hljs-comment">// mat3 或 mat3 array</span><br>gl.<span class="hljs-title function_">uniformMatrix4fv</span>(mat4UniformLoc, <span class="hljs-literal">false</span>, [ 16x element array ])  <span class="hljs-comment">// mat4 或 mat4 array</span><br><br>gl.<span class="hljs-property">uniform1i</span> (intUniformLoc,   v);                 <span class="hljs-comment">// int</span><br>gl.<span class="hljs-title function_">uniform1iv</span>(intUniformLoc, [v]);                 <span class="hljs-comment">// int 或 int array</span><br>gl.<span class="hljs-property">uniform2i</span> (ivec2UniformLoc, v0, v1);            <span class="hljs-comment">// ivec2</span><br>gl.<span class="hljs-title function_">uniform2iv</span>(ivec2UniformLoc, [v0, v1]);          <span class="hljs-comment">// ivec2 或 ivec2 array</span><br>gl.<span class="hljs-property">uniform3i</span> (ivec3UniformLoc, v0, v1, v2);        <span class="hljs-comment">// ivec3</span><br>gl.<span class="hljs-title function_">uniform3iv</span>(ivec3UniformLoc, [v0, v1, v2]);      <span class="hljs-comment">// ivec3 or ivec3 array</span><br>gl.<span class="hljs-property">uniform4i</span> (ivec4UniformLoc, v0, v1, v2, v4);    <span class="hljs-comment">// ivec4</span><br>gl.<span class="hljs-title function_">uniform4iv</span>(ivec4UniformLoc, [v0, v1, v2, v4]);  <span class="hljs-comment">// ivec4 或 ivec4 array</span><br><br>gl.<span class="hljs-property">uniform1i</span> (sampler2DUniformLoc,   v);           <span class="hljs-comment">// sampler2D (textures)</span><br>gl.<span class="hljs-title function_">uniform1iv</span>(sampler2DUniformLoc, [v]);           <span class="hljs-comment">// sampler2D 或 sampler2D array</span><br><br>gl.<span class="hljs-property">uniform1i</span> (samplerCubeUniformLoc,   v);         <span class="hljs-comment">// samplerCube (textures)</span><br>gl.<span class="hljs-title function_">uniform1iv</span>(samplerCubeUniformLoc, [v]);         <span class="hljs-comment">// samplerCube 或 samplerCube array</span><br></code></pre></td></tr></table></figure><p>还有一些类型 bool, bvec2, bvec3, and bvec4。它们可用 gl.uniform?f?或 gl.uniform?i?</p><p>一个数组可以一次设置所有的全局变量:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 着色器里</span><br>uniform vec2 u_someVec2[<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// JavaScript 初始化时</span><br><span class="hljs-keyword">var</span> someVec2Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2&quot;</span>);<br><br><span class="hljs-comment">// 渲染的时候</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Loc, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);  <span class="hljs-comment">// 设置数组 u_someVec2</span><br></code></pre></td></tr></table></figure><p>如果你想单独设置数组中的某个值，就要单独找到该值的地址:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// JavaScript 初始化时</span><br><span class="hljs-keyword">var</span> someVec2Element0Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2[0]&quot;</span>);<br><span class="hljs-keyword">var</span> someVec2Element1Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2[1]&quot;</span>);<br><span class="hljs-keyword">var</span> someVec2Element2Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2[2]&quot;</span>);<br><br><span class="hljs-comment">// 渲染的时候</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Element0Loc, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);  <span class="hljs-comment">// set element 0</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Element1Loc, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);  <span class="hljs-comment">// set element 1</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Element2Loc, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);  <span class="hljs-comment">// set element 2</span><br></code></pre></td></tr></table></figure><p>同样的，如果你创建了一个结构体:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs GLSL">struct SomeStruct &#123;<br>  <span class="hljs-type">bool</span> active;<br>  <span class="hljs-type">vec2</span> someVec2;<br>&#125;;<br><span class="hljs-keyword">uniform</span> SomeStruct u_someThing;<br></code></pre></td></tr></table></figure><p>你需要找到每个元素的地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> someThingActiveLoc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someThing.active&quot;</span>);<br><span class="hljs-keyword">var</span> someThingSomeVec2Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someThing.someVec2&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>⌛️ Textures 纹理 (从像素或纹理元素中获取的数据)</li></ol><h3 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a>片段着色器</h3><p>一个片段着色器的工作是为当前光栅化的像素提供颜色值，通常是以下的形式:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_FragColor</span> = doMathToMakeAColor;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个像素都将调用一次片段着色器，每次调用需要从你设置的特殊全局变量 gl_FragColor 中获取颜色信息</p><p>片段着色器所需的数据，可以通过以下三种方式获取:</p><ol><li>Uniforms 全局变量 (values that stay the same for every pixel of a single draw call)</li></ol><p>同上(顶点着色器)</p><ol start="2"><li>Textures 纹理 (data from pixels&#x2F;texels)</li></ol><p>在着色器中获取纹理信息，可以先创建一个 sampler2D 类型全局变量，然后用 GLSL 方法 texture2D 从纹理中提取信息:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> u_texture;<br><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-type">vec2</span> texcoord = <span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>);  <span class="hljs-comment">// 获取纹理中心的值</span><br>   <span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-built_in">texture2D</span>(u_texture, texcoord);<br>&#125;<br></code></pre></td></tr></table></figure><p>从纹理中获取的数据取决于很多设置。 至少要创建并给纹理填充数据，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> tex = gl.<span class="hljs-title function_">createTexture</span>();<br>gl.<span class="hljs-title function_">bindTexture</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, tex);<br><span class="hljs-keyword">var</span> level = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> width = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> height = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<br>   <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>,   <span class="hljs-comment">// 一个红色的像素</span><br>   <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>,   <span class="hljs-comment">// 一个绿色的像素</span><br>]);<br>gl.<span class="hljs-title function_">texImage2D</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, level, gl.<span class="hljs-property">RGBA</span>, width, height, <span class="hljs-number">0</span>, gl.<span class="hljs-property">RGBA</span>, gl.<span class="hljs-property">UNSIGNED_BYTE</span>, data);<br>gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_MIN_FILTER</span>, gl.<span class="hljs-property">LINEAR</span>);<br><br><span class="hljs-comment">// 初始化时找到全局变量的地址</span><br><span class="hljs-keyword">var</span> someSamplerLoc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_texture&quot;</span>);<br><br><span class="hljs-comment">// 在渲染的时候WebGL要求纹理必须绑定到一个纹理单元上</span><br><span class="hljs-keyword">var</span> unit = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 挑选一个纹理单元</span><br>gl.<span class="hljs-title function_">activeTexture</span>(gl.<span class="hljs-property">TEXTURE0</span> + unit);<br>gl.<span class="hljs-title function_">bindTexture</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, tex);<br><br><span class="hljs-comment">// 告诉着色器你要使用的纹理在那个纹理单元</span><br>gl.<span class="hljs-title function_">uniform1i</span>(someSamplerLoc, unit);<br><br></code></pre></td></tr></table></figure><ol start="3"><li>Varyings 可变量 (data passed from the vertex shader and interpolated)</li></ol><p>可变量是一种顶点着色器给片段着色器传值的方式</p><p>为了使用可变量，要在两个着色器中定义同名的可变量。 给顶点着色器中可变量设置的值，会作为参考值进行内插，在绘制像素时传给片段着色器的可变量</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// 顶点着色器</span><br><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec4</span> a_position;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec4</span> u_offset;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-type">vec4</span> v_positionWithOffset;<br><br><span class="hljs-type">void</span> main() &#123;<br>  <span class="hljs-built_in">gl_Position</span> = a_position + u_offset;<br>  v_positionWithOffset = a_position + u_offset;<br>&#125;<br><br><br><span class="hljs-comment">// 片段着色器</span><br><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-type">vec4</span> v_positionWithOffset;<br><br><span class="hljs-type">void</span> main() &#123;<br>  <span class="hljs-comment">// 从裁剪空间 (-1 &lt;-&gt; +1) 转换到颜色空间 (0 -&gt; 1).</span><br>  <span class="hljs-type">vec4</span> color = v_positionWithOffset * <span class="hljs-number">0.5</span> + <span class="hljs-number">0.5</span>;<br>  <span class="hljs-built_in">gl_FragColor</span> = color;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="GLSL"><a href="#GLSL" class="headerlink" title="GLSL"></a>GLSL</h3><p>GLSL 全称是 Graphics Library Shader Language （图形库着色器语言），是着色器使用的语言。 它有一些不同于 JavaScript 的特性，主要目的是为栅格化图形提供常用的计算功能。 所以它内建的数据类型例如 vec2, vec3 和 vec4 分别代表两个值，三个值和四个值， 类似的还有 mat2, mat3 和 mat4 分别代表 2x2, 3x3 和 4x4 矩阵。 你可以做一些运算例如常量和矢量的乘法</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">vec4</span> a = <span class="hljs-type">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-type">vec4</span> b = a * <span class="hljs-number">2.0</span>;<br><span class="hljs-comment">// b 现在是 vec4(2, 4, 6, 8);</span><br><br><br><span class="hljs-comment">// 做矩阵乘法以及矢量和矩阵的乘法</span><br><span class="hljs-type">mat4</span> a = ???<br><span class="hljs-type">mat4</span> b = ???<br><span class="hljs-type">mat4</span> c = a * b;<br><br><span class="hljs-type">vec4</span> v = ???<br><span class="hljs-type">vec4</span> y = c * v;<br><br></code></pre></td></tr></table></figure><p>他还为矢量数据提供多种分量选择器，例如 vec4:</p><ul><li>v.x 和 v.s 以及 v.r ， v[0] 表达的是同一个分量。</li><li>v.y 和 v.t 以及 v.g ， v[1] 表达的是同一个分量。</li><li>v.z 和 v.p 以及 v.b ， v[2] 表达的是同一个分量。</li><li>v.w 和 v.q 以及 v.a ， v[3] 表达的是同一个分量。</li></ul><p>它还支持矢量调制，意味者你可以交换或重复分量:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs GLSL">v.yyyy<br>同<br><span class="hljs-type">vec4</span>(v.y, v.y, v.y, v.y)<br><br>v.bgra<br>同<br><span class="hljs-type">vec4</span>(v.b, v.g, v.r, v.a)<br><br><span class="hljs-type">vec4</span>(v.rgb, <span class="hljs-number">1</span>)<br>同<br><span class="hljs-type">vec4</span>(v.r, v.g, v.b, <span class="hljs-number">1</span>)<br><br><span class="hljs-type">vec4</span>(<span class="hljs-number">1</span>)<br>同<br><span class="hljs-type">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p>值得注意的是 GLSL 是一个强类型的语言:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">float</span> f = <span class="hljs-number">1</span>;  // 错误，<span class="hljs-number">1</span>是<span class="hljs-built_in">int</span>类型，不能将<span class="hljs-built_in">int</span>型赋值给<span class="hljs-built_in">float</span><br><span class="hljs-built_in">float</span> f = <span class="hljs-number">1.0</span>;      // 使用<span class="hljs-built_in">float</span><br><span class="hljs-built_in">float</span> f = <span class="hljs-built_in">float</span>(<span class="hljs-number">1</span>)  // 转换<span class="hljs-keyword">integer</span>为<span class="hljs-built_in">float</span><br><br></code></pre></td></tr></table></figure><p>上例中 vec4(v.rgb, 1) 不会因为 1 报错，因为 vec4 内部进行了转换类似 float(1)</p><p>GLSL 有一系列内置方法，其中大多数运算支持多种数据类型，并且一次可以运算多个分量，例如:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// T可以是 float, vec2, vec3 或 vec4 。如果你传的是 vec4 返回的也是 vec4, 返回结果对应每个分量的正弦值。换句话说如果 v 是 vec4 类型</span><br>T <span class="hljs-built_in">sin</span>(T angle)<br><br><span class="hljs-type">vec4</span> s = <span class="hljs-built_in">sin</span>(v)<br>同<br><span class="hljs-type">vec4</span> s = <span class="hljs-type">vec4</span>(<span class="hljs-built_in">sin</span>(v.x), <span class="hljs-built_in">sin</span>(v.y), <span class="hljs-built_in">sin</span>(v.z), <span class="hljs-built_in">sin</span>(v.w))<br><br><span class="hljs-type">vec4</span> m = <span class="hljs-built_in">mix</span>(v1, v2, f);<br>同<br><span class="hljs-type">vec4</span> m = <span class="hljs-type">vec4</span>(<br>  <span class="hljs-built_in">mix</span>(v1.x, v2.x, f),<br>  <span class="hljs-built_in">mix</span>(v1.y, v2.y, f),<br>  <span class="hljs-built_in">mix</span>(v1.z, v2.z, f),<br>  <span class="hljs-built_in">mix</span>(v1.w, v2.w, f));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作原理 - WebGL</title>
    <link href="/webgl/principle/"/>
    <url>/webgl/principle/</url>
    
    <content type="html"><![CDATA[<p>WebGL 在 GPU 上的工作基本上分为两部分，第一部分是将顶点（或数据流）转换到裁剪空间坐标， 第二部分是基于第一部分的结果绘制像素点</p><p>传值可以使用 varyings(可变量)</p><h3 id="关于-buffer-和-attribute"><a href="#关于-buffer-和-attribute" class="headerlink" title="关于 buffer 和 attribute"></a>关于 buffer 和 attribute</h3><p>缓冲操作是在 GPU 上获取顶点和其他顶点数据的一种方式。 gl.createBuffer 创建一个缓冲；gl.bindBuffer 是设置缓冲为当前使用缓冲； gl.bufferData 将数据拷贝到缓冲，这个操作一般在初始化完成。</p><p>一旦数据存到缓冲中，还需要告诉 WebGL 怎么从缓冲中提取数据传给顶点着色器的属性。</p><p>要做这些，首先需要获取 WebGL 给属性分配的地址，如下方代码所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 询问顶点数据应该放在哪里</span><br><span class="hljs-keyword">var</span> positionLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_position&quot;</span>);<br><span class="hljs-keyword">var</span> colorLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_color&quot;</span>);<br></code></pre></td></tr></table></figure><p>一旦知道了属性的地址，在绘制前还需要发出三个命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 告诉WebGL我们想从缓冲中提供数据</span><br>gl.<span class="hljs-title function_">enableVertexAttribArray</span>(location);<br><br><span class="hljs-comment">// 将缓冲绑定到 ARRAY_BUFFER 绑定点，它是WebGL内部的一个全局变量</span><br>gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, someBuffer);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 这个命令告诉WebGL从 ARRAY_BUFFER 绑定点当前绑定的缓冲获取数据。 每个顶点有几个单</span><br><span class="hljs-comment">  * 位的数据(1 - 4)，单位数据类型是什么(BYTE, FLOAT, INT, UNSIGNED_SHORT, 等等...)，</span><br><span class="hljs-comment">  * stride 是从一个数据到下一个数据要跳过多少位，最后是数据在缓冲的什么位置。</span><br><span class="hljs-comment">  * 如果每个类型的数据都用一个缓冲存储，stride 和 offset 都是 0 。 对 stride 来说 0 表</span><br><span class="hljs-comment">  * 示 “用符合单位类型和单位个数的大小”。 对 offset 来说 0 表示从缓冲起始位置开始读取</span><br><span class="hljs-comment">  * 它们使用 0 以外的值时会复杂得多，虽然这样会取得一些性能能上的优势，</span><br><span class="hljs-comment">  * 但是一般情况下并不值得，除非你想充分压榨WebGL的性能。</span><br><span class="hljs-comment">  */</span><br><br>gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>    location,<br>    numComponents,<br>    typeOfData,<br>    normalizeFlag,<br>    strideToNextPieceOfData,<br>    offsetIntoBuffer);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础 - WebGL</title>
    <link href="/webgl/basic/"/>
    <url>/webgl/basic/</url>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>WebGL 在电脑的 GPU 中运行。因此你需要使用能够在 GPU 上运行的代码。 这样的代码需要提供成对的方法。每对方法中一个叫顶点着色器， 另一个叫片段着色器，并且使用一种和 C 或 C++类似的强类型的语言 GLSL。 (GL 着色语言)。 每一对组合起来称作一个 program（着色程序）。</p><p>顶点着色器的作用是计算顶点的位置。根据计算出的一系列顶点位置，WebGL 可以对点， 线和三角形在内的一些图元进行光栅化处理。当对这些图元进行光栅化处理时需要使用片段着色器方法。 片段着色器的作用是计算出当前绘制图元中每个像素的颜色值。</p><p>几乎整个 WebGL API 都是关于如何设置这些成对方法的状态值以及运行它们。 对于想要绘制的每一个对象，都需要先设置一系列状态值，然后通过调用 gl.drawArrays 或 gl.drawElements 运行一个着色方法对，使得你的着色器对能够在 GPU 上运行。</p><p>这些方法对所需的任何数据都需要发送到 GPU，这里有着色器获取数据的 4 种方法：</p><ol><li>属性(Attributes)和缓冲</li></ol><p>缓冲是发送到 GPU 的一些二进制数据序列，通常情况下缓冲数据包括位置，法向量，纹理坐标，顶点颜色值等。 你可以存储任何数据。</p><p>属性用来指明怎么从缓冲中获取所需数据并将它提供给顶点着色器。 例如你可能在缓冲中用三个 32 位的浮点型数据存储一个位置值。 对于一个确切的属性你需要告诉它从哪个缓冲中获取数据，获取什么类型的数据（三个 32 位的浮点数据）， 起始偏移值是多少，到下一个位置的字节数是多少。</p><p>缓冲不是随意读取的。事实上顶点着色器运行的次数是一个指定的确切数字， 每一次运行属性会从指定的缓冲中按照指定规则依次获取下一个值。</p><ol start="2"><li>全局变量(Uniforms)</li></ol><p>全局变量在着色程序运行前赋值，在运行过程中全局有效。</p><ol start="3"><li>纹理(Textures)</li></ol><p>纹理是一个数据序列，可以在着色程序运行中随意读取其中的数据。 大多数情况存放的是图像数据，但是纹理仅仅是数据序列， 你也可以随意存放除了颜色数据以外的其它数据</p><ol start="4"><li>可变量(Varyings)</li></ol><p>可变量是一种顶点着色器给片段着色器传值的方式，依照渲染的图元是点， 线还是三角形，顶点着色器中设置的可变量会在片段着色器运行中获取不同的插值</p><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><p><img src="/img/posts/WebGL%E5%9F%BA%E7%A1%80%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png" alt="WebGL基础创建过程"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot; /&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-id">#canvas</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">99vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">99vh</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vertex-shader-2d&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;notjs&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 一个属性变量，将会从缓冲中获取数据</span></span><br><span class="language-javascript">      attribute vec4 a_position;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// gl_Position 是一个顶点着色器主要设置的变量</span></span><br><span class="language-javascript">        gl_Position = a_position;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fragment-shader-2d&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;notjs&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      precision mediump float;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        gl_FragColor = <span class="hljs-title function_">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> vertexShaderSource =</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#vertex-shader-2d&quot;</span>).<span class="hljs-property">text</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> fragmentShaderSource = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&quot;#fragment-shader-2d&quot;</span></span><br><span class="language-javascript">      ).<span class="hljs-property">text</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> vertexShader = <span class="hljs-title function_">createShader</span>(</span><br><span class="language-javascript">        gl,</span><br><span class="language-javascript">        gl.<span class="hljs-property">VERTEX_SHADER</span>,</span><br><span class="language-javascript">        vertexShaderSource</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> fragmentShader = <span class="hljs-title function_">createShader</span>(</span><br><span class="language-javascript">        gl,</span><br><span class="language-javascript">        gl.<span class="hljs-property">FRAGMENT_SHADER</span>,</span><br><span class="language-javascript">        fragmentShaderSource</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">createShader</span>(<span class="hljs-params">gl, type, source</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> shader = gl.<span class="hljs-title function_">createShader</span>(type);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">shaderSource</span>(shader, source);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">compileShader</span>(shader);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> success = gl.<span class="hljs-title function_">getShaderParameter</span>(shader, gl.<span class="hljs-property">COMPILE_STATUS</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (success) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> shader;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gl.<span class="hljs-title function_">getShaderInfoLog</span>(shader));</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">deleteShader</span>(shader);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">createProgram</span>(<span class="hljs-params">gl, vertexShader, fragmentShader</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> program = gl.<span class="hljs-title function_">createProgram</span>();</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">attachShader</span>(program, vertexShader);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">attachShader</span>(program, fragmentShader);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">linkProgram</span>(program);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> success = gl.<span class="hljs-title function_">getProgramParameter</span>(program, gl.<span class="hljs-property">LINK_STATUS</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (success) <span class="hljs-keyword">return</span> program;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gl.<span class="hljs-title function_">getProgramInfoLog</span>(program));</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">deleteProgram</span>(program);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> program = <span class="hljs-title function_">createProgram</span>(gl, vertexShader, fragmentShader);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positionAttributeLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(</span><br><span class="language-javascript">        program,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;a_position&quot;</span></span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positions = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0</span>];</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">bufferData</span>(</span><br><span class="language-javascript">        gl.<span class="hljs-property">ARRAY_BUFFER</span>,</span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(positions),</span><br><span class="language-javascript">        gl.<span class="hljs-property">STATIC_DRAW</span></span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 一个是拥有的实际像素个数，一个是显示的大小</span></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">clearColor</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">      gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">useProgram</span>(program);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionAttributeLocation);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> size = <span class="hljs-number">2</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> type = gl.<span class="hljs-property">FLOAT</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> normalize = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> stride = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> offset = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">vertexAttribPointer</span>(</span><br><span class="language-javascript">        positionAttributeLocation,</span><br><span class="language-javascript">        size,</span><br><span class="language-javascript">        type,</span><br><span class="language-javascript">        normalize,</span><br><span class="language-javascript">        stride,</span><br><span class="language-javascript">        offset</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> primitiveType = gl.<span class="hljs-property">TRIANGLES</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> count = <span class="hljs-number">3</span>;</span><br><span class="language-javascript">      gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> WebGL做的是一件简单的事，它仅仅运行用户提供的两个方法，一个顶点着色器和一个片段着色器， 去绘制点，线和三角形。WebGL API只做光栅化处理并且在概念上十分容易理解。</p>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快捷键 - Blender</title>
    <link href="/blender/Keymap/"/>
    <url>/blender/Keymap/</url>
    
    <content type="html"><![CDATA[<h3 id="全局快捷键"><a href="#全局快捷键" class="headerlink" title="全局快捷键"></a>全局快捷键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Ctrl-O</td><td align="center">打开文件</td></tr><tr><td align="center">Ctrl-S</td><td align="center">保存文件</td></tr><tr><td align="center">Shift-Ctrl-S</td><td align="center">另存为</td></tr><tr><td align="center">Ctrl-N</td><td align="center">新建</td></tr><tr><td align="center">Ctrl-Z</td><td align="center">撤销</td></tr><tr><td align="center">Shift-Ctrl-Z</td><td align="center">重做</td></tr><tr><td align="center">Ctrl-Q</td><td align="center">退出</td></tr><tr><td align="center">F1</td><td align="center">帮助</td></tr><tr><td align="center">F2</td><td align="center">重命名</td></tr><tr><td align="center">F3</td><td align="center">操作搜索</td></tr><tr><td align="center">F4(🤕)</td><td align="center">文件上下文(应该是指文件菜单的上下文吧？？？咋想不起还有这操作)</td></tr><tr><td align="center">Q</td><td align="center">快速收藏夹</td></tr><tr><td align="center">Ctrl-Spacebar</td><td align="center">窗口最大化切换</td></tr><tr><td align="center">Ctrl-Alt-Spacebar</td><td align="center">窗口全屏</td></tr><tr><td align="center">Spacebar</td><td align="center">被我改成调出工具栏了</td></tr><tr><td align="center">Shift-Spacebar</td><td align="center">播放动画</td></tr><tr><td align="center">Shift-Ctrl-Spacebar</td><td align="center">反向播放动画(这操作还没体验过)</td></tr></tbody></table><h3 id="通用编辑器快捷键"><a href="#通用编辑器快捷键" class="headerlink" title="通用编辑器快捷键"></a>通用编辑器快捷键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">全选</td></tr><tr><td align="center">Alt-A</td><td align="center">清空已选</td></tr><tr><td align="center">Ctrl-I</td><td align="center">反选</td></tr><tr><td align="center">H</td><td align="center">隐藏所选</td></tr><tr><td align="center">Alt-H</td><td align="center">显示隐藏项</td></tr><tr><td align="center">T</td><td align="center">切换工具栏</td></tr><tr><td align="center">N</td><td align="center">切换侧边栏</td></tr></tbody></table><h3 id="3D-视图快捷键"><a href="#3D-视图快捷键" class="headerlink" title="3D 视图快捷键"></a>3D 视图快捷键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Tab</td><td align="center">编辑模式切换</td></tr><tr><td align="center">Ctrl-Tab</td><td align="center">模式切换饼图菜单</td></tr><tr><td align="center">1-3</td><td align="center">编辑模式点、线、面切换</td></tr><tr><td align="center">&#96;</td><td align="center">视图导航饼图菜单</td></tr><tr><td align="center">Ctrl-&#96;(😩)</td><td align="center">切换 gizmos ？？？？</td></tr><tr><td align="center">Shift-&#96;(😩)</td><td align="center">步行&#x2F;飞行模式 ？？？</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上下文 - Github Actions</title>
    <link href="/github/gh-actions/context/"/>
    <url>/github/gh-actions/context/</url>
    
    <content type="html"><![CDATA[<h3 id="关于上下文"><a href="#关于上下文" class="headerlink" title="关于上下文"></a>关于上下文</h3><p>上下文是一种访问工作流运行、变量、运行器环境、作业及步骤相关信息的方式。 每个上下文都是一个包含属性的对象，属性可以是字符串或其他对象。</p><h5 id="使用表达式访问上下文"><a href="#使用表达式访问上下文" class="headerlink" title="使用表达式访问上下文"></a>使用表达式访问上下文</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&lt;context&gt;</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="访问上下文的两种方式"><a href="#访问上下文的两种方式" class="headerlink" title="访问上下文的两种方式"></a>访问上下文的两种方式</h5><ol><li>github[‘sha’]</li><li>github.sha</li></ol><h5 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h5><ol><li>默认环境变量：仅存在于执行作业的运行器上</li><li>上下文：你可以在工作流的任何时间点使用大多数上下文</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">prod-check:</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.ref</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;refs/heads/main&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Deploying to production server on branch $GITHUB_REF&quot;</span><br></code></pre></td></tr></table></figure><h5 id="可用的上下文"><a href="#可用的上下文" class="headerlink" title="可用的上下文"></a>可用的上下文</h5><ol><li><p>github:</p><p>上下文包含有关工作流运行和触发运行的事件的信息。 还可以读取环境变量中的大多数 github 上下文数据</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  action<span class="hljs-punctuation">:</span> 正在运行的操作的名称，或步骤的id<br>  action_path<span class="hljs-punctuation">:</span> 操作所在的路径<span class="hljs-punctuation">,</span><br>  action_ref<span class="hljs-punctuation">:</span> 对于执行操作的步骤，这是正在执行的操作的引用<span class="hljs-punctuation">,</span><br>  action_repository<span class="hljs-punctuation">:</span> 对于执行操作的步骤，这是操作的所有者和存储库名称<br>  action_status<span class="hljs-punctuation">:</span> 对于复合操作，这是复合操作的当前结果<br>  actor<span class="hljs-punctuation">:</span> 触发初始工作流运行的用户的用户名<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">CI</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>, <span class="hljs-string">pull_request</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">normal_ci:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">normal</span> <span class="hljs-string">CI</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./run-tests</span><br><br>  <span class="hljs-attr">pull_request_ci:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event_name</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;pull_request&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">PR</span> <span class="hljs-string">CI</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./run-additional-pr-ci</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>env</p><p>env 上下文包含已在工作流、作业或步骤中设置的变量</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  &lt;env_name&gt;<span class="hljs-punctuation">:</span> 特定环境变量的值<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Hi</span> <span class="hljs-string">Mascot</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">mascot:</span> <span class="hljs-string">Mona</span><br>  <span class="hljs-attr">super_duper_var:</span> <span class="hljs-string">totally_awesome</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">windows_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">windows-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hi $<span class="hljs-template-variable">&#123;&#123; env.mascot &#125;&#125;</span>&#x27;</span>  <span class="hljs-comment"># Hi Mona</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hi $<span class="hljs-template-variable">&#123;&#123; env.mascot &#125;&#125;</span>&#x27;</span>  <span class="hljs-comment"># Hi Octocat</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">mascot:</span> <span class="hljs-string">Octocat</span><br>  <span class="hljs-attr">linux_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">mascot:</span> <span class="hljs-string">Tux</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hi $<span class="hljs-template-variable">&#123;&#123; env.mascot &#125;&#125;</span>&#x27;</span>  <span class="hljs-comment"># Hi Tux</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>vars</p><p>vars 上下文的内容是配置变量名称与其值的映射。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-comment"># Setting an environment variable with the value of a configuration variable</span><br>  <span class="hljs-attr">env_var:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.ENV_CONTEXT_VAR</span> <span class="hljs-string">&#125;&#125;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">display-variables:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.JOB_NAME</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-comment"># You can use configuration variables with the `vars` context for dynamic jobs</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.USE_VARIABLES</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.RUNNER</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">environment:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.ENVIRONMENT_STAGE</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">variables</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        echo &quot;repository variable : $REPOSITORY_VAR&quot;</span><br><span class="hljs-string">        echo &quot;organization variable : $ORGANIZATION_VAR&quot;</span><br><span class="hljs-string">        echo &quot;overridden variable : $OVERRIDE_VAR&quot;</span><br><span class="hljs-string">        echo &quot;variable from shell environment : $env_var&quot;</span><br><span class="hljs-string"></span>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">REPOSITORY_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.REPOSITORY_VAR</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">ORGANIZATION_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.ORGANIZATION_VAR</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">OVERRIDE_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.OVERRIDE_VAR</span> <span class="hljs-string">&#125;&#125;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.HELLO_WORLD_STEP</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.HELLO_WORLD_ENABLED</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/hello-world-javascript-action@main</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">who-to-greet:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.GREET_NAME</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>job</p><p>job 上下文包含当前正在运行的作业相关信息</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 作业的容器相关信息</span><br>  container<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> 容器的 ID<span class="hljs-punctuation">,</span><br>    network<span class="hljs-punctuation">:</span> 容器网络的 ID<span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 为作业创建的服务容器</span><br>  services<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> 服务容器的 ID<span class="hljs-punctuation">,</span><br>    network<span class="hljs-punctuation">:</span> 服务容器网络的 ID<span class="hljs-punctuation">,</span><br>    ports<span class="hljs-punctuation">:</span> 服务容器显露的端口<span class="hljs-punctuation">,</span><br>    status<span class="hljs-punctuation">:</span> 作业的当前状态 success | failure | cancelled<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="5"><li><p>jobs</p><p>此示例可重用工作流使用 jobs 上下文设置可重用工作流的输出。 请注意输出如何从步骤流向作业，然后流向 workflow_call 触发器</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Reusable</span> <span class="hljs-string">workflow</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_call:</span><br>    <span class="hljs-comment"># Map the workflow outputs to job outputs</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">firstword:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The first output string&quot;</span><br>        <span class="hljs-attr">value:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">jobs.example_job.outputs.output1</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">secondword:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The second output string&quot;</span><br>        <span class="hljs-attr">value:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">jobs.example_job.outputs.output2</span> <span class="hljs-string">&#125;&#125;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example_job:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-string">output</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-comment"># Map the job outputs to step outputs</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">output1:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.step1.outputs.firstword</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">output2:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.step2.outputs.secondword</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">step1</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;firstword=hello&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_OUTPUT</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">step2</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;secondword=world&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_OUTPUT</span><br></code></pre></td></tr></table></figure><ol start="6"><li><p>steps</p><p>steps 上下文包含有关当前作业中已指定 id 且已运行的步骤的信息。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-string">random</span> <span class="hljs-string">failure</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">randomly-failing-job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-number">0</span> <span class="hljs-string">or</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">generate_number</span><br>        <span class="hljs-attr">run:</span>  <span class="hljs-string">echo</span> <span class="hljs-string">&quot;random_number=$(($RANDOM % 2))&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_OUTPUT</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pass</span> <span class="hljs-string">or</span> <span class="hljs-string">fail</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">if</span> [[ <span class="hljs-string">$<span class="hljs-template-variable">&#123;&#123; steps.generate_number.outputs.random_number &#125;&#125;</span></span> <span class="hljs-string">==</span> <span class="hljs-number">0</span> ]]<span class="hljs-string">;</span> <span class="hljs-string">then</span> <span class="hljs-string">exit</span> <span class="hljs-number">0</span><span class="hljs-string">;</span> <span class="hljs-string">else</span> <span class="hljs-string">exit</span> <span class="hljs-number">1</span><span class="hljs-string">;</span> <span class="hljs-string">fi</span><br></code></pre></td></tr></table></figure><ol start="7"><li><p>runner</p><p>runner 上下文包含正在执行当前作业的运行器相关信息。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">with</span> <span class="hljs-string">logs</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir $&#123;&#123; runner.temp &#125;&#125;/build_logs</span><br><span class="hljs-string">          ./build.sh --log-path $&#123;&#123; runner.temp &#125;&#125;/build_logs</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">logs</span> <span class="hljs-string">on</span> <span class="hljs-string">fail</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">failure()</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">failure</span> <span class="hljs-string">logs</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.temp</span> <span class="hljs-string">&#125;&#125;/build_logs</span><br></code></pre></td></tr></table></figure><ol start="8"><li><p>secrets</p><p>secrets 上下文的以下示例内容显示自动 GITHUB_TOKEN，以及可用于工作流运行的两个其他机密。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Pull</span> <span class="hljs-string">request</span> <span class="hljs-string">labeler</span><br><span class="hljs-attr">on:</span> [ <span class="hljs-string">pull_request_target</span> ]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">triage:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">read</span><br>      <span class="hljs-attr">pull-requests:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/labeler@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">repo-token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><ol start="9"><li><p>strategy</p><p>对于具有矩阵的工作流，strategy 上下文包含有关当前作业的矩阵执行策略的信息。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Test</span> <span class="hljs-string">matrix</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">test:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">test-group:</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>        <span class="hljs-attr">node:</span> [<span class="hljs-number">14</span>, <span class="hljs-number">16</span>]<br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">test</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">test-job-$&#123;&#123;</span> <span class="hljs-string">strategy.job-index</span> <span class="hljs-string">&#125;&#125;.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">logs</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">log</span> <span class="hljs-string">for</span> <span class="hljs-string">job</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">strategy.job-index</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">test-job-$&#123;&#123;</span> <span class="hljs-string">strategy.job-index</span> <span class="hljs-string">&#125;&#125;.txt</span><br></code></pre></td></tr></table></figure><ol start="10"><li><p>matrix</p><p>对于具有矩阵的工作流，matrix 上下文包含工作流程文件中定义的适用于当前作业的矩阵属性。 例如，如果使用 os 和 node 键配置矩阵，则 matrix 上下文对象包含 os 和 node 属性，该属性具有用于当前作业的值</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Test</span> <span class="hljs-string">matrix</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-latest</span>, <span class="hljs-string">windows-latest</span>]<br>        <span class="hljs-attr">node:</span> [<span class="hljs-number">14</span>, <span class="hljs-number">16</span>]<br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">ci</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">tests</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><ol start="11"><li><p>needs</p><p>needs 上下文包含定义为当前作业直接依赖项的所有作业的输出。 请注意，这不包括隐式依赖作业（例如依赖作业的依赖作业）</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">and</span> <span class="hljs-string">deploy</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">build_id:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.build_step.outputs.build_id</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">build_step</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          ./build</span><br><span class="hljs-string">          echo &quot;build_id=$BUILD_ID&quot; &gt;&gt; $GITHUB_OUTPUT</span><br><span class="hljs-string"></span>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">needs:</span> <span class="hljs-string">build</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">./deploy</span> <span class="hljs-string">--build</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.build.outputs.build_id</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">debug:</span><br>    <span class="hljs-attr">needs:</span> [<span class="hljs-string">build</span>, <span class="hljs-string">deploy</span>]<br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">failure()</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">./debug</span><br></code></pre></td></tr></table></figure><ol start="12"><li><p>inputs</p><p>inputs 上下文包含传递给操作可重用工作流或手动触发的工作流的输入属性。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Reusable</span> <span class="hljs-string">deploy</span> <span class="hljs-string">workflow</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_call:</span><br>    <span class="hljs-attr">inputs:</span><br>      <span class="hljs-attr">build_id:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">number</span><br>      <span class="hljs-attr">deploy_target:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">perform_deploy:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.perform_deploy</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">build</span> <span class="hljs-string">to</span> <span class="hljs-string">target</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">deploy</span> <span class="hljs-string">--build</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.build_id</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">--target</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.deploy_target</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>gh-actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本功能 - Gihub Actions</title>
    <link href="/github/gh-actions/basic-feture/"/>
    <url>/github/gh-actions/basic-feture/</url>
    
    <content type="html"><![CDATA[<h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example-job:</span><br>      <span class="hljs-attr">steps:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Connect</span> <span class="hljs-string">to</span> <span class="hljs-string">PostgreSQL</span><br>          <span class="hljs-attr">run:</span> <span class="hljs-string">node</span> <span class="hljs-string">client.js</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-attr">POSTGRES_HOST:</span> <span class="hljs-string">postgres</span><br>            <span class="hljs-attr">POSTGRES_PORT:</span> <span class="hljs-number">5432</span><br></code></pre></td></tr></table></figure><h3 id="添加脚本到工作流程"><a href="#添加脚本到工作流程" class="headerlink" title="添加脚本到工作流程"></a>添加脚本到工作流程</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example-job:</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">build</span> <span class="hljs-string">script</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./.github/scripts/build.sh</span><br>        <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span><br></code></pre></td></tr></table></figure><h3 id="在作业之间共享数据"><a href="#在作业之间共享数据" class="headerlink" title="在作业之间共享数据"></a>在作业之间共享数据</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example-job:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Save</span> <span class="hljs-string">output</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          expr 1 + 1 &gt; output.log</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">output</span> <span class="hljs-string">file</span>  <span class="hljs-comment"># 上传</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">output-log-file</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">output.log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Download</span> <span class="hljs-string">a</span> <span class="hljs-string">single</span> <span class="hljs-string">artifact</span>  <span class="hljs-comment"># 下载</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/download-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">output-log-file</span><br></code></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># $&#123;&#123; expression &#125;&#125;</span><br><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/hello-world-javascript-action@e76147da8e5c81eaf017dede5645551d4b94427b</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&lt;expression&gt;</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">MY_ENV_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&lt;expression&gt;</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">myNull:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-literal">null</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myBoolean:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-literal">false</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myIntegerNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">711</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myFloatNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">-9.2</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myHexNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">0xff</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myExponentialNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">-2.99e-2</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myString:</span> <span class="hljs-string">Mona</span> <span class="hljs-string">the</span> <span class="hljs-string">Octocat</span><br>  <span class="hljs-attr">myStringInBraces:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&#x27;It&#x27;</span><span class="hljs-string">&#x27;s open source!&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="运算符-JS-通用"><a href="#运算符-JS-通用" class="headerlink" title="运算符(JS 通用)"></a>运算符(JS 通用)</h5><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li><p>contains( search, item )</p></li><li><p>startsWith( searchString, searchValue )</p></li><li><p>endsWith( searchString, searchValue )</p></li><li><p>format( string, replaceValue0, replaceValue1, …, replaceValueN)</p></li><li><p>join( array, optionalSeparator )</p></li><li><p>toJSON(value)</p></li><li><p>fromJSON(value)</p></li><li><p>hashFiles(path)</p></li><li><p>success()  如果前面的步骤都没有失败或被取消，则返回 true。</p></li><li><p>always()</p></li><li><p>cancelled()</p></li><li><p>failure()</p></li><li> *  对象过滤器</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YAML">[<br>  &#123; <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-attr">&quot;quantity&quot;:</span> <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-attr">&quot;quantity&quot;:</span> <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-attr">&quot;quantity&quot;:</span> <span class="hljs-number">1</span> &#125;<br>]<br></code></pre></td></tr></table></figure><p>筛选器 fruits.*.name 返回数组 [ “apple”, “orange”, “pear” ]。</p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>gh-actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于 - Github Actions</title>
    <link href="/github/gh-actions/abstract/"/>
    <url>/github/gh-actions/abstract/</url>
    
    <content type="html"><![CDATA[<h3 id="Github-Actions-的组件"><a href="#Github-Actions-的组件" class="headerlink" title="Github Actions 的组件"></a>Github Actions 的组件</h3><h5 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h5><p>工作流程由签入到存储库的 YAML 文件定义，并在存储库中的事件触发时运行，也可以手动触发，或按定义的时间表触发。工作流程在存储库的 .github&#x2F;workflows 目录中定义，存储库可以有多个工作流程，每个工作流程都可以执行不同的任务集。</p><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>事件是存储库中触发工作流程运行的特定活动。 例如，当有人创建拉取请求、打开议题或将提交推送到存储库时。</p><h5 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h5><p>作业是工作流中在同一运行器上执行的一组步骤。 每个步骤要么是一个将要执行的 shell 脚本，要么是一个将要运行的动作。 步骤按顺序执行，并且相互依赖。 由于每个步骤都在同一运行器上执行，因此您可以将数据从一个步骤共享到另一个步骤。 例如，可以有一个生成应用程序的步骤，后跟一个测试已生成应用程序的步骤。</p><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p>操作是用于 GitHub Actions 平台的自定义应用程序，它执行复杂但经常重复的任务。 使用操作可帮助减少在工作流程文件中编写的重复代码量。</p><h5 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h5><p>运行程序是触发工作流时运行工作流的服务器。 每个运行器一次可以运行一个作业。 GitHub 提供 Ubuntu Linux、Microsoft Windows 和 macOS 运行器来运行您的工作流程；每个工作流程运行都在新预配的全新虚拟机中执行。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># .github/workflows/*.yml</span><br><br><span class="hljs-attr">name:</span> <span class="hljs-string">learn-github-actions</span>  <span class="hljs-comment"># 工作流名称</span><br><span class="hljs-attr">run-name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.actor</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">is</span> <span class="hljs-string">learning</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Actions</span>  <span class="hljs-comment"># 工作流运行名称</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]  <span class="hljs-comment"># 触发器，使用push事件</span><br><span class="hljs-attr">jobs:</span>  <span class="hljs-comment"># 工作流下的所有作业</span><br>  <span class="hljs-attr">check-bats-version:</span>  <span class="hljs-comment"># 定义一个作业名称</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>  <span class="hljs-comment"># 运行程序</span><br>    <span class="hljs-attr">steps:</span>  <span class="hljs-comment"># 作业下的所有步骤</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">-g</span> <span class="hljs-string">bats</span>  <span class="hljs-comment"># 操作(执行命令)</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">bats</span> <span class="hljs-string">-v</span><br></code></pre></td></tr></table></figure><h3 id="查找和自定义操作"><a href="#查找和自定义操作" class="headerlink" title="查找和自定义操作"></a>查找和自定义操作</h3><h5 id="使用-GitHub-Marketplace"><a href="#使用-GitHub-Marketplace" class="headerlink" title="使用 GitHub Marketplace"></a>使用 GitHub Marketplace</h5><h5 id="从相同仓库添加操作"><a href="#从相同仓库添加操作" class="headerlink" title="从相同仓库添加操作"></a>从相同仓库添加操作</h5><p>使用相对路径</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-- hello-world (repository)</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">__ .github</span><br><span class="hljs-string"></span>|<span class="hljs-string">       └── workflows</span><br><span class="hljs-string"></span>|<span class="hljs-string">           └── my-first-workflow.yml</span><br><span class="hljs-string"></span>|<span class="hljs-string">       └── actions</span><br><span class="hljs-string"></span>|<span class="hljs-string">           </span>|<span class="hljs-string">__ hello-world-action</span><br><span class="hljs-string"></span>|<span class="hljs-string">               └── action.yml</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># This step checks out a copy of your repository.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-comment"># This step references the directory that contains the action.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">./.github/actions/hello-world-action</span><br></code></pre></td></tr></table></figure><p>action.yml 文件用于提供操作的元数据。</p><h5 id="从不同仓库添加操作"><a href="#从不同仓库添加操作" class="headerlink" title="从不同仓库添加操作"></a>从不同仓库添加操作</h5><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">jobs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">my_first_job</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">steps</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: My first step</span><br>        <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">actions/setup-node@v3</span><br></code></pre></td></tr></table></figure><h5 id="对自定义操作使用发行版管理"><a href="#对自定义操作使用发行版管理" class="headerlink" title="对自定义操作使用发行版管理"></a>对自定义操作使用发行版管理</h5><ol><li>使用标签</li><li>使用 SHA</li><li>使用分支</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/javascript-action@mai</span><br></code></pre></td></tr></table></figure><h5 id="对操作使用输入和输出"><a href="#对操作使用输入和输出" class="headerlink" title="对操作使用输入和输出"></a>对操作使用输入和输出</h5>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>gh-actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC文档概览</title>
    <link href="/gis/dc/%E6%A6%82%E8%A7%88/"/>
    <url>/gis/dc/%E6%A6%82%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h3 id="基础构成"><a href="#基础构成" class="headerlink" title="基础构成"></a>基础构成</h3><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><ol><li>DC<blockquote><p>全局</p></blockquote></li><li>Cesium<blockquote><p>const { Cesium } &#x3D; DC.Namespace</p></blockquote></li><li>turf<blockquote><p>const { turf } &#x3D; DC.Namespace</p></blockquote></li></ol><h5 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h5><h5 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h5><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><h3 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h3><h5 id="Viewer"><a href="#Viewer" class="headerlink" title="Viewer"></a>Viewer</h5><h5 id="Popup"><a href="#Popup" class="headerlink" title="Popup"></a>Popup</h5><h5 id="ContextMenu"><a href="#ContextMenu" class="headerlink" title="ContextMenu"></a>ContextMenu</h5><h5 id="Tooltip"><a href="#Tooltip" class="headerlink" title="Tooltip"></a>Tooltip</h5><h5 id="MapSplit"><a href="#MapSplit" class="headerlink" title="MapSplit"></a>MapSplit</h5><h5 id="TilesetSplit"><a href="#TilesetSplit" class="headerlink" title="TilesetSplit"></a>TilesetSplit</h5><h5 id="SceneSplit"><a href="#SceneSplit" class="headerlink" title="SceneSplit"></a>SceneSplit</h5><h5 id="Compass"><a href="#Compass" class="headerlink" title="Compass"></a>Compass</h5><h5 id="ZoomController"><a href="#ZoomController" class="headerlink" title="ZoomController"></a>ZoomController</h5><h5 id="LocationBar"><a href="#LocationBar" class="headerlink" title="LocationBar"></a>LocationBar</h5><h5 id="DistanceLegend"><a href="#DistanceLegend" class="headerlink" title="DistanceLegend"></a>DistanceLegend</h5><h5 id="LoadingMask"><a href="#LoadingMask" class="headerlink" title="LoadingMask"></a>LoadingMask</h5><h5 id="SkyBox"><a href="#SkyBox" class="headerlink" title="SkyBox"></a>SkyBox</h5><h5 id="GroundSkyBox"><a href="#GroundSkyBox" class="headerlink" title="GroundSkyBox"></a>GroundSkyBox</h5><h5 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h5><h5 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h5><h5 id="TilesetStyle"><a href="#TilesetStyle" class="headerlink" title="TilesetStyle"></a>TilesetStyle</h5><h5 id="JulianDate"><a href="#JulianDate" class="headerlink" title="JulianDate"></a>JulianDate</h5><h5 id="Rect"><a href="#Rect" class="headerlink" title="Rect"></a>Rect</h5><h5 id="CallbackProperty"><a href="#CallbackProperty" class="headerlink" title="CallbackProperty"></a>CallbackProperty</h5><h5 id="Parse"><a href="#Parse" class="headerlink" title="Parse"></a>Parse</h5><h5 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h5><h5 id="CoordTransform"><a href="#CoordTransform" class="headerlink" title="CoordTransform"></a>CoordTransform</h5><h5 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h5><h5 id="Util"><a href="#Util" class="headerlink" title="Util"></a>Util</h5><h5 id="DomUtil"><a href="#DomUtil" class="headerlink" title="DomUtil"></a>DomUtil</h5><h3 id="地图地形"><a href="#地图地形" class="headerlink" title="地图地形"></a>地图地形</h3><h5 id="ImageryLayerFactory"><a href="#ImageryLayerFactory" class="headerlink" title="ImageryLayerFactory"></a>ImageryLayerFactory</h5><h5 id="TerrainFactory"><a href="#TerrainFactory" class="headerlink" title="TerrainFactory"></a>TerrainFactory</h5><h3 id="业务图层"><a href="#业务图层" class="headerlink" title="业务图层"></a>业务图层</h3><h5 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h5><h5 id="LayerGroup"><a href="#LayerGroup" class="headerlink" title="LayerGroup"></a>LayerGroup</h5><h5 id="VectorLayer"><a href="#VectorLayer" class="headerlink" title="VectorLayer"></a>VectorLayer</h5><h5 id="DynamicLayer"><a href="#DynamicLayer" class="headerlink" title="DynamicLayer"></a>DynamicLayer</h5><h5 id="PrimitiveLayer"><a href="#PrimitiveLayer" class="headerlink" title="PrimitiveLayer"></a>PrimitiveLayer</h5><h5 id="GroundPrimitiveLayer"><a href="#GroundPrimitiveLayer" class="headerlink" title="GroundPrimitiveLayer"></a>GroundPrimitiveLayer</h5><h5 id="TilesetLayer"><a href="#TilesetLayer" class="headerlink" title="TilesetLayer"></a>TilesetLayer</h5><h5 id="GeoJsonLayer"><a href="#GeoJsonLayer" class="headerlink" title="GeoJsonLayer"></a>GeoJsonLayer</h5><h5 id="TopoJsonLayer"><a href="#TopoJsonLayer" class="headerlink" title="TopoJsonLayer"></a>TopoJsonLayer</h5><h5 id="HtmlLayer"><a href="#HtmlLayer" class="headerlink" title="HtmlLayer"></a>HtmlLayer</h5><h5 id="CzmlLayer"><a href="#CzmlLayer" class="headerlink" title="CzmlLayer"></a>CzmlLayer</h5><h5 id="KmlLayer"><a href="#KmlLayer" class="headerlink" title="KmlLayer"></a>KmlLayer</h5><h5 id="GpxLayer"><a href="#GpxLayer" class="headerlink" title="GpxLayer"></a>GpxLayer</h5><h5 id="ClusterLayer"><a href="#ClusterLayer" class="headerlink" title="ClusterLayer"></a>ClusterLayer</h5><h5 id="HeatLayer"><a href="#HeatLayer" class="headerlink" title="HeatLayer"></a>HeatLayer</h5><h5 id="WindLayer"><a href="#WindLayer" class="headerlink" title="WindLayer"></a>WindLayer</h5><h5 id="S3MLayer"><a href="#S3MLayer" class="headerlink" title="S3MLayer"></a>S3MLayer</h5><h3 id="覆盖元素"><a href="#覆盖元素" class="headerlink" title="覆盖元素"></a>覆盖元素</h3><h5 id="Overlay"><a href="#Overlay" class="headerlink" title="Overlay"></a>Overlay</h5><h5 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h5><h5 id="Polyline"><a href="#Polyline" class="headerlink" title="Polyline"></a>Polyline</h5><h5 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h5><h5 id="Billboard"><a href="#Billboard" class="headerlink" title="Billboard"></a>Billboard</h5><h5 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h5><h5 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h5><h5 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h5><h5 id="Wall"><a href="#Wall" class="headerlink" title="Wall"></a>Wall</h5><h5 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h5><h5 id="Tileset"><a href="#Tileset" class="headerlink" title="Tileset"></a>Tileset</h5><h5 id="DivIcon"><a href="#DivIcon" class="headerlink" title="DivIcon"></a>DivIcon</h5><h5 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h5><h5 id="Corridor"><a href="#Corridor" class="headerlink" title="Corridor"></a>Corridor</h5><h5 id="Cylinder"><a href="#Cylinder" class="headerlink" title="Cylinder"></a>Cylinder</h5><h5 id="Ellipse"><a href="#Ellipse" class="headerlink" title="Ellipse"></a>Ellipse</h5><h5 id="Ellipsoid"><a href="#Ellipsoid" class="headerlink" title="Ellipsoid"></a>Ellipsoid</h5><h5 id="Plane"><a href="#Plane" class="headerlink" title="Plane"></a>Plane</h5><h5 id="PolylineVolume"><a href="#PolylineVolume" class="headerlink" title="PolylineVolume"></a>PolylineVolume</h5><h5 id="DynamicBillboard"><a href="#DynamicBillboard" class="headerlink" title="DynamicBillboard"></a>DynamicBillboard</h5><h5 id="DynamicModel"><a href="#DynamicModel" class="headerlink" title="DynamicModel"></a>DynamicModel</h5><h5 id="CustomBillboard"><a href="#CustomBillboard" class="headerlink" title="CustomBillboard"></a>CustomBillboard</h5><h5 id="CustomLabel"><a href="#CustomLabel" class="headerlink" title="CustomLabel"></a>CustomLabel</h5><h5 id="AttackArrow"><a href="#AttackArrow" class="headerlink" title="AttackArrow"></a>AttackArrow</h5><h5 id="DoubleArrow"><a href="#DoubleArrow" class="headerlink" title="DoubleArrow"></a>DoubleArrow</h5><h5 id="FineArrow"><a href="#FineArrow" class="headerlink" title="FineArrow"></a>FineArrow</h5><h5 id="GatheringPlace"><a href="#GatheringPlace" class="headerlink" title="GatheringPlace"></a>GatheringPlace</h5><h5 id="TailedAttackArrow"><a href="#TailedAttackArrow" class="headerlink" title="TailedAttackArrow"></a>TailedAttackArrow</h5><h5 id="BillboardPrimitive"><a href="#BillboardPrimitive" class="headerlink" title="BillboardPrimitive"></a>BillboardPrimitive</h5><h5 id="BounceBillboardPrimitive"><a href="#BounceBillboardPrimitive" class="headerlink" title="BounceBillboardPrimitive"></a>BounceBillboardPrimitive</h5><h5 id="DiffuseWallPrimitive"><a href="#DiffuseWallPrimitive" class="headerlink" title="DiffuseWallPrimitive"></a>DiffuseWallPrimitive</h5><h5 id="ElecEllipsoidPrimitive"><a href="#ElecEllipsoidPrimitive" class="headerlink" title="ElecEllipsoidPrimitive"></a>ElecEllipsoidPrimitive</h5><h5 id="FlowLinePrimitive"><a href="#FlowLinePrimitive" class="headerlink" title="FlowLinePrimitive"></a>FlowLinePrimitive</h5><h5 id="LabelPrimitive"><a href="#LabelPrimitive" class="headerlink" title="LabelPrimitive"></a>LabelPrimitive</h5><h5 id="LightCylinderPrimitive"><a href="#LightCylinderPrimitive" class="headerlink" title="LightCylinderPrimitive"></a>LightCylinderPrimitive</h5><h5 id="BounceLabelPrimitive"><a href="#BounceLabelPrimitive" class="headerlink" title="BounceLabelPrimitive"></a>BounceLabelPrimitive</h5><h5 id="ModelPrimitive"><a href="#ModelPrimitive" class="headerlink" title="ModelPrimitive"></a>ModelPrimitive</h5><h5 id="ModelCollectionPrimitive"><a href="#ModelCollectionPrimitive" class="headerlink" title="ModelCollectionPrimitive"></a>ModelCollectionPrimitive</h5><h5 id="PointPrimitive"><a href="#PointPrimitive" class="headerlink" title="PointPrimitive"></a>PointPrimitive</h5><h5 id="PolylinePrimitive"><a href="#PolylinePrimitive" class="headerlink" title="PolylinePrimitive"></a>PolylinePrimitive</h5><h5 id="ScanCirclePrimitive"><a href="#ScanCirclePrimitive" class="headerlink" title="ScanCirclePrimitive"></a>ScanCirclePrimitive</h5><h5 id="TrailLinePrimitive"><a href="#TrailLinePrimitive" class="headerlink" title="TrailLinePrimitive"></a>TrailLinePrimitive</h5><h5 id="WaterPrimitive"><a href="#WaterPrimitive" class="headerlink" title="WaterPrimitive"></a>WaterPrimitive</h5><h5 id="VideoPrimitive"><a href="#VideoPrimitive" class="headerlink" title="VideoPrimitive"></a>VideoPrimitive</h5><h3 id="材质属性"><a href="#材质属性" class="headerlink" title="材质属性"></a>材质属性</h3><h3 id="效果动画"><a href="#效果动画" class="headerlink" title="效果动画"></a>效果动画</h3><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><h3 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h3><h3 id="第三方集成"><a href="#第三方集成" class="headerlink" title="第三方集成"></a>第三方集成</h3>]]></content>
    
    
    <categories>
      
      <category>Gis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gis</tag>
      
      <tag>DC</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
