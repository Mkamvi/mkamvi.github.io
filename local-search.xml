<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>建模网格体属性 · 顶点组 - Blender</title>
    <link href="/blender/model/attr/vertex-groups/"/>
    <url>/blender/model/attr/vertex-groups/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>顶点组主要被用来标记属于网格物体或者 晶格 的顶点。想一下椅子的腿和门的铰链，或者一个角色的手、胳膊、四肢、头、脚等。此外，还可以给顶点组里的顶点指定不同的权重值 (范围介于 [ 0.0, 1.0 ] )。因此，顶点组有时候也被称作为 权重组</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>顶点组常用于骨架。但是在 Blender 中也可以用在很多其他方面，比如说：</p><ul><li>蒙皮</li><li>形态键</li><li>修改器</li><li>粒子生成器</li><li>物理仿真</li></ul><h2 id="顶点组面板"><a href="#顶点组面板" class="headerlink" title="顶点组面板"></a>顶点组面板</h2><h2 id="编辑顶点组"><a href="#编辑顶点组" class="headerlink" title="编辑顶点组"></a>编辑顶点组</h2><h2 id="指定顶点组"><a href="#指定顶点组" class="headerlink" title="指定顶点组"></a>指定顶点组</h2><h2 id="创建顶点组"><a href="#创建顶点组" class="headerlink" title="创建顶点组"></a>创建顶点组</h2><h4 id="顶点组面板控制"><a href="#顶点组面板控制" class="headerlink" title="顶点组面板控制"></a>顶点组面板控制</h4><h4 id="删除顶点组"><a href="#删除顶点组" class="headerlink" title="删除顶点组"></a>删除顶点组</h4><h4 id="锁定顶点组"><a href="#锁定顶点组" class="headerlink" title="锁定顶点组"></a>锁定顶点组</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建模网格体属性 · 物体数据 - Blender</title>
    <link href="/blender/model/attr/mesh-data/"/>
    <url>/blender/model/attr/mesh-data/</url>
    
    <content type="html"><![CDATA[<h2 id="物体数据"><a href="#物体数据" class="headerlink" title="物体数据"></a>物体数据</h2><h4 id="顶点组"><a href="#顶点组" class="headerlink" title="顶点组"></a>顶点组</h4><p>顶点组可用于为一些操作提供群组或权重组。一个物体可以有多个权重组，并且可以在 权重绘制 模式，或者在 编辑模式 通过面板赋值</p><h4 id="形态键"><a href="#形态键" class="headerlink" title="形态键"></a>形态键</h4><p>形态键可用于从一个形状变换至另一个形状</p><h4 id="UV-贴图"><a href="#UV-贴图" class="headerlink" title="UV 贴图"></a>UV 贴图</h4><p>UV映射用于将三维物体映射至二维平面，以确定纹理在三维物体中呈现的位置。不同的UV映射可用于不同的纹理</p><h4 id="颜色属性复制到所选面"><a href="#颜色属性复制到所选面" class="headerlink" title="颜色属性复制到所选面"></a>颜色属性复制到所选面</h4><p>颜色数据可以直接应用于物体的顶点，而不是使用纹理或材料。有两种模式可以绘制颜色属性。使用 顶点绘制 模式，通过启用标题中的绘制掩码来绘制每个面的角落。这对于在低聚物的颜色属性中实现尖锐的边缘很有用。或者使用 “雕刻” 模式，在更高的顶点数量上进行绘制</p><h6 id="颜色属性节点"><a href="#颜色属性节点" class="headerlink" title="颜色属性节点"></a>颜色属性节点</h6><h4 id="颜色属性"><a href="#颜色属性" class="headerlink" title="颜色属性"></a>颜色属性</h4><h4 id="表面贴图"><a href="#表面贴图" class="headerlink" title="表面贴图"></a>表面贴图</h4><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>属性是存储在每个网格元素中的数据。每个属性都有一个数据类型、域和名称。这个面板只列出自定义属性，不包括所有的内置属性，如 位置 和其他属性，如顶点组</p><h4 id="法向"><a href="#法向" class="headerlink" title="法向"></a>法向</h4><p>几何学中，法线是指垂直于某个元素的一个方向或者直线，该元素通常是一个三角形或面，但也可以是一条直线，曲线 上一点的切线，或者曲面上一点的相切面。法线有助于确定网格的着色方式</p><h4 id="纹理空间"><a href="#纹理空间" class="headerlink" title="纹理空间"></a>纹理空间</h4><p>每个物体都有一个自动生成的UV映射,可以在此处调整这些映射</p><h4 id="重构网格"><a href="#重构网格" class="headerlink" title="重构网格"></a>重构网格</h4><p>网格物体，尤其是已建模为表示活体物体的网格，通常具有不是特别均匀的几何结构。如果物体需要 绑定，或者3D 打印之类的工作流程需要更简单几何形状，则可能导致问题。重构网格是一种使用更均匀的拓扑重建几何图形的技术。按照定义的分辨率，重构网格可以添加或删除拓扑量。重构网格对于 雕刻 尤其有用，可在初始形状基础上生成更好的拓扑</p><h4 id="几何数据"><a href="#几何数据" class="headerlink" title="几何数据"></a>几何数据</h4><p>可以有不同的自定义数据连接到网格物体,这些数据经常在软件内部被使用,也可以导出</p>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建模网格体编辑 · UV工具 - Blender</title>
    <link href="/blender/model/mesh/edit/uv-tool/"/>
    <url>/blender/model/mesh/edit/uv-tool/</url>
    
    <content type="html"><![CDATA[<h2 id="UV-工具-标题栏-‣-UV-U"><a href="#UV-工具-标题栏-‣-UV-U" class="headerlink" title="UV 工具(标题栏 ‣ UV, U)"></a>UV 工具(标题栏 ‣ UV, <kbd>U</kbd>)</h2><p>Blender 提供了几种 UV 映射方式。比较简单的投影方法使用三维空间到二维空间的映射公式，将点的位置朝点&#x2F;轴面确定的表面插值</p><h2 id="展开-UV-‣-展开-U"><a href="#展开-UV-‣-展开-U" class="headerlink" title="展开(UV ‣ 展开, U)"></a>展开(UV ‣ 展开, <kbd>U</kbd>)</h2><p>展平沿 缝合线 切开后的网格</p><h2 id="智能-UV-投射-UV-‣-智能-UV-投影-U"><a href="#智能-UV-投射-UV-‣-智能-UV-投影-U" class="headerlink" title="智能 UV 投射(UV ‣ 智能 UV 投影, U)"></a>智能 UV 投射(UV ‣ 智能 UV 投影, <kbd>U</kbd>)</h2><p>根据角度阈值切割网格体</p><h2 id="光照贴图拼排-UV-‣-光照贴图拼排-U"><a href="#光照贴图拼排-UV-‣-光照贴图拼排-U" class="headerlink" title="光照贴图拼排(UV ‣ 光照贴图拼排, U)"></a>光照贴图拼排(UV ‣ 光照贴图拼排, <kbd>U</kbd>)</h2><p>将选定的面打包到 UV 边界，主要用于实时渲染</p><h2 id="沿活动四边面展开-UV-‣-沿活动四边面展开-U"><a href="#沿活动四边面展开-UV-‣-沿活动四边面展开-U" class="headerlink" title="沿活动四边面展开(UV ‣ 沿活动四边面展开, U)"></a>沿活动四边面展开(UV ‣ 沿活动四边面展开, <kbd>U</kbd>)</h2><h2 id="块面投影-UV-‣-块面投影-U"><a href="#块面投影-UV-‣-块面投影-U" class="headerlink" title="块面投影(UV ‣ 块面投影, U)"></a>块面投影(UV ‣ 块面投影, <kbd>U</kbd>)</h2><p>块面映射将网格映射到展开的立方体表面。块面映射将网格投影至 6 个分离的平面，创建 6 个 UV 孤岛。在 UV&#x2F;图像编辑器中，会产生重叠，不过可以移动</p><h2 id="柱面投影-柱面投影-U"><a href="#柱面投影-柱面投影-U" class="headerlink" title="柱面投影(柱面投影, U)"></a>柱面投影(柱面投影, <kbd>U</kbd>)</h2><p>通常，要打开一个圆柱体（管子），就好像你纵向切开它并将其折叠平整一样，Blender 希望视图是垂直的，管子 “向上” 站立。不同的视图会以不同的方式将管投射到 UV 贴图上，如果使用，则会扭曲图像</p><h2 id="球面投影-UV-‣-块面投影-U"><a href="#球面投影-UV-‣-块面投影-U" class="headerlink" title="球面投影(UV ‣ 块面投影, U)"></a>球面投影(UV ‣ 块面投影, <kbd>U</kbd>)</h2><h2 id="从视角投影-UV-‣-从视角投影-U"><a href="#从视角投影-UV-‣-从视角投影-U" class="headerlink" title="从视角投影(UV ‣ 从视角投影, U)"></a>从视角投影(UV ‣ 从视角投影, <kbd>U</kbd>)</h2><h2 id="重置-UV-‣-重置-U"><a href="#重置-UV-‣-重置-U" class="headerlink" title="重置(UV ‣ 重置, U)"></a>重置(UV ‣ 重置, <kbd>U</kbd>)</h2><p>重置UV，将每个面映射为填充整个UV栅格，赋予每个面同样的映射</p>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将NodeJS应用打成一个可执行文件</title>
    <link href="/js-libs/pkg/"/>
    <url>/js-libs/pkg/</url>
    
    <content type="html"><![CDATA[<h3 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pkg [options] &lt;input&gt;<br></code></pre></td></tr></table></figure><h3 id="核心参数说明"><a href="#核心参数说明" class="headerlink" title="核心参数说明"></a>核心参数说明</h3><ul><li>-t: 指定目标类型，多个类型可用逗号分隔添加</li><li>-c: 指定配置文件</li><li>–out-path: 指定输出目录</li><li>-d: 显示 debug 信息，可以看到虚拟目内的文件结构，但因为加载了 node_modules，有点没法看</li></ul><h3 id="目标类型"><a href="#目标类型" class="headerlink" title="目标类型"></a>目标类型</h3><p>target 分为三个部分，使用中划线分隔：[node 版本]-[平台]-[系统架构]</p><p>示例：node12-win-x64</p><ul><li>node 版本: (node8), node10, node12, node14, node16 or latest</li><li>平台: alpine, linux, linuxstatic, win, macos, (freebsd)</li><li>系统架构: x64, arm64, (armv6, armv7)</li></ul><p>Mac 和 Window 系统一般为：</p><ul><li>Mac: node14-macos-arm64</li><li>Window: node14-win-x64</li></ul><p><em>Tips: Mac支持打出Window版本执行文件</em></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>在 package.json 中加入如下部分：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;pkg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build/**/*.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;assets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-string">&quot;assets&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;images&quot;</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;targets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;node14-macos-arm64&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;node14-win-x64&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outputPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dist&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>scripts: 这个没看懂</li><li>assets: 指定需要额外打包的外部资源</li></ul><h3 id="快照文件系统"><a href="#快照文件系统" class="headerlink" title="快照文件系统"></a>快照文件系统</h3><p>在打包的过程中，pkg会收集项目文件并把它们放到可执行文件内部(叫做快照)，在应用执行过程中可以获取所有快照内文件</p><p>快照结构：&#x2F;snapshot&#x2F;项目名称&#x2F;..资源路径</p>]]></content>
    
    
    <categories>
      
      <category>js-libs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js-libs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建模网格体编辑 · 面工具 - Blender</title>
    <link href="/blender/model/mesh/edit/face-tool/"/>
    <url>/blender/model/mesh/edit/face-tool/</url>
    
    <content type="html"><![CDATA[<h2 id="挤出面-网格-‣-挤出-‣-各面-E"><a href="#挤出面-网格-‣-挤出-‣-各面-E" class="headerlink" title="挤出面(网格 ‣ 挤出 ‣ 各面, E)"></a>挤出面(网格 ‣ 挤出 ‣ 各面, <kbd>E</kbd>)</h2><h2 id="沿法向挤出面-网格-‣-挤出-‣-各面-Alt-E"><a href="#沿法向挤出面-网格-‣-挤出-‣-各面-Alt-E" class="headerlink" title="沿法向挤出面(网格 ‣ 挤出 ‣ 各面, Alt-E)"></a>沿法向挤出面(网格 ‣ 挤出 ‣ 各面, <kbd>Alt-E</kbd>)</h2><h2 id="挤出各个面-网格-‣-挤出-‣-各面-Alt-E-快捷键咋还重复了呢"><a href="#挤出各个面-网格-‣-挤出-‣-各面-Alt-E-快捷键咋还重复了呢" class="headerlink" title="挤出各个面(网格 ‣ 挤出 ‣ 各面, Alt-E, 快捷键咋还重复了呢 ???)"></a>挤出各个面(网格 ‣ 挤出 ‣ 各面, <kbd>Alt-E</kbd>, 快捷键咋还重复了呢 ???)</h2><h2 id="内插面-面-‣-内插面-I"><a href="#内插面-面-‣-内插面-I" class="headerlink" title="内插面(面 ‣ 内插面, I)"></a>内插面(面 ‣ 内插面, <kbd>I</kbd>)</h2><h2 id="尖分面-面-‣-尖分面"><a href="#尖分面-面-‣-尖分面" class="headerlink" title="尖分面(面 ‣ 尖分面, ?)"></a>尖分面(面 ‣ 尖分面, ?)</h2><h2 id="三角面-面-‣-面三角化-Ctrl-T"><a href="#三角面-面-‣-面三角化-Ctrl-T" class="headerlink" title="三角面(面 ‣ 面三角化, Ctrl-T)"></a>三角面(面 ‣ 面三角化, <kbd>Ctrl-T</kbd>)</h2><h2 id="三角面-四角面-面-‣-三角面-gt-四边面-Alt-J"><a href="#三角面-四角面-面-‣-三角面-gt-四边面-Alt-J" class="headerlink" title="三角面-四角面(面 ‣ 三角面 -&gt; 四边面, Alt-J)"></a>三角面-四角面(面 ‣ 三角面 -&gt; 四边面, <kbd>Alt-J</kbd>)</h2><p>此工具需要至少两个相邻三角面，才能生成一个四边面。即使选中偶数个三角面，也可能无法获得全部的四边面。事实上，此工具会从现有的三角面尽可能创建尽可能多的偶数个方形的四边面，这也意味着一些三角面会保留</p><h2 id="面实体化-面-‣-面实体化"><a href="#面实体化-面-‣-面实体化" class="headerlink" title="面实体化(面 ‣ 面实体化)"></a>面实体化(面 ‣ 面实体化)</h2><h2 id="线框-面-‣-完美建面"><a href="#线框-面-‣-完美建面" class="headerlink" title="线框(面 ‣ 完美建面)"></a>线框(面 ‣ 完美建面)</h2><h2 id="填充-面-‣-填充-Alt-F"><a href="#填充-面-‣-填充-Alt-F" class="headerlink" title="填充(面 ‣ 填充, Alt-F)"></a>填充(面 ‣ 填充, <kbd>Alt-F</kbd>)</h2><h2 id="栅格填充-面-‣-栅格填充"><a href="#栅格填充-面-‣-栅格填充" class="headerlink" title="栅格填充(面 ‣ 栅格填充)"></a>栅格填充(面 ‣ 栅格填充)</h2><p>栅格填充 使用一对相连的循环边，或单个闭合的循环边，沿四周几何形状填充栅格</p><h2 id="完美建面-面-‣-完美建面"><a href="#完美建面-面-‣-完美建面" class="headerlink" title="完美建面(面 ‣ 完美建面)"></a>完美建面(面 ‣ 完美建面)</h2><p>减面</p><h2 id="交集·切割-面-‣-交集（切割）"><a href="#交集·切割-面-‣-交集（切割）" class="headerlink" title="交集·切割(面 ‣ 交集（切割）)"></a>交集·切割(面 ‣ 交集（切割）)</h2><h2 id="交集·布尔-面-‣-交集（布尔）"><a href="#交集·布尔-面-‣-交集（布尔）" class="headerlink" title="交集·布尔(面 ‣ 交集（布尔）)"></a>交集·布尔(面 ‣ 交集（布尔）)</h2><h2 id="焊接边线到面-面-‣-焊接边线到面"><a href="#焊接边线到面-面-‣-焊接边线到面" class="headerlink" title="焊接边线到面(面 ‣ 焊接边线到面)"></a>焊接边线到面(面 ‣ 焊接边线到面)</h2><h2 id="平滑着色与平直着色"><a href="#平滑着色与平直着色" class="headerlink" title="平滑着色与平直着色"></a>平滑着色与平直着色</h2><h4 id="平滑着色-物体（Object-‣-平滑着色-Shade-Smooth）"><a href="#平滑着色-物体（Object-‣-平滑着色-Shade-Smooth）" class="headerlink" title="平滑着色(物体（Object) ‣ 平滑着色(Shade Smooth）)"></a>平滑着色(物体（Object) ‣ 平滑着色(Shade Smooth）)</h4><h4 id="平直着色-物体（Object-‣-平直着色-Shade-Flat）"><a href="#平直着色-物体（Object-‣-平直着色-Shade-Flat）" class="headerlink" title="平直着色(物体（Object) ‣ 平直着色(Shade Flat）)"></a>平直着色(物体（Object) ‣ 平直着色(Shade Flat）)</h4><h2 id="面数据"><a href="#面数据" class="headerlink" title="面数据"></a>面数据</h2><h4 id="旋转颜色-面-‣-面数据-‣旋转颜色"><a href="#旋转颜色-面-‣-面数据-‣旋转颜色" class="headerlink" title="旋转颜色(面 ‣ 面数据 ‣旋转颜色)"></a>旋转颜色(面 ‣ 面数据 ‣旋转颜色)</h4><h4 id="翻转颜色-面-‣-面数据-‣反转颜色"><a href="#翻转颜色-面-‣-面数据-‣反转颜色" class="headerlink" title="翻转颜色(面 ‣ 面数据 ‣反转颜色)"></a>翻转颜色(面 ‣ 面数据 ‣反转颜色)</h4><h4 id="旋转UV-面-‣-面数据-‣-旋转-UV"><a href="#旋转UV-面-‣-面数据-‣-旋转-UV" class="headerlink" title="旋转UV (面 ‣ 面数据 ‣ 旋转 UV)"></a>旋转UV (面 ‣ 面数据 ‣ 旋转 UV)</h4><h4 id="翻转UV-面-‣-面数据-‣反转-UV"><a href="#翻转UV-面-‣-面数据-‣反转-UV" class="headerlink" title="翻转UV (面 ‣ 面数据 ‣反转 UV)"></a>翻转UV (面 ‣ 面数据 ‣反转 UV)</h4><h4 id="翻转四边形细分-面-‣-面数据-‣-翻转四边形细分"><a href="#翻转四边形细分-面-‣-面数据-‣-翻转四边形细分" class="headerlink" title="翻转四边形细分(面 ‣ 面数据 ‣ 翻转四边形细分)"></a>翻转四边形细分(面 ‣ 面数据 ‣ 翻转四边形细分)</h4><h4 id="标记自由面-面-‣面数据-‣-标记自由面"><a href="#标记自由面-面-‣面数据-‣-标记自由面" class="headerlink" title="标记自由面 (面 ‣面数据 ‣ 标记自由面)"></a>标记自由面 (面 ‣面数据 ‣ 标记自由面)</h4><h4 id="清除自由面-面-‣面数据-‣-清除自由面"><a href="#清除自由面-面-‣面数据-‣-清除自由面" class="headerlink" title="清除自由面 (面 ‣面数据 ‣ 清除自由面)"></a>清除自由面 (面 ‣面数据 ‣ 清除自由面)</h4>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建模网格体编辑 · 边工具 - Blender</title>
    <link href="/blender/model/mesh/edit/edge-tool/"/>
    <url>/blender/model/mesh/edit/edge-tool/</url>
    
    <content type="html"><![CDATA[<h2 id="挤出边线-边-‣-挤出边线-Alt-E"><a href="#挤出边线-边-‣-挤出边线-Alt-E" class="headerlink" title="挤出边线(边 ‣ 挤出边线, Alt-E)"></a>挤出边线(边 ‣ 挤出边线, <kbd>Alt-E</kbd>)</h2><h2 id="边线倒角"><a href="#边线倒角" class="headerlink" title="边线倒角"></a>边线倒角</h2><h4 id="边线倒角-边-‣-边线倒角-Ctrl-B"><a href="#边线倒角-边-‣-边线倒角-Ctrl-B" class="headerlink" title="边线倒角(边 ‣ 边线倒角, Ctrl-B)"></a>边线倒角(边 ‣ 边线倒角, <kbd>Ctrl-B</kbd>)</h4><h4 id="顶点滑移-顶点-‣-滑移顶点-Shift-Ctrl-B"><a href="#顶点滑移-顶点-‣-滑移顶点-Shift-Ctrl-B" class="headerlink" title="顶点滑移(顶点 ‣ 滑移顶点, Shift-Ctrl-B"></a>顶点滑移(顶点 ‣ 滑移顶点, <kbd>Shift-Ctrl-B</kbd></h4><h2 id="桥接循环边-边-‣-桥接循环边"><a href="#桥接循环边-边-‣-桥接循环边" class="headerlink" title="桥接循环边(边 ‣ 桥接循环边)"></a>桥接循环边(边 ‣ 桥接循环边)</h2><h2 id="螺旋-边-‣-螺旋"><a href="#螺旋-边-‣-螺旋" class="headerlink" title="螺旋(边 ‣ 螺旋)"></a>螺旋(边 ‣ 螺旋)</h2><h2 id="细分-边-‣-细分"><a href="#细分-边-‣-细分" class="headerlink" title="细分(边 ‣ 细分)"></a>细分(边 ‣ 细分)</h2><h2 id="细分并排边-边-‣-细分并排边"><a href="#细分并排边-边-‣-细分并排边" class="headerlink" title="细分并排边(边 ‣ 细分并排边)"></a>细分并排边(边 ‣ 细分并排边)</h2><h2 id="反细分-边-‣-反细分"><a href="#反细分-边-‣-反细分" class="headerlink" title="反细分(边 ‣ 反细分)"></a>反细分(边 ‣ 反细分)</h2><h2 id="旋转边线-边-‣-顺时针旋转边-x2F-逆时针旋转边"><a href="#旋转边线-边-‣-顺时针旋转边-x2F-逆时针旋转边" class="headerlink" title="旋转边线(边 ‣ 顺时针旋转边&#x2F;逆时针旋转边)"></a>旋转边线(边 ‣ 顺时针旋转边&#x2F;逆时针旋转边)</h2><h2 id="滑移边线-边-‣-滑移边线"><a href="#滑移边线-边-‣-滑移边线" class="headerlink" title="滑移边线(边 ‣ 滑移边线)"></a>滑移边线(边 ‣ 滑移边线)</h2><h2 id="偏移边线并滑移-边-‣-偏移边线并滑移-Shift-Ctrl-R"><a href="#偏移边线并滑移-边-‣-偏移边线并滑移-Shift-Ctrl-R" class="headerlink" title="偏移边线并滑移(边 ‣ 偏移边线并滑移, Shift-Ctrl-R)"></a>偏移边线并滑移(边 ‣ 偏移边线并滑移, <kbd>Shift-Ctrl-R</kbd>)</h2><h2 id="环切并滑移-边-‣-环切并滑移-Ctrl-R"><a href="#环切并滑移-边-‣-环切并滑移-Ctrl-R" class="headerlink" title="环切并滑移(边 ‣ 环切并滑移, Ctrl-R)"></a>环切并滑移(边 ‣ 环切并滑移, <kbd>Ctrl-R</kbd>)</h2><h2 id="边数据"><a href="#边数据" class="headerlink" title="边数据"></a>边数据</h2><h4 id="折痕边-折痕边-Shift-E"><a href="#折痕边-折痕边-Shift-E" class="headerlink" title="折痕边(折痕边, Shift-E)"></a>折痕边(折痕边, <kbd>Shift-E</kbd>)</h4><h4 id="倒角边权重-边·边线倒角"><a href="#倒角边权重-边·边线倒角" class="headerlink" title="倒角边权重(边·边线倒角)"></a>倒角边权重(边·边线倒角)</h4><h4 id="标记缝合边-amp-清除缝合边-边-‣-标记缝合线-x2F-清除缝合线"><a href="#标记缝合边-amp-清除缝合边-边-‣-标记缝合线-x2F-清除缝合线" class="headerlink" title="标记缝合边&amp;清除缝合边(边 ‣ 标记缝合线&#x2F;清除缝合线)"></a>标记缝合边&amp;清除缝合边(边 ‣ 标记缝合线&#x2F;清除缝合线)</h4><h4 id="标记锐变-amp-清除锐边-边-‣-标记锐边-x2F-清除锐边"><a href="#标记锐变-amp-清除锐边-边-‣-标记锐边-x2F-清除锐边" class="headerlink" title="标记锐变&amp;清除锐边(边 ‣ 标记锐边&#x2F;清除锐边)"></a>标记锐变&amp;清除锐边(边 ‣ 标记锐边&#x2F;清除锐边)</h4>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建模网格体编辑 · 顶点工具 - Blender</title>
    <link href="/blender/model/mesh/edit/vertex-tool/"/>
    <url>/blender/model/mesh/edit/vertex-tool/</url>
    
    <content type="html"><![CDATA[<h2 id="挤出顶点-顶点-‣-挤出顶点-Alt-E"><a href="#挤出顶点-顶点-‣-挤出顶点-Alt-E" class="headerlink" title="挤出顶点(顶点 ‣ 挤出顶点, Alt-E)"></a>挤出顶点(顶点 ‣ 挤出顶点, <kbd>Alt-E</kbd>)</h2><h2 id="挤出到光标-Ctrl-鼠标右键"><a href="#挤出到光标-Ctrl-鼠标右键" class="headerlink" title="挤出到光标(Ctrl-鼠标右键)"></a>挤出到光标(<kbd>Ctrl-鼠标右键</kbd>)</h2><h2 id="顶点倒角"><a href="#顶点倒角" class="headerlink" title="顶点倒角"></a>顶点倒角</h2><h3 id="边线倒角-边-‣-边线倒角-Ctrl-B"><a href="#边线倒角-边-‣-边线倒角-Ctrl-B" class="headerlink" title="边线倒角(边 ‣ 边线倒角, Ctrl-B)"></a>边线倒角(边 ‣ 边线倒角, <kbd>Ctrl-B</kbd>)</h3><h3 id="滑移顶点-顶点-‣-滑移顶点-Shift-Ctrl-B"><a href="#滑移顶点-顶点-‣-滑移顶点-Shift-Ctrl-B" class="headerlink" title="滑移顶点(顶点 ‣ 滑移顶点, Shift-Ctrl-B)"></a>滑移顶点(顶点 ‣ 滑移顶点, <kbd>Shift-Ctrl-B</kbd>)</h3><h2 id="从顶点创建边-x2F-面-顶点-‣从顶点创建边-x2F-面-F"><a href="#从顶点创建边-x2F-面-顶点-‣从顶点创建边-x2F-面-F" class="headerlink" title="从顶点创建边&#x2F;面(顶点 ‣从顶点创建边&#x2F;面, F)"></a>从顶点创建边&#x2F;面(顶点 ‣从顶点创建边&#x2F;面, <kbd>F</kbd>)</h2><h2 id="连接顶点路径-顶点-‣-连接顶点路径-J"><a href="#连接顶点路径-顶点-‣-连接顶点路径-J" class="headerlink" title="连接顶点路径(顶点 ‣ 连接顶点路径, J)"></a>连接顶点路径(顶点 ‣ 连接顶点路径, <kbd>J</kbd>)</h2><h2 id="连接顶点对-顶点-‣-连接顶点对"><a href="#连接顶点对-顶点-‣-连接顶点对" class="headerlink" title="连接顶点对(顶点 ‣ 连接顶点对)"></a>连接顶点对(顶点 ‣ 连接顶点对)</h2><p>该工具通过在选定的顶点之间创建边并分割面来连接它们。它可以同时用于多个面。这个工具和<strong>连接顶点路径</strong>的主要区别是，这个工具忽略选择顺序，连接所有选定的共享一个面的顶点</p><h2 id="断离顶点-顶点-‣-断离顶点-V"><a href="#断离顶点-顶点-‣-断离顶点-V" class="headerlink" title="断离顶点(顶点 ‣ 断离顶点, V)"></a>断离顶点(顶点 ‣ 断离顶点, <kbd>V</kbd>)</h2><h2 id="断离顶点并填充-顶点-‣-断离顶点并填充-Alt-V"><a href="#断离顶点并填充-顶点-‣-断离顶点并填充-Alt-V" class="headerlink" title="断离顶点并填充(顶点 ‣ 断离顶点并填充, Alt-V)"></a>断离顶点并填充(顶点 ‣ 断离顶点并填充, <kbd>Alt-V</kbd>)</h2><h2 id="断离顶点并延长-顶点-‣-断离顶点并延长-Alt-D"><a href="#断离顶点并延长-顶点-‣-断离顶点并延长-Alt-D" class="headerlink" title="断离顶点并延长(顶点 ‣ 断离顶点并延长, Alt-D)"></a>断离顶点并延长(顶点 ‣ 断离顶点并延长, Alt-D)</h2><h2 id="滑移顶点-顶点-‣-滑移顶点-Shift-V"><a href="#滑移顶点-顶点-‣-滑移顶点-Shift-V" class="headerlink" title="滑移顶点(顶点 ‣ 滑移顶点, Shift-V)"></a>滑移顶点(顶点 ‣ 滑移顶点, Shift-V)</h2><h2 id="平滑顶点-顶点-‣-平滑顶点"><a href="#平滑顶点-顶点-‣-平滑顶点" class="headerlink" title="平滑顶点(顶点 ‣ 平滑顶点)"></a>平滑顶点(顶点 ‣ 平滑顶点)</h2><h2 id="拉普拉斯平滑顶点-上下文菜单-‣-拉普拉斯平滑顶点"><a href="#拉普拉斯平滑顶点-上下文菜单-‣-拉普拉斯平滑顶点" class="headerlink" title="拉普拉斯平滑顶点(上下文菜单 ‣ 拉普拉斯平滑顶点)"></a>拉普拉斯平滑顶点(上下文菜单 ‣ 拉普拉斯平滑顶点)</h2><p>拉普拉斯平滑使用了另一种平滑算法，它能更好地保留较大的细节，这样就能保留网格的整体形状。拉普拉斯平滑在 Blender 中有相应的网格操作项和非破坏性修改器</p><h2 id="从形状混合"><a href="#从形状混合" class="headerlink" title="从形状混合(???)"></a>从形状混合(???)</h2><p>将 形态建 的效果混合到形状中</p><h2 id="传递到形状"><a href="#传递到形状" class="headerlink" title="传递到形状"></a>传递到形状</h2><p>将所选顶点的坐标应用到其他所有 形态键</p><h2 id="顶点组"><a href="#顶点组" class="headerlink" title="顶点组"></a>顶点组</h2><h2 id="钩挂-顶点-‣-钩挂-Ctrl-H"><a href="#钩挂-顶点-‣-钩挂-Ctrl-H" class="headerlink" title="钩挂(顶点 ‣ 钩挂, Ctrl-H)"></a>钩挂(顶点 ‣ 钩挂, <kbd>Ctrl-H</kbd>)</h2><h2 id="创建父级顶点-顶点-‣-创建父级顶点-Ctrl-P"><a href="#创建父级顶点-顶点-‣-创建父级顶点-Ctrl-P" class="headerlink" title="创建父级顶点(顶点 ‣ 创建父级顶点, Ctrl-P)"></a>创建父级顶点(顶点 ‣ 创建父级顶点, Ctrl-P)</h2>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建模网格体编辑 · 网格工具 - Blender</title>
    <link href="/blender/model/mesh/edit/mesh-tool/"/>
    <url>/blender/model/mesh/edit/mesh-tool/</url>
    
    <content type="html"><![CDATA[<h2 id="访问网格工具"><a href="#访问网格工具" class="headerlink" title="访问网格工具"></a>访问网格工具</h2><ol><li><kbd>Ctrf-f</kbd> : 面工具菜单</li><li><kbd>Ctrl-e</kbd> : 边工具菜单</li><li><kbd>Ctrl-v</kbd> : 顶点工具菜单</li></ol><h2 id="网格工具"><a href="#网格工具" class="headerlink" title="网格工具"></a>网格工具</h2><h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><ol><li>移动(G)、旋转(R)、缩放(S)</li></ol><h5 id="变换面板"><a href="#变换面板" class="headerlink" title="变换面板"></a>变换面板</h5><h5 id="球形化-网格·变换·球形化-Shift-Alt-S"><a href="#球形化-网格·变换·球形化-Shift-Alt-S" class="headerlink" title="球形化(网格·变换·球形化, Shift-Alt-S)"></a>球形化(网格·变换·球形化, <kbd>Shift-Alt-S</kbd>)</h5><p>球形化 变换会赋予选中元素球形特征。</p><h5 id="切变-物体-x2F-网格-x2F-曲线-x2F-曲面-‣-变换-‣-切变-Shift-Ctrl-Alt-S"><a href="#切变-物体-x2F-网格-x2F-曲线-x2F-曲面-‣-变换-‣-切变-Shift-Ctrl-Alt-S" class="headerlink" title="切变(物体&#x2F;网格&#x2F;曲线&#x2F;曲面 ‣ 变换 ‣ 切变, Shift-Ctrl-Alt-S)"></a>切变(物体&#x2F;网格&#x2F;曲线&#x2F;曲面 ‣ 变换 ‣ 切变, <kbd>Shift-Ctrl-Alt-S</kbd>)</h5><p>切变是两个平行表面的相向运动。执行该变换时，选中元素会沿着当前视图的水平轴向移动。轴线位置由 轴心点 确定。所有位于该轴<code>上方</code> 的元素移动（切变）方向与鼠标指针一致（但总是平行于水平轴）。所有位于该轴<code>下方</code> 的元素移动方向与鼠标指针相反。</p><h5 id="弯曲-物体-x2F-网格-x2F-曲线-x2F-曲面-‣-变换-‣-弯曲-Shift-W"><a href="#弯曲-物体-x2F-网格-x2F-曲线-x2F-曲面-‣-变换-‣-弯曲-Shift-W" class="headerlink" title="弯曲(物体&#x2F;网格&#x2F;曲线&#x2F;曲面 ‣ 变换 ‣ 弯曲, Shift-W)"></a>弯曲(物体&#x2F;网格&#x2F;曲线&#x2F;曲面 ‣ 变换 ‣ 弯曲, <kbd>Shift-W</kbd>)</h5><p>该工具通过旋转一长条选中元素，形成鼠标指针和 3D 游标之间的弧形。</p><h5 id="推-x2F-拉-工具栏-‣-法向缩放-‣-推-x2F-拉"><a href="#推-x2F-拉-工具栏-‣-法向缩放-‣-推-x2F-拉" class="headerlink" title="推&#x2F;拉(工具栏 ‣ 法向缩放 ‣ 推&#x2F;拉)"></a>推&#x2F;拉(工具栏 ‣ 法向缩放 ‣ 推&#x2F;拉)</h5><p>推&#x2F;拉 工具会移动选中元素（物体，顶点、边或面），使之靠近（推）或远离（拉）。具体来说就是，每个元素以相同的距离向中心点靠近或远离。距离值通过上（推）下（拉）移动鼠标控制，数值输入或通过滑块控制。</p><h5 id="弯绕-物体-x2F-网格-x2F-曲线-x2F-曲面-‣-变换-‣-弯绕，自行车自行车自行车"><a href="#弯绕-物体-x2F-网格-x2F-曲线-x2F-曲面-‣-变换-‣-弯绕，自行车自行车自行车" class="headerlink" title="弯绕(物体&#x2F;网格&#x2F;曲线&#x2F;曲面 ‣ 变换 ‣ 弯绕，自行车自行车自行车)"></a>弯绕(物体&#x2F;网格&#x2F;曲线&#x2F;曲面 ‣ 变换 ‣ 弯绕，自行车自行车自行车)</h5><p>弯绕 变换接受选中元素，绕 3D 游标将选中元素弯曲特定角度。注意该变换的结果总是取决于 3D 游标的位置，轴心点对其没有影响。 弯绕 变换的结果还取决于视图方向。</p><h5 id="随机-网格-‣-变换-‣-随机"><a href="#随机-网格-‣-变换-‣-随机" class="headerlink" title="随机(网格 ‣ 变换 ‣ 随机)"></a>随机(网格 ‣ 变换 ‣ 随机)</h5><p>编辑模式的 随机 工具可以让您沿网格顶点的法向置换顶点。</p><h5 id="法向缩放-网格-‣-变换-‣-法向缩放"><a href="#法向缩放-网格-‣-变换-‣-法向缩放" class="headerlink" title="法向缩放(网格 ‣ 变换 ‣ 法向缩放)"></a>法向缩放(网格 ‣ 变换 ‣ 法向缩放)</h5><p>该工具作用于 标准法向网格 ，沿其自身法线方向（垂直于所在面）移动顶点&#x2F;边&#x2F;面，实现缩小&#x2F;膨胀。</p><h5 id="重置蒙皮尺寸-网格-‣-变换-‣-重置蒙皮尺寸"><a href="#重置蒙皮尺寸-网格-‣-变换-‣-重置蒙皮尺寸" class="headerlink" title="重置蒙皮尺寸(网格 ‣ 变换 ‣ 重置蒙皮尺寸)"></a>重置蒙皮尺寸(网格 ‣ 变换 ‣ 重置蒙皮尺寸)</h5><p>当使用 蒙皮修改器 时，该工具用于设置每个顶点的蒙皮半径。X 轴和 Y 轴的非均匀缩放可以通过通常的轴锁定 X 或 Y 进行访问。半径也可以在 3D 视图的侧边栏的 Transform 面板中调整。所有顶点的平均半径都可以在 3D 视图中预览，预览显示为以围绕顶点的虚线圆。</p><h3 id="镜像-网格-‣-镜像-Ctrl-M"><a href="#镜像-网格-‣-镜像-Ctrl-M" class="headerlink" title="镜像(网格 ‣ 镜像, Ctrl-M)"></a>镜像(网格 ‣ 镜像, <kbd>Ctrl-M</kbd>)</h3><p>镜像工具沿选定轴向镜像选中元素</p><h3 id="复制-网格-‣-复制-Shift-D"><a href="#复制-网格-‣-复制-Shift-D" class="headerlink" title="复制(网格 ‣ 复制, Shift-D)"></a>复制(网格 ‣ 复制, <kbd>Shift-D</kbd>)</h3><p>该工具简单地复制选定的元素，不会与网格的其余部分建立任何连接（不像挤出那样），并将复制体放置在原位置。复制结束后，复制出的 新 元素变为选中，并自动进入拖拽&#x2F;移动模式，这样可以将复制体移动到别的位置</p><h3 id="挤出-网格-‣-挤出-Alt-E"><a href="#挤出-网格-‣-挤出-Alt-E" class="headerlink" title="挤出(网格 ‣ 挤出, Alt-E)"></a>挤出(网格 ‣ 挤出, <kbd>Alt-E</kbd>)</h3><h5 id="挤出面"><a href="#挤出面" class="headerlink" title="挤出面"></a>挤出面</h5><h5 id="沿法向挤出面"><a href="#沿法向挤出面" class="headerlink" title="沿法向挤出面"></a>沿法向挤出面</h5><h5 id="挤出各个面"><a href="#挤出各个面" class="headerlink" title="挤出各个面"></a>挤出各个面</h5><h5 id="挤出流形"><a href="#挤出流形" class="headerlink" title="挤出流形"></a>挤出流形</h5><h5 id="挤出边线"><a href="#挤出边线" class="headerlink" title="挤出边线"></a>挤出边线</h5><h5 id="挤出顶点"><a href="#挤出顶点" class="headerlink" title="挤出顶点"></a>挤出顶点</h5><h5 id="重复挤出"><a href="#重复挤出" class="headerlink" title="重复挤出"></a>重复挤出</h5><h5 id="旋绕"><a href="#旋绕" class="headerlink" title="旋绕"></a>旋绕</h5><h3 id="合并-网格-‣-合并-上下文菜单-‣-合并-M"><a href="#合并-网格-‣-合并-上下文菜单-‣-合并-M" class="headerlink" title="合并(网格 ‣ 合并 , 上下文菜单 ‣ 合并, M)"></a>合并(网格 ‣ 合并 , 上下文菜单 ‣ 合并, <kbd>M</kbd>)</h3><p>该工具用于将选中顶点合并为一个顶点，融并其余顶点。用户可以在弹出的菜单中选择最后剩下来的那个顶点的位置</p><h5 id="到中心"><a href="#到中心" class="headerlink" title="到中心"></a>到中心</h5><h5 id="到游标"><a href="#到游标" class="headerlink" title="到游标"></a>到游标</h5><h5 id="塌陷"><a href="#塌陷" class="headerlink" title="塌陷"></a>塌陷</h5><h5 id="到首选点"><a href="#到首选点" class="headerlink" title="到首选点"></a>到首选点</h5><h5 id="到末选点"><a href="#到末选点" class="headerlink" title="到末选点"></a>到末选点</h5><p>合并顶点明显会删除一些边和面。但是 Blender 会尽力保留边和面，仅对部分边和面进行合并操作。</p><h5 id="UV"><a href="#UV" class="headerlink" title="UV"></a>UV</h5><p>如果在 调整上一步操作 面板中勾选 UV ，则 UV 映射坐标（如果存在）将被校正以避免图像失真。</p><h3 id="拆分-网格-‣-拆分-Alt-M"><a href="#拆分-网格-‣-拆分-Alt-M" class="headerlink" title="拆分(网格 ‣ 拆分, Alt-M)"></a>拆分(网格 ‣ 拆分, <kbd>Alt-M</kbd>)</h3><h5 id="选择-网格-‣-拆分-‣-选中项-Y"><a href="#选择-网格-‣-拆分-‣-选中项-Y" class="headerlink" title="选择(网格 ‣ 拆分 ‣ 选中项, Y)"></a>选择(网格 ‣ 拆分 ‣ 选中项, <kbd>Y</kbd>)</h5><h5 id="沿边拆面-网格-‣-拆分-‣-沿边拆面"><a href="#沿边拆面-网格-‣-拆分-‣-沿边拆面" class="headerlink" title="沿边拆面(网格 ‣ 拆分 ‣ 沿边拆面)"></a>沿边拆面(网格 ‣ 拆分 ‣ 沿边拆面)</h5><h5 id="按顶点拆分面-amp-边-网格-‣-拆分-‣-按顶点拆分面和边"><a href="#按顶点拆分面-amp-边-网格-‣-拆分-‣-按顶点拆分面和边" class="headerlink" title="按顶点拆分面&amp;边(网格 ‣ 拆分 ‣ 按顶点拆分面和边)"></a>按顶点拆分面&amp;边(网格 ‣ 拆分 ‣ 按顶点拆分面和边)</h5><h3 id="分离-网格-‣-分离-P"><a href="#分离-网格-‣-分离-P" class="headerlink" title="分离(网格 ‣ 分离, P)"></a>分离(网格 ‣ 分离, <kbd>P</kbd>)</h3><h5 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h5><h5 id="按材质"><a href="#按材质" class="headerlink" title="按材质"></a>按材质</h5><h5 id="按松散块"><a href="#按松散块" class="headerlink" title="按松散块"></a>按松散块</h5><h3 id="切分-网格-‣-切分"><a href="#切分-网格-‣-切分" class="headerlink" title="切分(网格 ‣ 切分)"></a>切分(网格 ‣ 切分)</h3><h5 id="切面基点，平面法线"><a href="#切面基点，平面法线" class="headerlink" title="切面基点，平面法线"></a>切面基点，平面法线</h5><h5 id="Fill（填充）"><a href="#Fill（填充）" class="headerlink" title="Fill（填充）"></a>Fill（填充）</h5><h5 id="清空内侧，清空外侧"><a href="#清空内侧，清空外侧" class="headerlink" title="清空内侧，清空外侧"></a>清空内侧，清空外侧</h5><h5 id="轴阈值"><a href="#轴阈值" class="headerlink" title="轴阈值"></a>轴阈值</h5><h5 id="装配器"><a href="#装配器" class="headerlink" title="装配器"></a>装配器</h5><h3 id="投影切割-网格-‣-投影切割"><a href="#投影切割-网格-‣-投影切割" class="headerlink" title="投影切割(网格 ‣ 投影切割)"></a>投影切割(网格 ‣ 投影切割)</h3><p>拓印</p><h3 id="切刀工具-网格体-‣-切刀工具"><a href="#切刀工具-网格体-‣-切刀工具" class="headerlink" title="切刀工具(网格体 ‣ 切刀工具)"></a>切刀工具(网格体 ‣ 切刀工具)</h3><p>切割工具可用于通过绘制线条细分（切断）几何体，或切开闭合循环，制造空洞</p><h5 id="回车键确认切割"><a href="#回车键确认切割" class="headerlink" title="回车键确认切割"></a>回车键确认切割</h5><h5 id="双击闭合切割"><a href="#双击闭合切割" class="headerlink" title="双击闭合切割"></a>双击闭合切割</h5><h3 id="秃壳"><a href="#秃壳" class="headerlink" title="秃壳"></a>秃壳</h3><p>凸壳接受点云作为输入，输出围住这些顶点的凸壳。如果输入包含位于凸壳上的边或面，这些边或面也会作为输出。该操作还可以当做桥接工具使用。</p><h3 id="对称-网格-‣-对称-和镜像有啥区别？？？"><a href="#对称-网格-‣-对称-和镜像有啥区别？？？" class="headerlink" title="对称(网格 ‣ 对称, 和镜像有啥区别？？？)"></a>对称(网格 ‣ 对称, 和镜像有啥区别？？？)</h3><h3 id="吸附到对称结构-网格-‣-吸附到对称结构"><a href="#吸附到对称结构-网格-‣-吸附到对称结构" class="headerlink" title="吸附到对称结构(网格 ‣ 吸附到对称结构)"></a>吸附到对称结构(网格 ‣ 吸附到对称结构)</h3><p>通过 “对齐对称” 工具，您可以将网格顶点捕捉到其镜像相邻点。</p><p>在处理大多数对称的网格时很有用，但顶点已经移动得足够多，以至于 Blender 不会将它们检测为镜像（例如，当启用 X Mirror 选项时）。</p><p>这可能是在未开启 X 向镜像时无意导致的。有时候，从其他软件导入的模型，在不够对称时，也会导致镜像失败。</p><h3 id="法向"><a href="#法向" class="headerlink" title="法向"></a>法向</h3><h3 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h3><h3 id="元素排序"><a href="#元素排序" class="headerlink" title="元素排序"></a>元素排序</h3><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><h5 id="精简几何体-网格-‣-清理-‣-精简几何体"><a href="#精简几何体-网格-‣-清理-‣-精简几何体" class="headerlink" title="精简几何体(网格 ‣ 清理 ‣ 精简几何体)"></a>精简几何体(网格 ‣ 清理 ‣ 精简几何体)</h5><h5 id="填充洞面-网格-‣-清理-‣-填充洞面"><a href="#填充洞面-网格-‣-清理-‣-填充洞面" class="headerlink" title="填充洞面(网格 ‣ 清理 ‣ 填充洞面)"></a>填充洞面(网格 ‣ 清理 ‣ 填充洞面)</h5><h5 id="平整表面-网格-‣-清理-‣-平整表面"><a href="#平整表面-网格-‣-清理-‣-平整表面" class="headerlink" title="平整表面(网格 ‣ 清理 ‣ 平整表面)"></a>平整表面(网格 ‣ 清理 ‣ 平整表面)</h5><h5 id="拆分非平面-网格-‣-清理-‣-拆分非平面"><a href="#拆分非平面-网格-‣-清理-‣-拆分非平面" class="headerlink" title="拆分非平面(网格 ‣ 清理 ‣ 拆分非平面)"></a>拆分非平面(网格 ‣ 清理 ‣ 拆分非平面)</h5><h5 id="拆分凹面-网格-‣-清理-‣-拆分凹面"><a href="#拆分凹面-网格-‣-清理-‣-拆分凹面" class="headerlink" title="拆分凹面(网格 ‣ 清理 ‣ 拆分凹面)"></a>拆分凹面(网格 ‣ 清理 ‣ 拆分凹面)</h5><h5 id="删除松散元素-网格-‣-清理-‣-删除松散元素"><a href="#删除松散元素-网格-‣-清理-‣-删除松散元素" class="headerlink" title="删除松散元素(网格 ‣ 清理 ‣ 删除松散元素)"></a>删除松散元素(网格 ‣ 清理 ‣ 删除松散元素)</h5><h5 id="简并融并-网格-‣-清理-‣-简并融并"><a href="#简并融并-网格-‣-清理-‣-简并融并" class="headerlink" title="简并融并(网格 ‣ 清理 ‣ 简并融并)"></a>简并融并(网格 ‣ 清理 ‣ 简并融并)</h5><h5 id="按距离合并-顶点-‣-按距离融并-上下文菜单-‣-按距离融并"><a href="#按距离合并-顶点-‣-按距离融并-上下文菜单-‣-按距离融并" class="headerlink" title="按距离合并(顶点 ‣ 按距离融并, 上下文菜单 ‣ 按距离融并)"></a>按距离合并(顶点 ‣ 按距离融并, 上下文菜单 ‣ 按距离融并)</h5><h3 id="删除-amp-融并-网格-‣-删除"><a href="#删除-amp-融并-网格-‣-删除" class="headerlink" title="删除 &amp; 融并(网格 ‣ 删除)"></a>删除 &amp; 融并(网格 ‣ 删除)</h3><h5 id="删除-X-Delete"><a href="#删除-X-Delete" class="headerlink" title="删除(X, Delete)"></a>删除(<kbd>X</kbd>, <kbd>Delete</kbd>)</h5><p>删除选中的顶点、边或者面</p><h5 id="溶解"><a href="#溶解" class="headerlink" title="溶解"></a>溶解</h5><p>融并操作也可以从删除菜单访问。融并会移除几何元素并填充周边几何体。而删除几何元素可能会留下空洞，需要再次填充。</p><p>删除选中的几何元素，但不生成空洞，将选中项转变为一个多边形。根据选中元素（边、面或顶点）的不同，融并的效果也有所差异。用户可以在需要的地方添加细节，或者在不需要的位置移除细节</p>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二维平移 - WebGL</title>
    <link href="/webgl/2d-transform/"/>
    <url>/webgl/2d-transform/</url>
    
    <content type="html"><![CDATA[<h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><p>通过清除画布，重新传值给绘制函数，重新绘制。缺点是每次绘制都需要更新所有的点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Get A WebGL context</span><br>  <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span><br>  <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);<br>  <span class="hljs-keyword">var</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!gl) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// setup GLSL program</span><br>  <span class="hljs-keyword">var</span> program = webglUtils.<span class="hljs-title function_">createProgramFromScripts</span>(gl, [<span class="hljs-string">&quot;vertex-shader-2d&quot;</span>, <span class="hljs-string">&quot;fragment-shader-2d&quot;</span>]);<br><br>  <span class="hljs-comment">// look up where the vertex data needs to go.</span><br>  <span class="hljs-keyword">var</span> positionLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_position&quot;</span>);<br><br>  <span class="hljs-comment">// lookup uniforms</span><br>  <span class="hljs-keyword">var</span> resolutionLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_resolution&quot;</span>);<br>  <span class="hljs-keyword">var</span> colorLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_color&quot;</span>);<br><br>  <span class="hljs-comment">// Create a buffer to put positions in</span><br>  <span class="hljs-keyword">var</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();<br><br>  <span class="hljs-comment">// Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br><br>  <span class="hljs-keyword">var</span> translation = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> width = <span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">var</span> height = <span class="hljs-number">30</span>;<br>  <span class="hljs-keyword">var</span> color = [<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-number">1</span>];<br><br>  <span class="hljs-title function_">drawScene</span>();<br><br>  <span class="hljs-comment">// Setup a ui.</span><br>  webglLessonsUI.<span class="hljs-title function_">setupSlider</span>(<span class="hljs-string">&quot;#x&quot;</span>, &#123;<span class="hljs-attr">slide</span>: <span class="hljs-title function_">updatePosition</span>(<span class="hljs-number">0</span>), <span class="hljs-attr">max</span>: gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span> &#125;);<br>  webglLessonsUI.<span class="hljs-title function_">setupSlider</span>(<span class="hljs-string">&quot;#y&quot;</span>, &#123;<span class="hljs-attr">slide</span>: <span class="hljs-title function_">updatePosition</span>(<span class="hljs-number">1</span>), <span class="hljs-attr">max</span>: gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>&#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">updatePosition</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">event, ui</span>) &#123;<br>      translation[index] = ui.<span class="hljs-property">value</span>;<br>      <span class="hljs-title function_">drawScene</span>();<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// Draw a the scene.</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawScene</span>(<span class="hljs-params"></span>) &#123;<br>    webglUtils.<span class="hljs-title function_">resizeCanvasToDisplaySize</span>(gl.<span class="hljs-property">canvas</span>);<br><br>    <span class="hljs-comment">// Tell WebGL how to convert from clip space to pixels</span><br>    gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>    <span class="hljs-comment">// Clear the canvas.</span><br>    gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);<br><br>    <span class="hljs-comment">// Tell it to use our program (pair of shaders)</span><br>    gl.<span class="hljs-title function_">useProgram</span>(program);<br><br>    <span class="hljs-comment">// Turn on the attribute</span><br>    gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionLocation);<br><br>    <span class="hljs-comment">// Bind the position buffer.</span><br>    gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br><br>    <span class="hljs-comment">// Setup a rectangle</span><br>    <span class="hljs-title function_">setRectangle</span>(gl, translation[<span class="hljs-number">0</span>], translation[<span class="hljs-number">1</span>], width, height);<br><br>    <span class="hljs-comment">// Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)</span><br>    <span class="hljs-keyword">var</span> size = <span class="hljs-number">2</span>;          <span class="hljs-comment">// 2 components per iteration</span><br>    <span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>;   <span class="hljs-comment">// the data is 32bit floats</span><br>    <span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>; <span class="hljs-comment">// don&#x27;t normalize the data</span><br>    <span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 0 = move forward size * sizeof(type) each iteration to get the next position</span><br>    <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;        <span class="hljs-comment">// start at the beginning of the buffer</span><br>    gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>        positionLocation, size, type, normalize, stride, offset);<br><br>    <span class="hljs-comment">// set the resolution</span><br>    gl.<span class="hljs-title function_">uniform2f</span>(resolutionLocation, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>    <span class="hljs-comment">// set the color</span><br>    gl.<span class="hljs-title function_">uniform4fv</span>(colorLocation, color);<br><br>    <span class="hljs-comment">// Draw the rectangle.</span><br>    <span class="hljs-keyword">var</span> primitiveType = gl.<span class="hljs-property">TRIANGLES</span>;<br>    <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">6</span>;<br>    gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Fill the buffer with the values that define a rectangle.</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setRectangle</span>(<span class="hljs-params">gl, x, y, width, height</span>) &#123;<br>  <span class="hljs-keyword">var</span> x1 = x;<br>  <span class="hljs-keyword">var</span> x2 = x + width;<br>  <span class="hljs-keyword">var</span> y1 = y;<br>  <span class="hljs-keyword">var</span> y2 = y + height;<br>  gl.<span class="hljs-title function_">bufferData</span>(<br>      gl.<span class="hljs-property">ARRAY_BUFFER</span>,<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<br>          x1, y1,<br>          x2, y1,<br>          x1, y2,<br>          x1, y2,<br>          x2, y1,<br>          x2, y2,<br>      ]),<br>      gl.<span class="hljs-property">STATIC_DRAW</span>);<br>&#125;<br><br><span class="hljs-title function_">main</span>();<br><br></code></pre></td></tr></table></figure><h3 id="着色器中平移"><a href="#着色器中平移" class="headerlink" title="着色器中平移"></a>着色器中平移</h3><p>通过状态控制平移量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Get A WebGL context</span><br>  <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span><br>  <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);<br>  <span class="hljs-keyword">var</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!gl) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// setup GLSL program</span><br>  <span class="hljs-keyword">var</span> program = webglUtils.<span class="hljs-title function_">createProgramFromScripts</span>(gl, [<span class="hljs-string">&quot;vertex-shader-2d&quot;</span>, <span class="hljs-string">&quot;fragment-shader-2d&quot;</span>]);<br>  gl.<span class="hljs-title function_">useProgram</span>(program);<br><br>  <span class="hljs-comment">// look up where the vertex data needs to go.</span><br>  <span class="hljs-keyword">var</span> positionLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_position&quot;</span>);<br><br>  <span class="hljs-comment">// lookup uniforms</span><br>  <span class="hljs-keyword">var</span> resolutionLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_resolution&quot;</span>);<br>  <span class="hljs-keyword">var</span> colorLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_color&quot;</span>);<br>  <span class="hljs-keyword">var</span> translationLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_translation&quot;</span>);<br><br>  <span class="hljs-comment">// Create a buffer to put positions in</span><br>  <span class="hljs-keyword">var</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();<br>  <span class="hljs-comment">// Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br>  <span class="hljs-comment">// Put geometry data into buffer</span><br>  <span class="hljs-title function_">setGeometry</span>(gl);<br><br>  <span class="hljs-keyword">var</span> translation = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> color = [<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(), <span class="hljs-number">1</span>];<br><br>  <span class="hljs-title function_">drawScene</span>();<br><br>  <span class="hljs-comment">// Setup a ui.</span><br>  webglLessonsUI.<span class="hljs-title function_">setupSlider</span>(<span class="hljs-string">&quot;#x&quot;</span>, &#123;<span class="hljs-attr">slide</span>: <span class="hljs-title function_">updatePosition</span>(<span class="hljs-number">0</span>), <span class="hljs-attr">max</span>: gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span> &#125;);<br>  webglLessonsUI.<span class="hljs-title function_">setupSlider</span>(<span class="hljs-string">&quot;#y&quot;</span>, &#123;<span class="hljs-attr">slide</span>: <span class="hljs-title function_">updatePosition</span>(<span class="hljs-number">1</span>), <span class="hljs-attr">max</span>: gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>&#125;);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">updatePosition</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">event, ui</span>) &#123;<br>      translation[index] = ui.<span class="hljs-property">value</span>;<br>      <span class="hljs-title function_">drawScene</span>();<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// Draw the scene.</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawScene</span>(<span class="hljs-params"></span>) &#123;<br>    webglUtils.<span class="hljs-title function_">resizeCanvasToDisplaySize</span>(gl.<span class="hljs-property">canvas</span>);<br><br>    <span class="hljs-comment">// Tell WebGL how to convert from clip space to pixels</span><br>    gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>    <span class="hljs-comment">// Clear the canvas.</span><br>    gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);<br><br>    <span class="hljs-comment">// Tell it to use our program (pair of shaders)</span><br>    gl.<span class="hljs-title function_">useProgram</span>(program);<br><br>    <span class="hljs-comment">// Turn on the attribute</span><br>    gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionLocation);<br><br>    <span class="hljs-comment">// Bind the position buffer.</span><br>    gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br><br>    <span class="hljs-comment">// Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)</span><br>    <span class="hljs-keyword">var</span> size = <span class="hljs-number">2</span>;          <span class="hljs-comment">// 2 components per iteration</span><br>    <span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>;   <span class="hljs-comment">// the data is 32bit floats</span><br>    <span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>; <span class="hljs-comment">// don&#x27;t normalize the data</span><br>    <span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 0 = move forward size * sizeof(type) each iteration to get the next position</span><br>    <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;        <span class="hljs-comment">// start at the beginning of the buffer</span><br>    gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>        positionLocation, size, type, normalize, stride, offset);<br><br>    <span class="hljs-comment">// set the resolution</span><br>    gl.<span class="hljs-title function_">uniform2f</span>(resolutionLocation, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>    <span class="hljs-comment">// set the color</span><br>    gl.<span class="hljs-title function_">uniform4fv</span>(colorLocation, color);<br><br>    <span class="hljs-comment">// Set the translation.</span><br>    gl.<span class="hljs-title function_">uniform2fv</span>(translationLocation, translation);<br><br>    <span class="hljs-comment">// Draw the geometry.</span><br>    <span class="hljs-keyword">var</span> primitiveType = gl.<span class="hljs-property">TRIANGLES</span>;<br>    <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">18</span>;  <span class="hljs-comment">// 6 triangles in the &#x27;F&#x27;, 3 points per triangle</span><br>    gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Fill the buffer with the values that define a letter &#x27;F&#x27;.</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setGeometry</span>(<span class="hljs-params">gl</span>) &#123;<br>  gl.<span class="hljs-title function_">bufferData</span>(<br>      gl.<span class="hljs-property">ARRAY_BUFFER</span>,<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<br>          <span class="hljs-comment">// left column</span><br>          <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">150</span>,<br>          <span class="hljs-number">0</span>, <span class="hljs-number">150</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">150</span>,<br><br>          <span class="hljs-comment">// top rung</span><br>          <span class="hljs-number">30</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">100</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">30</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">30</span>,<br>          <span class="hljs-number">100</span>, <span class="hljs-number">0</span>,<br>          <span class="hljs-number">100</span>, <span class="hljs-number">30</span>,<br><br>          <span class="hljs-comment">// middle rung</span><br>          <span class="hljs-number">30</span>, <span class="hljs-number">60</span>,<br>          <span class="hljs-number">67</span>, <span class="hljs-number">60</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">90</span>,<br>          <span class="hljs-number">30</span>, <span class="hljs-number">90</span>,<br>          <span class="hljs-number">67</span>, <span class="hljs-number">60</span>,<br>          <span class="hljs-number">67</span>, <span class="hljs-number">90</span>,<br>      ]),<br>      gl.<span class="hljs-property">STATIC_DRAW</span>);<br>&#125;<br><br><span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像处理 - WebGL</title>
    <link href="/webgl/image-processing/"/>
    <url>/webgl/image-processing/</url>
    
    <content type="html"><![CDATA[<p>绘制图片需要使用纹理，WebGL 渲染时需要裁剪空间，渲染纹理时需要纹理坐标，纹理坐标的范围始终是 0.0~1.0</p><ol><li>创建程序</li><li>查找属性位置</li><li>创建 Buffer(接收外部数据)</li><li>关联 Buffer 与内部状态</li><li>传递数据</li><li>设置可视区域尺寸</li><li>指定使用程序</li><li>开启顶点属性</li><li>指定获取外部数据方式</li><li>设置分辨率</li><li>绘制</li><li>像素处理(颜色反转、计算、卷积内核)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>  image.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;/webgl/resources/leaves.jpg&quot;</span>; <span class="hljs-comment">// MUST BE SAME DOMAIN!!!</span><br>  image.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">render</span>(image);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">image</span>) &#123;<br>  <span class="hljs-comment">// Get A WebGL context</span><br>  <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span><br>  <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);<br>  <span class="hljs-keyword">var</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!gl) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// setup GLSL program</span><br>  <span class="hljs-keyword">var</span> program = webglUtils.<span class="hljs-title function_">createProgramFromScripts</span>(gl, [<br>    <span class="hljs-string">&quot;vertex-shader-2d&quot;</span>,<br>    <span class="hljs-string">&quot;fragment-shader-2d&quot;</span>,<br>  ]);<br><br>  <span class="hljs-comment">// look up where the vertex data needs to go.</span><br>  <span class="hljs-keyword">var</span> positionLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_position&quot;</span>);<br>  <span class="hljs-keyword">var</span> texcoordLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_texCoord&quot;</span>);<br><br>  <span class="hljs-comment">// Create a buffer to put three 2d clip space points in</span><br>  <span class="hljs-keyword">var</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();<br><br>  <span class="hljs-comment">// Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br>  <span class="hljs-comment">// Set a rectangle the same size as the image.</span><br>  <span class="hljs-title function_">setRectangle</span>(gl, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, image.<span class="hljs-property">width</span>, image.<span class="hljs-property">height</span>);<br><br>  <span class="hljs-comment">// provide texture coordinates for the rectangle.</span><br>  <span class="hljs-keyword">var</span> texcoordBuffer = gl.<span class="hljs-title function_">createBuffer</span>();<br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, texcoordBuffer);<br>  gl.<span class="hljs-title function_">bufferData</span>(<br>    gl.<span class="hljs-property">ARRAY_BUFFER</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([<br>      <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>,<br>    ]),<br>    gl.<span class="hljs-property">STATIC_DRAW</span><br>  );<br><br>  <span class="hljs-comment">// Create a texture.</span><br>  <span class="hljs-keyword">var</span> texture = gl.<span class="hljs-title function_">createTexture</span>();<br>  gl.<span class="hljs-title function_">bindTexture</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, texture);<br><br>  <span class="hljs-comment">// Set the parameters so we can render any size image.</span><br>  gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_WRAP_S</span>, gl.<span class="hljs-property">CLAMP_TO_EDGE</span>);<br>  gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_WRAP_T</span>, gl.<span class="hljs-property">CLAMP_TO_EDGE</span>);<br>  gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_MIN_FILTER</span>, gl.<span class="hljs-property">NEAREST</span>);<br>  gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_MAG_FILTER</span>, gl.<span class="hljs-property">NEAREST</span>);<br><br>  <span class="hljs-comment">// Upload the image into the texture.</span><br>  gl.<span class="hljs-title function_">texImage2D</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">RGBA</span>, gl.<span class="hljs-property">RGBA</span>, gl.<span class="hljs-property">UNSIGNED_BYTE</span>, image);<br><br>  <span class="hljs-comment">// lookup uniforms</span><br>  <span class="hljs-keyword">var</span> resolutionLocation = gl.<span class="hljs-title function_">getUniformLocation</span>(program, <span class="hljs-string">&quot;u_resolution&quot;</span>);<br><br>  webglUtils.<span class="hljs-title function_">resizeCanvasToDisplaySize</span>(gl.<span class="hljs-property">canvas</span>);<br><br>  <span class="hljs-comment">// Tell WebGL how to convert from clip space to pixels</span><br>  gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>  <span class="hljs-comment">// Clear the canvas</span><br>  gl.<span class="hljs-title function_">clearColor</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);<br><br>  <span class="hljs-comment">// Tell it to use our program (pair of shaders)</span><br>  gl.<span class="hljs-title function_">useProgram</span>(program);<br><br>  <span class="hljs-comment">// Turn on the position attribute</span><br>  gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionLocation);<br><br>  <span class="hljs-comment">// Bind the position buffer.</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);<br><br>  <span class="hljs-comment">// Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)</span><br>  <span class="hljs-keyword">var</span> size = <span class="hljs-number">2</span>; <span class="hljs-comment">// 2 components per iteration</span><br>  <span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>; <span class="hljs-comment">// the data is 32bit floats</span><br>  <span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>; <span class="hljs-comment">// don&#x27;t normalize the data</span><br>  <span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>; <span class="hljs-comment">// 0 = move forward size * sizeof(type) each iteration to get the next position</span><br>  <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>; <span class="hljs-comment">// start at the beginning of the buffer</span><br>  gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>    positionLocation,<br>    size,<br>    type,<br>    normalize,<br>    stride,<br>    offset<br>  );<br><br>  <span class="hljs-comment">// Turn on the texcoord attribute</span><br>  gl.<span class="hljs-title function_">enableVertexAttribArray</span>(texcoordLocation);<br><br>  <span class="hljs-comment">// bind the texcoord buffer.</span><br>  gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, texcoordBuffer);<br><br>  <span class="hljs-comment">// Tell the texcoord attribute how to get data out of texcoordBuffer (ARRAY_BUFFER)</span><br>  <span class="hljs-keyword">var</span> size = <span class="hljs-number">2</span>; <span class="hljs-comment">// 2 components per iteration</span><br>  <span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>; <span class="hljs-comment">// the data is 32bit floats</span><br>  <span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>; <span class="hljs-comment">// don&#x27;t normalize the data</span><br>  <span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>; <span class="hljs-comment">// 0 = move forward size * sizeof(type) each iteration to get the next position</span><br>  <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>; <span class="hljs-comment">// start at the beginning of the buffer</span><br>  gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>    texcoordLocation,<br>    size,<br>    type,<br>    normalize,<br>    stride,<br>    offset<br>  );<br><br>  <span class="hljs-comment">// set the resolution</span><br>  gl.<span class="hljs-title function_">uniform2f</span>(resolutionLocation, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);<br><br>  <span class="hljs-comment">// Draw the rectangle.</span><br>  <span class="hljs-keyword">var</span> primitiveType = gl.<span class="hljs-property">TRIANGLES</span>;<br>  <span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> count = <span class="hljs-number">6</span>;<br>  gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setRectangle</span>(<span class="hljs-params">gl, x, y, width, height</span>) &#123;<br>  <span class="hljs-keyword">var</span> x1 = x;<br>  <span class="hljs-keyword">var</span> x2 = x + width;<br>  <span class="hljs-keyword">var</span> y1 = y;<br>  <span class="hljs-keyword">var</span> y2 = y + height;<br><br>  <span class="hljs-comment">// 其实是画了两个三角形</span><br>  gl.<span class="hljs-title function_">bufferData</span>(<br>    gl.<span class="hljs-property">ARRAY_BUFFER</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>([x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]),<br>    gl.<span class="hljs-property">STATIC_DRAW</span><br>  );<br>&#125;<br><br><span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快捷键 - Emacs</title>
    <link href="/emacs/tutoial/"/>
    <url>/emacs/tutoial/</url>
    
    <content type="html"><![CDATA[<h3 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl + v</td><td>向下滚动一屏</td></tr><tr><td>Meta + v</td><td>向上移动一屏</td></tr><tr><td>Ctrl + l</td><td>重绘屏幕，并将光标所在行移动至中央(连续按可以在上中下反复横跳)</td></tr></tbody></table><h3 id="基本的光标控制"><a href="#基本的光标控制" class="headerlink" title="基本的光标控制"></a>基本的光标控制</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl + p</td><td>上一行</td></tr><tr><td>Ctrl + n</td><td>下一行</td></tr><tr><td>Ctrl + b</td><td>向左移</td></tr><tr><td>Ctrl + f</td><td>向右移</td></tr><tr><td>Meta + b</td><td>向左移一个词</td></tr><tr><td>Meta + f</td><td>向右移一个词</td></tr><tr><td>Ctrl + a</td><td>移动到行首</td></tr><tr><td>Ctrl + e</td><td>移动到行尾</td></tr><tr><td>Meta + a</td><td>移动到句首</td></tr><tr><td>Meta + e</td><td>移动到句尾</td></tr></tbody></table><blockquote><p>通过 Meta 系列组合键用来操作由语言定义的单位(词、句子、单位)，而 Ctrl 系列组合键用来操作与语言无关的基本单位(字符、行)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>emacs</tag>
      
      <tag>编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>着色器和GLSL - WebGL</title>
    <link href="/webgl/shader-glsl/"/>
    <url>/webgl/shader-glsl/</url>
    
    <content type="html"><![CDATA[<h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><p>一个顶点着色器的工作是生成裁剪空间坐标值，通常是以下的形式</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_Position</span> = doMathToMakeClipspaceCoordinates<br>&#125;<br></code></pre></td></tr></table></figure><p>每个顶点调用一次（顶点）着色器，每次调用都需要设置一个特殊的全局变量 gl_Position， 该变量的值就是裁减空间坐标值</p><p>顶点着色器需要的数据，可以通过以下三种方式获得:</p><ol><li>Attributes 属性 (从缓冲中获取的数据)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 创建缓冲</span><br><span class="hljs-keyword">var</span> buf = gl.<span class="hljs-title function_">createBuffer</span>();<br><br><span class="hljs-comment">// 将数据存入缓冲</span><br>gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, buf);<br>gl.<span class="hljs-title function_">bufferData</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, someData, gl.<span class="hljs-property">STATIC_DRAW</span>);<br><br><span class="hljs-comment">// 初始化的时候，在你制作的（着色）程序中找到属性所在地址</span><br><span class="hljs-keyword">var</span> positionLoc = gl.<span class="hljs-title function_">getAttribLocation</span>(someShaderProgram, <span class="hljs-string">&quot;a_position&quot;</span>);<br><br><span class="hljs-comment">// 开启从缓冲中获取数据</span><br>gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionLoc);<br><br><span class="hljs-keyword">var</span> numComponents = <span class="hljs-number">3</span>;  <span class="hljs-comment">// (x, y, z)</span><br><span class="hljs-keyword">var</span> type = gl.<span class="hljs-property">FLOAT</span>;    <span class="hljs-comment">// 32位浮点数据</span><br><span class="hljs-keyword">var</span> normalize = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 不标准化</span><br><span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;         <span class="hljs-comment">// 从缓冲起始位置开始获取</span><br><span class="hljs-keyword">var</span> stride = <span class="hljs-number">0</span>;         <span class="hljs-comment">// 到下一个数据跳多少位内存</span><br>                        <span class="hljs-comment">// 0 = 使用当前的单位个数和单位长度 （ 3 * Float32Array.BYTES_PER_ELEMENT ）</span><br><br><span class="hljs-comment">// 告诉WebGL怎么从缓冲中获取数据传递给属性</span><br>gl.<span class="hljs-title function_">vertexAttribPointer</span>(positionLoc, numComponents, type, <span class="hljs-literal">false</span>, stride, offset);<br><br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-comment">// 属性可以用 float, vec2, vec3, vec4, mat2, mat3 和 mat4 数据类型</span><br><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec4</span> a_position;<br><br><span class="hljs-comment">// 不做任何运算直接将数据传递给gl_Position</span><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_Position</span> = a_position;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Uniforms 全局变量 (在一次绘制中对所有顶点保持一致值)</li></ol><p>全局变量在一次绘制过程中传递给着色器的值都一样</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec4</span> a_position;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec4</span> u_offset;<br><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_Position</span> = a_position + u_offset;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 在初始化时找到全局变量的地址</span><br><span class="hljs-keyword">var</span> offsetLoc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_offset&quot;</span>);<br><br><span class="hljs-comment">// 在绘制前设置全局变量</span><br>gl.<span class="hljs-title function_">uniform4fv</span>(offsetLoc, [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]);  <span class="hljs-comment">// 向右偏移一半屏幕宽度</span><br></code></pre></td></tr></table></figure><p>要注意的是全局变量属于单个着色程序，如果多个着色程序有同名全局变量，需要找到每个全局变量并设置自己的值。 我们调用 gl.uniform???的时候只是设置了当前程序的全局变量，当前程序是传递给 gl.useProgram 的最后一个程序</p><p>全局变量有很多类型，对应的类型有对应的设置方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">gl.<span class="hljs-property">uniform1f</span> (floatUniformLoc, v);                 <span class="hljs-comment">// float</span><br>gl.<span class="hljs-title function_">uniform1fv</span>(floatUniformLoc, [v]);               <span class="hljs-comment">// float 或 float array</span><br>gl.<span class="hljs-property">uniform2f</span> (vec2UniformLoc,  v0, v1);            <span class="hljs-comment">// vec2</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(vec2UniformLoc,  [v0, v1]);          <span class="hljs-comment">// vec2 或 vec2 array</span><br>gl.<span class="hljs-property">uniform3f</span> (vec3UniformLoc,  v0, v1, v2);        <span class="hljs-comment">// vec3</span><br>gl.<span class="hljs-title function_">uniform3fv</span>(vec3UniformLoc,  [v0, v1, v2]);      <span class="hljs-comment">// vec3 或 vec3 array</span><br>gl.<span class="hljs-property">uniform4f</span> (vec4UniformLoc,  v0, v1, v2, v4);    <span class="hljs-comment">// vec4</span><br>gl.<span class="hljs-title function_">uniform4fv</span>(vec4UniformLoc,  [v0, v1, v2, v4]);  <span class="hljs-comment">// vec4 或 vec4 array</span><br><br>gl.<span class="hljs-title function_">uniformMatrix2fv</span>(mat2UniformLoc, <span class="hljs-literal">false</span>, [  4x element array ])  <span class="hljs-comment">// mat2 或 mat2 array</span><br>gl.<span class="hljs-title function_">uniformMatrix3fv</span>(mat3UniformLoc, <span class="hljs-literal">false</span>, [  9x element array ])  <span class="hljs-comment">// mat3 或 mat3 array</span><br>gl.<span class="hljs-title function_">uniformMatrix4fv</span>(mat4UniformLoc, <span class="hljs-literal">false</span>, [ 16x element array ])  <span class="hljs-comment">// mat4 或 mat4 array</span><br><br>gl.<span class="hljs-property">uniform1i</span> (intUniformLoc,   v);                 <span class="hljs-comment">// int</span><br>gl.<span class="hljs-title function_">uniform1iv</span>(intUniformLoc, [v]);                 <span class="hljs-comment">// int 或 int array</span><br>gl.<span class="hljs-property">uniform2i</span> (ivec2UniformLoc, v0, v1);            <span class="hljs-comment">// ivec2</span><br>gl.<span class="hljs-title function_">uniform2iv</span>(ivec2UniformLoc, [v0, v1]);          <span class="hljs-comment">// ivec2 或 ivec2 array</span><br>gl.<span class="hljs-property">uniform3i</span> (ivec3UniformLoc, v0, v1, v2);        <span class="hljs-comment">// ivec3</span><br>gl.<span class="hljs-title function_">uniform3iv</span>(ivec3UniformLoc, [v0, v1, v2]);      <span class="hljs-comment">// ivec3 or ivec3 array</span><br>gl.<span class="hljs-property">uniform4i</span> (ivec4UniformLoc, v0, v1, v2, v4);    <span class="hljs-comment">// ivec4</span><br>gl.<span class="hljs-title function_">uniform4iv</span>(ivec4UniformLoc, [v0, v1, v2, v4]);  <span class="hljs-comment">// ivec4 或 ivec4 array</span><br><br>gl.<span class="hljs-property">uniform1i</span> (sampler2DUniformLoc,   v);           <span class="hljs-comment">// sampler2D (textures)</span><br>gl.<span class="hljs-title function_">uniform1iv</span>(sampler2DUniformLoc, [v]);           <span class="hljs-comment">// sampler2D 或 sampler2D array</span><br><br>gl.<span class="hljs-property">uniform1i</span> (samplerCubeUniformLoc,   v);         <span class="hljs-comment">// samplerCube (textures)</span><br>gl.<span class="hljs-title function_">uniform1iv</span>(samplerCubeUniformLoc, [v]);         <span class="hljs-comment">// samplerCube 或 samplerCube array</span><br></code></pre></td></tr></table></figure><p>还有一些类型 bool, bvec2, bvec3, and bvec4。它们可用 gl.uniform?f?或 gl.uniform?i?</p><p>一个数组可以一次设置所有的全局变量:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 着色器里</span><br>uniform vec2 u_someVec2[<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// JavaScript 初始化时</span><br><span class="hljs-keyword">var</span> someVec2Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2&quot;</span>);<br><br><span class="hljs-comment">// 渲染的时候</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Loc, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);  <span class="hljs-comment">// 设置数组 u_someVec2</span><br></code></pre></td></tr></table></figure><p>如果你想单独设置数组中的某个值，就要单独找到该值的地址:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// JavaScript 初始化时</span><br><span class="hljs-keyword">var</span> someVec2Element0Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2[0]&quot;</span>);<br><span class="hljs-keyword">var</span> someVec2Element1Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2[1]&quot;</span>);<br><span class="hljs-keyword">var</span> someVec2Element2Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someVec2[2]&quot;</span>);<br><br><span class="hljs-comment">// 渲染的时候</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Element0Loc, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);  <span class="hljs-comment">// set element 0</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Element1Loc, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);  <span class="hljs-comment">// set element 1</span><br>gl.<span class="hljs-title function_">uniform2fv</span>(someVec2Element2Loc, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);  <span class="hljs-comment">// set element 2</span><br></code></pre></td></tr></table></figure><p>同样的，如果你创建了一个结构体:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs GLSL">struct SomeStruct &#123;<br>  <span class="hljs-type">bool</span> active;<br>  <span class="hljs-type">vec2</span> someVec2;<br>&#125;;<br><span class="hljs-keyword">uniform</span> SomeStruct u_someThing;<br></code></pre></td></tr></table></figure><p>你需要找到每个元素的地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> someThingActiveLoc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someThing.active&quot;</span>);<br><span class="hljs-keyword">var</span> someThingSomeVec2Loc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_someThing.someVec2&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>⌛️ Textures 纹理 (从像素或纹理元素中获取的数据)</li></ol><h3 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a>片段着色器</h3><p>一个片段着色器的工作是为当前光栅化的像素提供颜色值，通常是以下的形式:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-built_in">gl_FragColor</span> = doMathToMakeAColor;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个像素都将调用一次片段着色器，每次调用需要从你设置的特殊全局变量 gl_FragColor 中获取颜色信息</p><p>片段着色器所需的数据，可以通过以下三种方式获取:</p><ol><li>Uniforms 全局变量 (values that stay the same for every pixel of a single draw call)</li></ol><p>同上(顶点着色器)</p><ol start="2"><li>Textures 纹理 (data from pixels&#x2F;texels)</li></ol><p>在着色器中获取纹理信息，可以先创建一个 sampler2D 类型全局变量，然后用 GLSL 方法 texture2D 从纹理中提取信息:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> u_texture;<br><br><span class="hljs-type">void</span> main() &#123;<br>   <span class="hljs-type">vec2</span> texcoord = <span class="hljs-type">vec2</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>);  <span class="hljs-comment">// 获取纹理中心的值</span><br>   <span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-built_in">texture2D</span>(u_texture, texcoord);<br>&#125;<br></code></pre></td></tr></table></figure><p>从纹理中获取的数据取决于很多设置。 至少要创建并给纹理填充数据，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> tex = gl.<span class="hljs-title function_">createTexture</span>();<br>gl.<span class="hljs-title function_">bindTexture</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, tex);<br><span class="hljs-keyword">var</span> level = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> width = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> height = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>([<br>   <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>,   <span class="hljs-comment">// 一个红色的像素</span><br>   <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>,   <span class="hljs-comment">// 一个绿色的像素</span><br>]);<br>gl.<span class="hljs-title function_">texImage2D</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, level, gl.<span class="hljs-property">RGBA</span>, width, height, <span class="hljs-number">0</span>, gl.<span class="hljs-property">RGBA</span>, gl.<span class="hljs-property">UNSIGNED_BYTE</span>, data);<br>gl.<span class="hljs-title function_">texParameteri</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, gl.<span class="hljs-property">TEXTURE_MIN_FILTER</span>, gl.<span class="hljs-property">LINEAR</span>);<br><br><span class="hljs-comment">// 初始化时找到全局变量的地址</span><br><span class="hljs-keyword">var</span> someSamplerLoc = gl.<span class="hljs-title function_">getUniformLocation</span>(someProgram, <span class="hljs-string">&quot;u_texture&quot;</span>);<br><br><span class="hljs-comment">// 在渲染的时候WebGL要求纹理必须绑定到一个纹理单元上</span><br><span class="hljs-keyword">var</span> unit = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 挑选一个纹理单元</span><br>gl.<span class="hljs-title function_">activeTexture</span>(gl.<span class="hljs-property">TEXTURE0</span> + unit);<br>gl.<span class="hljs-title function_">bindTexture</span>(gl.<span class="hljs-property">TEXTURE_2D</span>, tex);<br><br><span class="hljs-comment">// 告诉着色器你要使用的纹理在那个纹理单元</span><br>gl.<span class="hljs-title function_">uniform1i</span>(someSamplerLoc, unit);<br><br></code></pre></td></tr></table></figure><ol start="3"><li>Varyings 可变量 (data passed from the vertex shader and interpolated)</li></ol><p>可变量是一种顶点着色器给片段着色器传值的方式</p><p>为了使用可变量，要在两个着色器中定义同名的可变量。 给顶点着色器中可变量设置的值，会作为参考值进行内插，在绘制像素时传给片段着色器的可变量</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// 顶点着色器</span><br><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec4</span> a_position;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec4</span> u_offset;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-type">vec4</span> v_positionWithOffset;<br><br><span class="hljs-type">void</span> main() &#123;<br>  <span class="hljs-built_in">gl_Position</span> = a_position + u_offset;<br>  v_positionWithOffset = a_position + u_offset;<br>&#125;<br><br><br><span class="hljs-comment">// 片段着色器</span><br><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-type">vec4</span> v_positionWithOffset;<br><br><span class="hljs-type">void</span> main() &#123;<br>  <span class="hljs-comment">// 从裁剪空间 (-1 &lt;-&gt; +1) 转换到颜色空间 (0 -&gt; 1).</span><br>  <span class="hljs-type">vec4</span> color = v_positionWithOffset * <span class="hljs-number">0.5</span> + <span class="hljs-number">0.5</span>;<br>  <span class="hljs-built_in">gl_FragColor</span> = color;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="GLSL"><a href="#GLSL" class="headerlink" title="GLSL"></a>GLSL</h3><p>GLSL 全称是 Graphics Library Shader Language （图形库着色器语言），是着色器使用的语言。 它有一些不同于 JavaScript 的特性，主要目的是为栅格化图形提供常用的计算功能。 所以它内建的数据类型例如 vec2, vec3 和 vec4 分别代表两个值，三个值和四个值， 类似的还有 mat2, mat3 和 mat4 分别代表 2x2, 3x3 和 4x4 矩阵。 你可以做一些运算例如常量和矢量的乘法</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs GLSL"><span class="hljs-type">vec4</span> a = <span class="hljs-type">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-type">vec4</span> b = a * <span class="hljs-number">2.0</span>;<br><span class="hljs-comment">// b 现在是 vec4(2, 4, 6, 8);</span><br><br><br><span class="hljs-comment">// 做矩阵乘法以及矢量和矩阵的乘法</span><br><span class="hljs-type">mat4</span> a = ???<br><span class="hljs-type">mat4</span> b = ???<br><span class="hljs-type">mat4</span> c = a * b;<br><br><span class="hljs-type">vec4</span> v = ???<br><span class="hljs-type">vec4</span> y = c * v;<br><br></code></pre></td></tr></table></figure><p>他还为矢量数据提供多种分量选择器，例如 vec4:</p><ul><li>v.x 和 v.s 以及 v.r ， v[0] 表达的是同一个分量。</li><li>v.y 和 v.t 以及 v.g ， v[1] 表达的是同一个分量。</li><li>v.z 和 v.p 以及 v.b ， v[2] 表达的是同一个分量。</li><li>v.w 和 v.q 以及 v.a ， v[3] 表达的是同一个分量。</li></ul><p>它还支持矢量调制，意味者你可以交换或重复分量:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs GLSL">v.yyyy<br>同<br><span class="hljs-type">vec4</span>(v.y, v.y, v.y, v.y)<br><br>v.bgra<br>同<br><span class="hljs-type">vec4</span>(v.b, v.g, v.r, v.a)<br><br><span class="hljs-type">vec4</span>(v.rgb, <span class="hljs-number">1</span>)<br>同<br><span class="hljs-type">vec4</span>(v.r, v.g, v.b, <span class="hljs-number">1</span>)<br><br><span class="hljs-type">vec4</span>(<span class="hljs-number">1</span>)<br>同<br><span class="hljs-type">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p>值得注意的是 GLSL 是一个强类型的语言:</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">float</span> f = <span class="hljs-number">1</span>;  // 错误，<span class="hljs-number">1</span>是<span class="hljs-built_in">int</span>类型，不能将<span class="hljs-built_in">int</span>型赋值给<span class="hljs-built_in">float</span><br><span class="hljs-built_in">float</span> f = <span class="hljs-number">1.0</span>;      // 使用<span class="hljs-built_in">float</span><br><span class="hljs-built_in">float</span> f = <span class="hljs-built_in">float</span>(<span class="hljs-number">1</span>)  // 转换<span class="hljs-keyword">integer</span>为<span class="hljs-built_in">float</span><br><br></code></pre></td></tr></table></figure><p>上例中 vec4(v.rgb, 1) 不会因为 1 报错，因为 vec4 内部进行了转换类似 float(1)</p><p>GLSL 有一系列内置方法，其中大多数运算支持多种数据类型，并且一次可以运算多个分量，例如:</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// T可以是 float, vec2, vec3 或 vec4 。如果你传的是 vec4 返回的也是 vec4, 返回结果对应每个分量的正弦值。换句话说如果 v 是 vec4 类型</span><br>T <span class="hljs-built_in">sin</span>(T angle)<br><br><span class="hljs-type">vec4</span> s = <span class="hljs-built_in">sin</span>(v)<br>同<br><span class="hljs-type">vec4</span> s = <span class="hljs-type">vec4</span>(<span class="hljs-built_in">sin</span>(v.x), <span class="hljs-built_in">sin</span>(v.y), <span class="hljs-built_in">sin</span>(v.z), <span class="hljs-built_in">sin</span>(v.w))<br><br><span class="hljs-type">vec4</span> m = <span class="hljs-built_in">mix</span>(v1, v2, f);<br>同<br><span class="hljs-type">vec4</span> m = <span class="hljs-type">vec4</span>(<br>  <span class="hljs-built_in">mix</span>(v1.x, v2.x, f),<br>  <span class="hljs-built_in">mix</span>(v1.y, v2.y, f),<br>  <span class="hljs-built_in">mix</span>(v1.z, v2.z, f),<br>  <span class="hljs-built_in">mix</span>(v1.w, v2.w, f));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作原理 - WebGL</title>
    <link href="/webgl/principle/"/>
    <url>/webgl/principle/</url>
    
    <content type="html"><![CDATA[<p>WebGL 在 GPU 上的工作基本上分为两部分，第一部分是将顶点（或数据流）转换到裁剪空间坐标， 第二部分是基于第一部分的结果绘制像素点</p><p>传值可以使用 varyings(可变量)</p><h3 id="关于-buffer-和-attribute"><a href="#关于-buffer-和-attribute" class="headerlink" title="关于 buffer 和 attribute"></a>关于 buffer 和 attribute</h3><p>缓冲操作是在 GPU 上获取顶点和其他顶点数据的一种方式。 gl.createBuffer 创建一个缓冲；gl.bindBuffer 是设置缓冲为当前使用缓冲； gl.bufferData 将数据拷贝到缓冲，这个操作一般在初始化完成。</p><p>一旦数据存到缓冲中，还需要告诉 WebGL 怎么从缓冲中提取数据传给顶点着色器的属性。</p><p>要做这些，首先需要获取 WebGL 给属性分配的地址，如下方代码所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 询问顶点数据应该放在哪里</span><br><span class="hljs-keyword">var</span> positionLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_position&quot;</span>);<br><span class="hljs-keyword">var</span> colorLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(program, <span class="hljs-string">&quot;a_color&quot;</span>);<br></code></pre></td></tr></table></figure><p>一旦知道了属性的地址，在绘制前还需要发出三个命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 告诉WebGL我们想从缓冲中提供数据</span><br>gl.<span class="hljs-title function_">enableVertexAttribArray</span>(location);<br><br><span class="hljs-comment">// 将缓冲绑定到 ARRAY_BUFFER 绑定点，它是WebGL内部的一个全局变量</span><br>gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, someBuffer);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 这个命令告诉WebGL从 ARRAY_BUFFER 绑定点当前绑定的缓冲获取数据。 每个顶点有几个单</span><br><span class="hljs-comment">  * 位的数据(1 - 4)，单位数据类型是什么(BYTE, FLOAT, INT, UNSIGNED_SHORT, 等等...)，</span><br><span class="hljs-comment">  * stride 是从一个数据到下一个数据要跳过多少位，最后是数据在缓冲的什么位置。</span><br><span class="hljs-comment">  * 如果每个类型的数据都用一个缓冲存储，stride 和 offset 都是 0 。 对 stride 来说 0 表</span><br><span class="hljs-comment">  * 示 “用符合单位类型和单位个数的大小”。 对 offset 来说 0 表示从缓冲起始位置开始读取</span><br><span class="hljs-comment">  * 它们使用 0 以外的值时会复杂得多，虽然这样会取得一些性能能上的优势，</span><br><span class="hljs-comment">  * 但是一般情况下并不值得，除非你想充分压榨WebGL的性能。</span><br><span class="hljs-comment">  */</span><br><br>gl.<span class="hljs-title function_">vertexAttribPointer</span>(<br>    location,<br>    numComponents,<br>    typeOfData,<br>    normalizeFlag,<br>    strideToNextPieceOfData,<br>    offsetIntoBuffer);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础 - WebGL</title>
    <link href="/webgl/basic/"/>
    <url>/webgl/basic/</url>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>WebGL 在电脑的 GPU 中运行。因此你需要使用能够在 GPU 上运行的代码。 这样的代码需要提供成对的方法。每对方法中一个叫顶点着色器， 另一个叫片段着色器，并且使用一种和 C 或 C++类似的强类型的语言 GLSL。 (GL 着色语言)。 每一对组合起来称作一个 program（着色程序）。</p><p>顶点着色器的作用是计算顶点的位置。根据计算出的一系列顶点位置，WebGL 可以对点， 线和三角形在内的一些图元进行光栅化处理。当对这些图元进行光栅化处理时需要使用片段着色器方法。 片段着色器的作用是计算出当前绘制图元中每个像素的颜色值。</p><p>几乎整个 WebGL API 都是关于如何设置这些成对方法的状态值以及运行它们。 对于想要绘制的每一个对象，都需要先设置一系列状态值，然后通过调用 gl.drawArrays 或 gl.drawElements 运行一个着色方法对，使得你的着色器对能够在 GPU 上运行。</p><p>这些方法对所需的任何数据都需要发送到 GPU，这里有着色器获取数据的 4 种方法：</p><ol><li>属性(Attributes)和缓冲</li></ol><p>缓冲是发送到 GPU 的一些二进制数据序列，通常情况下缓冲数据包括位置，法向量，纹理坐标，顶点颜色值等。 你可以存储任何数据。</p><p>属性用来指明怎么从缓冲中获取所需数据并将它提供给顶点着色器。 例如你可能在缓冲中用三个 32 位的浮点型数据存储一个位置值。 对于一个确切的属性你需要告诉它从哪个缓冲中获取数据，获取什么类型的数据（三个 32 位的浮点数据）， 起始偏移值是多少，到下一个位置的字节数是多少。</p><p>缓冲不是随意读取的。事实上顶点着色器运行的次数是一个指定的确切数字， 每一次运行属性会从指定的缓冲中按照指定规则依次获取下一个值。</p><ol start="2"><li>全局变量(Uniforms)</li></ol><p>全局变量在着色程序运行前赋值，在运行过程中全局有效。</p><ol start="3"><li>纹理(Textures)</li></ol><p>纹理是一个数据序列，可以在着色程序运行中随意读取其中的数据。 大多数情况存放的是图像数据，但是纹理仅仅是数据序列， 你也可以随意存放除了颜色数据以外的其它数据</p><ol start="4"><li>可变量(Varyings)</li></ol><p>可变量是一种顶点着色器给片段着色器传值的方式，依照渲染的图元是点， 线还是三角形，顶点着色器中设置的可变量会在片段着色器运行中获取不同的插值</p><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><p><img src="/img/posts/WebGL%E5%9F%BA%E7%A1%80%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png" alt="WebGL基础创建过程"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot; /&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-id">#canvas</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">99vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">99vh</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vertex-shader-2d&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;notjs&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 一个属性变量，将会从缓冲中获取数据</span></span><br><span class="language-javascript">      attribute vec4 a_position;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// gl_Position 是一个顶点着色器主要设置的变量</span></span><br><span class="language-javascript">        gl_Position = a_position;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fragment-shader-2d&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;notjs&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      precision mediump float;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        gl_FragColor = <span class="hljs-title function_">vec4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#canvas&quot;</span>);</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> gl = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;webgl&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> vertexShaderSource =</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#vertex-shader-2d&quot;</span>).<span class="hljs-property">text</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> fragmentShaderSource = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&quot;#fragment-shader-2d&quot;</span></span><br><span class="language-javascript">      ).<span class="hljs-property">text</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> vertexShader = <span class="hljs-title function_">createShader</span>(</span><br><span class="language-javascript">        gl,</span><br><span class="language-javascript">        gl.<span class="hljs-property">VERTEX_SHADER</span>,</span><br><span class="language-javascript">        vertexShaderSource</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> fragmentShader = <span class="hljs-title function_">createShader</span>(</span><br><span class="language-javascript">        gl,</span><br><span class="language-javascript">        gl.<span class="hljs-property">FRAGMENT_SHADER</span>,</span><br><span class="language-javascript">        fragmentShaderSource</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">createShader</span>(<span class="hljs-params">gl, type, source</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> shader = gl.<span class="hljs-title function_">createShader</span>(type);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">shaderSource</span>(shader, source);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">compileShader</span>(shader);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> success = gl.<span class="hljs-title function_">getShaderParameter</span>(shader, gl.<span class="hljs-property">COMPILE_STATUS</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (success) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> shader;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gl.<span class="hljs-title function_">getShaderInfoLog</span>(shader));</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">deleteShader</span>(shader);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">createProgram</span>(<span class="hljs-params">gl, vertexShader, fragmentShader</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> program = gl.<span class="hljs-title function_">createProgram</span>();</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">attachShader</span>(program, vertexShader);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">attachShader</span>(program, fragmentShader);</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">linkProgram</span>(program);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> success = gl.<span class="hljs-title function_">getProgramParameter</span>(program, gl.<span class="hljs-property">LINK_STATUS</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (success) <span class="hljs-keyword">return</span> program;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gl.<span class="hljs-title function_">getProgramInfoLog</span>(program));</span><br><span class="language-javascript">        gl.<span class="hljs-title function_">deleteProgram</span>(program);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> program = <span class="hljs-title function_">createProgram</span>(gl, vertexShader, fragmentShader);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positionAttributeLocation = gl.<span class="hljs-title function_">getAttribLocation</span>(</span><br><span class="language-javascript">        program,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;a_position&quot;</span></span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positionBuffer = gl.<span class="hljs-title function_">createBuffer</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">bindBuffer</span>(gl.<span class="hljs-property">ARRAY_BUFFER</span>, positionBuffer);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> positions = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0</span>];</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">bufferData</span>(</span><br><span class="language-javascript">        gl.<span class="hljs-property">ARRAY_BUFFER</span>,</span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float32Array</span>(positions),</span><br><span class="language-javascript">        gl.<span class="hljs-property">STATIC_DRAW</span></span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 一个是拥有的实际像素个数，一个是显示的大小</span></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">viewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>, gl.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">clearColor</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">      gl.<span class="hljs-title function_">clear</span>(gl.<span class="hljs-property">COLOR_BUFFER_BIT</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">useProgram</span>(program);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">enableVertexAttribArray</span>(positionAttributeLocation);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> size = <span class="hljs-number">2</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> type = gl.<span class="hljs-property">FLOAT</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> normalize = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> stride = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> offset = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      gl.<span class="hljs-title function_">vertexAttribPointer</span>(</span><br><span class="language-javascript">        positionAttributeLocation,</span><br><span class="language-javascript">        size,</span><br><span class="language-javascript">        type,</span><br><span class="language-javascript">        normalize,</span><br><span class="language-javascript">        stride,</span><br><span class="language-javascript">        offset</span><br><span class="language-javascript">      );</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> primitiveType = gl.<span class="hljs-property">TRIANGLES</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> count = <span class="hljs-number">3</span>;</span><br><span class="language-javascript">      gl.<span class="hljs-title function_">drawArrays</span>(primitiveType, offset, count);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> WebGL做的是一件简单的事，它仅仅运行用户提供的两个方法，一个顶点着色器和一个片段着色器， 去绘制点，线和三角形。WebGL API只做光栅化处理并且在概念上十分容易理解。</p>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快捷键 - Blender</title>
    <link href="/blender/Keymap/"/>
    <url>/blender/Keymap/</url>
    
    <content type="html"><![CDATA[<h3 id="全局快捷键"><a href="#全局快捷键" class="headerlink" title="全局快捷键"></a>全局快捷键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Ctrl-O</td><td align="center">打开文件</td></tr><tr><td align="center">Ctrl-S</td><td align="center">保存文件</td></tr><tr><td align="center">Shift-Ctrl-S</td><td align="center">另存为</td></tr><tr><td align="center">Ctrl-N</td><td align="center">新建</td></tr><tr><td align="center">Ctrl-Z</td><td align="center">撤销</td></tr><tr><td align="center">Shift-Ctrl-Z</td><td align="center">重做</td></tr><tr><td align="center">Ctrl-Q</td><td align="center">退出</td></tr><tr><td align="center">F1</td><td align="center">帮助</td></tr><tr><td align="center">F2</td><td align="center">重命名</td></tr><tr><td align="center">F3</td><td align="center">操作搜索</td></tr><tr><td align="center">F4(🤕)</td><td align="center">文件上下文(应该是指文件菜单的上下文吧？？？咋想不起还有这操作)</td></tr><tr><td align="center">Q</td><td align="center">快速收藏夹</td></tr><tr><td align="center">Ctrl-Spacebar</td><td align="center">窗口最大化切换</td></tr><tr><td align="center">Ctrl-Alt-Spacebar</td><td align="center">窗口全屏</td></tr><tr><td align="center">Spacebar</td><td align="center">被我改成调出工具栏了</td></tr><tr><td align="center">Shift-Spacebar</td><td align="center">播放动画</td></tr><tr><td align="center">Shift-Ctrl-Spacebar</td><td align="center">反向播放动画(这操作还没体验过)</td></tr></tbody></table><h3 id="通用编辑器快捷键"><a href="#通用编辑器快捷键" class="headerlink" title="通用编辑器快捷键"></a>通用编辑器快捷键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">全选</td></tr><tr><td align="center">Alt-A</td><td align="center">清空已选</td></tr><tr><td align="center">Ctrl-I</td><td align="center">反选</td></tr><tr><td align="center">H</td><td align="center">隐藏所选</td></tr><tr><td align="center">Alt-H</td><td align="center">显示隐藏项</td></tr><tr><td align="center">T</td><td align="center">切换工具栏</td></tr><tr><td align="center">N</td><td align="center">切换侧边栏</td></tr></tbody></table><h3 id="3D-视图快捷键"><a href="#3D-视图快捷键" class="headerlink" title="3D 视图快捷键"></a>3D 视图快捷键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Tab</td><td align="center">编辑模式切换</td></tr><tr><td align="center">Ctrl-Tab</td><td align="center">模式切换饼图菜单</td></tr><tr><td align="center">1-3</td><td align="center">编辑模式点、线、面切换</td></tr><tr><td align="center">&#96;</td><td align="center">视图导航饼图菜单</td></tr><tr><td align="center">Ctrl-&#96;(😩)</td><td align="center">切换 gizmos ？？？？</td></tr><tr><td align="center">Shift-&#96;(😩)</td><td align="center">步行&#x2F;飞行模式 ？？？</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blender</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上下文 - Github Actions</title>
    <link href="/github/gh-actions/context/"/>
    <url>/github/gh-actions/context/</url>
    
    <content type="html"><![CDATA[<h3 id="关于上下文"><a href="#关于上下文" class="headerlink" title="关于上下文"></a>关于上下文</h3><p>上下文是一种访问工作流运行、变量、运行器环境、作业及步骤相关信息的方式。 每个上下文都是一个包含属性的对象，属性可以是字符串或其他对象。</p><h5 id="使用表达式访问上下文"><a href="#使用表达式访问上下文" class="headerlink" title="使用表达式访问上下文"></a>使用表达式访问上下文</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&lt;context&gt;</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="访问上下文的两种方式"><a href="#访问上下文的两种方式" class="headerlink" title="访问上下文的两种方式"></a>访问上下文的两种方式</h5><ol><li>github[‘sha’]</li><li>github.sha</li></ol><h5 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h5><ol><li>默认环境变量：仅存在于执行作业的运行器上</li><li>上下文：你可以在工作流的任何时间点使用大多数上下文</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">prod-check:</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.ref</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;refs/heads/main&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Deploying to production server on branch $GITHUB_REF&quot;</span><br></code></pre></td></tr></table></figure><h5 id="可用的上下文"><a href="#可用的上下文" class="headerlink" title="可用的上下文"></a>可用的上下文</h5><ol><li><p>github:</p><p>上下文包含有关工作流运行和触发运行的事件的信息。 还可以读取环境变量中的大多数 github 上下文数据</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  action<span class="hljs-punctuation">:</span> 正在运行的操作的名称，或步骤的id<br>  action_path<span class="hljs-punctuation">:</span> 操作所在的路径<span class="hljs-punctuation">,</span><br>  action_ref<span class="hljs-punctuation">:</span> 对于执行操作的步骤，这是正在执行的操作的引用<span class="hljs-punctuation">,</span><br>  action_repository<span class="hljs-punctuation">:</span> 对于执行操作的步骤，这是操作的所有者和存储库名称<br>  action_status<span class="hljs-punctuation">:</span> 对于复合操作，这是复合操作的当前结果<br>  actor<span class="hljs-punctuation">:</span> 触发初始工作流运行的用户的用户名<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">CI</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>, <span class="hljs-string">pull_request</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">normal_ci:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">normal</span> <span class="hljs-string">CI</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./run-tests</span><br><br>  <span class="hljs-attr">pull_request_ci:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event_name</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;pull_request&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">PR</span> <span class="hljs-string">CI</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./run-additional-pr-ci</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>env</p><p>env 上下文包含已在工作流、作业或步骤中设置的变量</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  &lt;env_name&gt;<span class="hljs-punctuation">:</span> 特定环境变量的值<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Hi</span> <span class="hljs-string">Mascot</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">mascot:</span> <span class="hljs-string">Mona</span><br>  <span class="hljs-attr">super_duper_var:</span> <span class="hljs-string">totally_awesome</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">windows_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">windows-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hi $<span class="hljs-template-variable">&#123;&#123; env.mascot &#125;&#125;</span>&#x27;</span>  <span class="hljs-comment"># Hi Mona</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hi $<span class="hljs-template-variable">&#123;&#123; env.mascot &#125;&#125;</span>&#x27;</span>  <span class="hljs-comment"># Hi Octocat</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">mascot:</span> <span class="hljs-string">Octocat</span><br>  <span class="hljs-attr">linux_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">mascot:</span> <span class="hljs-string">Tux</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;Hi $<span class="hljs-template-variable">&#123;&#123; env.mascot &#125;&#125;</span>&#x27;</span>  <span class="hljs-comment"># Hi Tux</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>vars</p><p>vars 上下文的内容是配置变量名称与其值的映射。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-comment"># Setting an environment variable with the value of a configuration variable</span><br>  <span class="hljs-attr">env_var:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.ENV_CONTEXT_VAR</span> <span class="hljs-string">&#125;&#125;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">display-variables:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.JOB_NAME</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-comment"># You can use configuration variables with the `vars` context for dynamic jobs</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.USE_VARIABLES</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.RUNNER</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">environment:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.ENVIRONMENT_STAGE</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">variables</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        echo &quot;repository variable : $REPOSITORY_VAR&quot;</span><br><span class="hljs-string">        echo &quot;organization variable : $ORGANIZATION_VAR&quot;</span><br><span class="hljs-string">        echo &quot;overridden variable : $OVERRIDE_VAR&quot;</span><br><span class="hljs-string">        echo &quot;variable from shell environment : $env_var&quot;</span><br><span class="hljs-string"></span>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">REPOSITORY_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.REPOSITORY_VAR</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">ORGANIZATION_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.ORGANIZATION_VAR</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">OVERRIDE_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.OVERRIDE_VAR</span> <span class="hljs-string">&#125;&#125;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.HELLO_WORLD_STEP</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.HELLO_WORLD_ENABLED</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/hello-world-javascript-action@main</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">who-to-greet:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">vars.GREET_NAME</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>job</p><p>job 上下文包含当前正在运行的作业相关信息</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 作业的容器相关信息</span><br>  container<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> 容器的 ID<span class="hljs-punctuation">,</span><br>    network<span class="hljs-punctuation">:</span> 容器网络的 ID<span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 为作业创建的服务容器</span><br>  services<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> 服务容器的 ID<span class="hljs-punctuation">,</span><br>    network<span class="hljs-punctuation">:</span> 服务容器网络的 ID<span class="hljs-punctuation">,</span><br>    ports<span class="hljs-punctuation">:</span> 服务容器显露的端口<span class="hljs-punctuation">,</span><br>    status<span class="hljs-punctuation">:</span> 作业的当前状态 success | failure | cancelled<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="5"><li><p>jobs</p><p>此示例可重用工作流使用 jobs 上下文设置可重用工作流的输出。 请注意输出如何从步骤流向作业，然后流向 workflow_call 触发器</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Reusable</span> <span class="hljs-string">workflow</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_call:</span><br>    <span class="hljs-comment"># Map the workflow outputs to job outputs</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">firstword:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The first output string&quot;</span><br>        <span class="hljs-attr">value:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">jobs.example_job.outputs.output1</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">secondword:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;The second output string&quot;</span><br>        <span class="hljs-attr">value:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">jobs.example_job.outputs.output2</span> <span class="hljs-string">&#125;&#125;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example_job:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-string">output</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-comment"># Map the job outputs to step outputs</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">output1:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.step1.outputs.firstword</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">output2:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.step2.outputs.secondword</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">step1</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;firstword=hello&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_OUTPUT</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">step2</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;secondword=world&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_OUTPUT</span><br></code></pre></td></tr></table></figure><ol start="6"><li><p>steps</p><p>steps 上下文包含有关当前作业中已指定 id 且已运行的步骤的信息。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-string">random</span> <span class="hljs-string">failure</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">randomly-failing-job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-number">0</span> <span class="hljs-string">or</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">generate_number</span><br>        <span class="hljs-attr">run:</span>  <span class="hljs-string">echo</span> <span class="hljs-string">&quot;random_number=$(($RANDOM % 2))&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_OUTPUT</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pass</span> <span class="hljs-string">or</span> <span class="hljs-string">fail</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">if</span> [[ <span class="hljs-string">$<span class="hljs-template-variable">&#123;&#123; steps.generate_number.outputs.random_number &#125;&#125;</span></span> <span class="hljs-string">==</span> <span class="hljs-number">0</span> ]]<span class="hljs-string">;</span> <span class="hljs-string">then</span> <span class="hljs-string">exit</span> <span class="hljs-number">0</span><span class="hljs-string">;</span> <span class="hljs-string">else</span> <span class="hljs-string">exit</span> <span class="hljs-number">1</span><span class="hljs-string">;</span> <span class="hljs-string">fi</span><br></code></pre></td></tr></table></figure><ol start="7"><li><p>runner</p><p>runner 上下文包含正在执行当前作业的运行器相关信息。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">with</span> <span class="hljs-string">logs</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir $&#123;&#123; runner.temp &#125;&#125;/build_logs</span><br><span class="hljs-string">          ./build.sh --log-path $&#123;&#123; runner.temp &#125;&#125;/build_logs</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">logs</span> <span class="hljs-string">on</span> <span class="hljs-string">fail</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">failure()</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">failure</span> <span class="hljs-string">logs</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.temp</span> <span class="hljs-string">&#125;&#125;/build_logs</span><br></code></pre></td></tr></table></figure><ol start="8"><li><p>secrets</p><p>secrets 上下文的以下示例内容显示自动 GITHUB_TOKEN，以及可用于工作流运行的两个其他机密。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Pull</span> <span class="hljs-string">request</span> <span class="hljs-string">labeler</span><br><span class="hljs-attr">on:</span> [ <span class="hljs-string">pull_request_target</span> ]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">triage:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">read</span><br>      <span class="hljs-attr">pull-requests:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/labeler@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">repo-token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><ol start="9"><li><p>strategy</p><p>对于具有矩阵的工作流，strategy 上下文包含有关当前作业的矩阵执行策略的信息。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Test</span> <span class="hljs-string">matrix</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">test:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">test-group:</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>        <span class="hljs-attr">node:</span> [<span class="hljs-number">14</span>, <span class="hljs-number">16</span>]<br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">test</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">test-job-$&#123;&#123;</span> <span class="hljs-string">strategy.job-index</span> <span class="hljs-string">&#125;&#125;.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">logs</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">log</span> <span class="hljs-string">for</span> <span class="hljs-string">job</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">strategy.job-index</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">test-job-$&#123;&#123;</span> <span class="hljs-string">strategy.job-index</span> <span class="hljs-string">&#125;&#125;.txt</span><br></code></pre></td></tr></table></figure><ol start="10"><li><p>matrix</p><p>对于具有矩阵的工作流，matrix 上下文包含工作流程文件中定义的适用于当前作业的矩阵属性。 例如，如果使用 os 和 node 键配置矩阵，则 matrix 上下文对象包含 os 和 node 属性，该属性具有用于当前作业的值</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Test</span> <span class="hljs-string">matrix</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-latest</span>, <span class="hljs-string">windows-latest</span>]<br>        <span class="hljs-attr">node:</span> [<span class="hljs-number">14</span>, <span class="hljs-number">16</span>]<br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">ci</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">tests</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><ol start="11"><li><p>needs</p><p>needs 上下文包含定义为当前作业直接依赖项的所有作业的输出。 请注意，这不包括隐式依赖作业（例如依赖作业的依赖作业）</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">and</span> <span class="hljs-string">deploy</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">build_id:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.build_step.outputs.build_id</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">build_step</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          ./build</span><br><span class="hljs-string">          echo &quot;build_id=$BUILD_ID&quot; &gt;&gt; $GITHUB_OUTPUT</span><br><span class="hljs-string"></span>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">needs:</span> <span class="hljs-string">build</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">./deploy</span> <span class="hljs-string">--build</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.build.outputs.build_id</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">debug:</span><br>    <span class="hljs-attr">needs:</span> [<span class="hljs-string">build</span>, <span class="hljs-string">deploy</span>]<br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">failure()</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">./debug</span><br></code></pre></td></tr></table></figure><ol start="12"><li><p>inputs</p><p>inputs 上下文包含传递给操作可重用工作流或手动触发的工作流的输入属性。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">name:</span> <span class="hljs-string">Reusable</span> <span class="hljs-string">deploy</span> <span class="hljs-string">workflow</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_call:</span><br>    <span class="hljs-attr">inputs:</span><br>      <span class="hljs-attr">build_id:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">number</span><br>      <span class="hljs-attr">deploy_target:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">perform_deploy:</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.perform_deploy</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">build</span> <span class="hljs-string">to</span> <span class="hljs-string">target</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">deploy</span> <span class="hljs-string">--build</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.build_id</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">--target</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">inputs.deploy_target</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>gh-actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本功能 - Gihub Actions</title>
    <link href="/github/gh-actions/basic-feture/"/>
    <url>/github/gh-actions/basic-feture/</url>
    
    <content type="html"><![CDATA[<h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example-job:</span><br>      <span class="hljs-attr">steps:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Connect</span> <span class="hljs-string">to</span> <span class="hljs-string">PostgreSQL</span><br>          <span class="hljs-attr">run:</span> <span class="hljs-string">node</span> <span class="hljs-string">client.js</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-attr">POSTGRES_HOST:</span> <span class="hljs-string">postgres</span><br>            <span class="hljs-attr">POSTGRES_PORT:</span> <span class="hljs-number">5432</span><br></code></pre></td></tr></table></figure><h3 id="添加脚本到工作流程"><a href="#添加脚本到工作流程" class="headerlink" title="添加脚本到工作流程"></a>添加脚本到工作流程</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example-job:</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">build</span> <span class="hljs-string">script</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./.github/scripts/build.sh</span><br>        <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span><br></code></pre></td></tr></table></figure><h3 id="在作业之间共享数据"><a href="#在作业之间共享数据" class="headerlink" title="在作业之间共享数据"></a>在作业之间共享数据</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">example-job:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Save</span> <span class="hljs-string">output</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          expr 1 + 1 &gt; output.log</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">output</span> <span class="hljs-string">file</span>  <span class="hljs-comment"># 上传</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">output-log-file</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">output.log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Download</span> <span class="hljs-string">a</span> <span class="hljs-string">single</span> <span class="hljs-string">artifact</span>  <span class="hljs-comment"># 下载</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/download-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">output-log-file</span><br></code></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># $&#123;&#123; expression &#125;&#125;</span><br><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/hello-world-javascript-action@e76147da8e5c81eaf017dede5645551d4b94427b</span><br>      <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&lt;expression&gt;</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">MY_ENV_VAR:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&lt;expression&gt;</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">myNull:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-literal">null</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myBoolean:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-literal">false</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myIntegerNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">711</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myFloatNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">-9.2</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myHexNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">0xff</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myExponentialNumber:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-number">-2.99e-2</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-attr">myString:</span> <span class="hljs-string">Mona</span> <span class="hljs-string">the</span> <span class="hljs-string">Octocat</span><br>  <span class="hljs-attr">myStringInBraces:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">&#x27;It&#x27;</span><span class="hljs-string">&#x27;s open source!&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="运算符-JS-通用"><a href="#运算符-JS-通用" class="headerlink" title="运算符(JS 通用)"></a>运算符(JS 通用)</h5><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li><p>contains( search, item )</p></li><li><p>startsWith( searchString, searchValue )</p></li><li><p>endsWith( searchString, searchValue )</p></li><li><p>format( string, replaceValue0, replaceValue1, …, replaceValueN)</p></li><li><p>join( array, optionalSeparator )</p></li><li><p>toJSON(value)</p></li><li><p>fromJSON(value)</p></li><li><p>hashFiles(path)</p></li><li><p>success()  如果前面的步骤都没有失败或被取消，则返回 true。</p></li><li><p>always()</p></li><li><p>cancelled()</p></li><li><p>failure()</p></li><li> *  对象过滤器</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YAML">[<br>  &#123; <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-attr">&quot;quantity&quot;:</span> <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-attr">&quot;quantity&quot;:</span> <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">&quot;name&quot;:</span> <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-attr">&quot;quantity&quot;:</span> <span class="hljs-number">1</span> &#125;<br>]<br></code></pre></td></tr></table></figure><p>筛选器 fruits.*.name 返回数组 [ “apple”, “orange”, “pear” ]。</p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>gh-actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于 - Github Actions</title>
    <link href="/github/gh-actions/abstract/"/>
    <url>/github/gh-actions/abstract/</url>
    
    <content type="html"><![CDATA[<h3 id="Github-Actions-的组件"><a href="#Github-Actions-的组件" class="headerlink" title="Github Actions 的组件"></a>Github Actions 的组件</h3><h5 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h5><p>工作流程由签入到存储库的 YAML 文件定义，并在存储库中的事件触发时运行，也可以手动触发，或按定义的时间表触发。工作流程在存储库的 .github&#x2F;workflows 目录中定义，存储库可以有多个工作流程，每个工作流程都可以执行不同的任务集。</p><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>事件是存储库中触发工作流程运行的特定活动。 例如，当有人创建拉取请求、打开议题或将提交推送到存储库时。</p><h5 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h5><p>作业是工作流中在同一运行器上执行的一组步骤。 每个步骤要么是一个将要执行的 shell 脚本，要么是一个将要运行的动作。 步骤按顺序执行，并且相互依赖。 由于每个步骤都在同一运行器上执行，因此您可以将数据从一个步骤共享到另一个步骤。 例如，可以有一个生成应用程序的步骤，后跟一个测试已生成应用程序的步骤。</p><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p>操作是用于 GitHub Actions 平台的自定义应用程序，它执行复杂但经常重复的任务。 使用操作可帮助减少在工作流程文件中编写的重复代码量。</p><h5 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h5><p>运行程序是触发工作流时运行工作流的服务器。 每个运行器一次可以运行一个作业。 GitHub 提供 Ubuntu Linux、Microsoft Windows 和 macOS 运行器来运行您的工作流程；每个工作流程运行都在新预配的全新虚拟机中执行。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># .github/workflows/*.yml</span><br><br><span class="hljs-attr">name:</span> <span class="hljs-string">learn-github-actions</span>  <span class="hljs-comment"># 工作流名称</span><br><span class="hljs-attr">run-name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.actor</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">is</span> <span class="hljs-string">learning</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Actions</span>  <span class="hljs-comment"># 工作流运行名称</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]  <span class="hljs-comment"># 触发器，使用push事件</span><br><span class="hljs-attr">jobs:</span>  <span class="hljs-comment"># 工作流下的所有作业</span><br>  <span class="hljs-attr">check-bats-version:</span>  <span class="hljs-comment"># 定义一个作业名称</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>  <span class="hljs-comment"># 运行程序</span><br>    <span class="hljs-attr">steps:</span>  <span class="hljs-comment"># 作业下的所有步骤</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">-g</span> <span class="hljs-string">bats</span>  <span class="hljs-comment"># 操作(执行命令)</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">bats</span> <span class="hljs-string">-v</span><br></code></pre></td></tr></table></figure><h3 id="查找和自定义操作"><a href="#查找和自定义操作" class="headerlink" title="查找和自定义操作"></a>查找和自定义操作</h3><h5 id="使用-GitHub-Marketplace"><a href="#使用-GitHub-Marketplace" class="headerlink" title="使用 GitHub Marketplace"></a>使用 GitHub Marketplace</h5><h5 id="从相同仓库添加操作"><a href="#从相同仓库添加操作" class="headerlink" title="从相同仓库添加操作"></a>从相同仓库添加操作</h5><p>使用相对路径</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-- hello-world (repository)</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">__ .github</span><br><span class="hljs-string"></span>|<span class="hljs-string">       └── workflows</span><br><span class="hljs-string"></span>|<span class="hljs-string">           └── my-first-workflow.yml</span><br><span class="hljs-string"></span>|<span class="hljs-string">       └── actions</span><br><span class="hljs-string"></span>|<span class="hljs-string">           </span>|<span class="hljs-string">__ hello-world-action</span><br><span class="hljs-string"></span>|<span class="hljs-string">               └── action.yml</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># This step checks out a copy of your repository.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-comment"># This step references the directory that contains the action.</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">./.github/actions/hello-world-action</span><br></code></pre></td></tr></table></figure><p>action.yml 文件用于提供操作的元数据。</p><h5 id="从不同仓库添加操作"><a href="#从不同仓库添加操作" class="headerlink" title="从不同仓库添加操作"></a>从不同仓库添加操作</h5><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">jobs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">my_first_job</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">steps</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: My first step</span><br>        <span class="hljs-attribute">uses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">actions/setup-node@v3</span><br></code></pre></td></tr></table></figure><h5 id="对自定义操作使用发行版管理"><a href="#对自定义操作使用发行版管理" class="headerlink" title="对自定义操作使用发行版管理"></a>对自定义操作使用发行版管理</h5><ol><li>使用标签</li><li>使用 SHA</li><li>使用分支</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/javascript-action@mai</span><br></code></pre></td></tr></table></figure><h5 id="对操作使用输入和输出"><a href="#对操作使用输入和输出" class="headerlink" title="对操作使用输入和输出"></a>对操作使用输入和输出</h5>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>gh-actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC文档概览</title>
    <link href="/gis/dc/%E6%A6%82%E8%A7%88/"/>
    <url>/gis/dc/%E6%A6%82%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h3 id="基础构成"><a href="#基础构成" class="headerlink" title="基础构成"></a>基础构成</h3><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><ol><li>DC<blockquote><p>全局</p></blockquote></li><li>Cesium<blockquote><p>const { Cesium } &#x3D; DC.Namespace</p></blockquote></li><li>turf<blockquote><p>const { turf } &#x3D; DC.Namespace</p></blockquote></li></ol><h5 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h5><h5 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h5><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><h3 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h3><h5 id="Viewer"><a href="#Viewer" class="headerlink" title="Viewer"></a>Viewer</h5><h5 id="Popup"><a href="#Popup" class="headerlink" title="Popup"></a>Popup</h5><h5 id="ContextMenu"><a href="#ContextMenu" class="headerlink" title="ContextMenu"></a>ContextMenu</h5><h5 id="Tooltip"><a href="#Tooltip" class="headerlink" title="Tooltip"></a>Tooltip</h5><h5 id="MapSplit"><a href="#MapSplit" class="headerlink" title="MapSplit"></a>MapSplit</h5><h5 id="TilesetSplit"><a href="#TilesetSplit" class="headerlink" title="TilesetSplit"></a>TilesetSplit</h5><h5 id="SceneSplit"><a href="#SceneSplit" class="headerlink" title="SceneSplit"></a>SceneSplit</h5><h5 id="Compass"><a href="#Compass" class="headerlink" title="Compass"></a>Compass</h5><h5 id="ZoomController"><a href="#ZoomController" class="headerlink" title="ZoomController"></a>ZoomController</h5><h5 id="LocationBar"><a href="#LocationBar" class="headerlink" title="LocationBar"></a>LocationBar</h5><h5 id="DistanceLegend"><a href="#DistanceLegend" class="headerlink" title="DistanceLegend"></a>DistanceLegend</h5><h5 id="LoadingMask"><a href="#LoadingMask" class="headerlink" title="LoadingMask"></a>LoadingMask</h5><h5 id="SkyBox"><a href="#SkyBox" class="headerlink" title="SkyBox"></a>SkyBox</h5><h5 id="GroundSkyBox"><a href="#GroundSkyBox" class="headerlink" title="GroundSkyBox"></a>GroundSkyBox</h5><h5 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h5><h5 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h5><h5 id="TilesetStyle"><a href="#TilesetStyle" class="headerlink" title="TilesetStyle"></a>TilesetStyle</h5><h5 id="JulianDate"><a href="#JulianDate" class="headerlink" title="JulianDate"></a>JulianDate</h5><h5 id="Rect"><a href="#Rect" class="headerlink" title="Rect"></a>Rect</h5><h5 id="CallbackProperty"><a href="#CallbackProperty" class="headerlink" title="CallbackProperty"></a>CallbackProperty</h5><h5 id="Parse"><a href="#Parse" class="headerlink" title="Parse"></a>Parse</h5><h5 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h5><h5 id="CoordTransform"><a href="#CoordTransform" class="headerlink" title="CoordTransform"></a>CoordTransform</h5><h5 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h5><h5 id="Util"><a href="#Util" class="headerlink" title="Util"></a>Util</h5><h5 id="DomUtil"><a href="#DomUtil" class="headerlink" title="DomUtil"></a>DomUtil</h5><h3 id="地图地形"><a href="#地图地形" class="headerlink" title="地图地形"></a>地图地形</h3><h5 id="ImageryLayerFactory"><a href="#ImageryLayerFactory" class="headerlink" title="ImageryLayerFactory"></a>ImageryLayerFactory</h5><h5 id="TerrainFactory"><a href="#TerrainFactory" class="headerlink" title="TerrainFactory"></a>TerrainFactory</h5><h3 id="业务图层"><a href="#业务图层" class="headerlink" title="业务图层"></a>业务图层</h3><h5 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h5><h5 id="LayerGroup"><a href="#LayerGroup" class="headerlink" title="LayerGroup"></a>LayerGroup</h5><h5 id="VectorLayer"><a href="#VectorLayer" class="headerlink" title="VectorLayer"></a>VectorLayer</h5><h5 id="DynamicLayer"><a href="#DynamicLayer" class="headerlink" title="DynamicLayer"></a>DynamicLayer</h5><h5 id="PrimitiveLayer"><a href="#PrimitiveLayer" class="headerlink" title="PrimitiveLayer"></a>PrimitiveLayer</h5><h5 id="GroundPrimitiveLayer"><a href="#GroundPrimitiveLayer" class="headerlink" title="GroundPrimitiveLayer"></a>GroundPrimitiveLayer</h5><h5 id="TilesetLayer"><a href="#TilesetLayer" class="headerlink" title="TilesetLayer"></a>TilesetLayer</h5><h5 id="GeoJsonLayer"><a href="#GeoJsonLayer" class="headerlink" title="GeoJsonLayer"></a>GeoJsonLayer</h5><h5 id="TopoJsonLayer"><a href="#TopoJsonLayer" class="headerlink" title="TopoJsonLayer"></a>TopoJsonLayer</h5><h5 id="HtmlLayer"><a href="#HtmlLayer" class="headerlink" title="HtmlLayer"></a>HtmlLayer</h5><h5 id="CzmlLayer"><a href="#CzmlLayer" class="headerlink" title="CzmlLayer"></a>CzmlLayer</h5><h5 id="KmlLayer"><a href="#KmlLayer" class="headerlink" title="KmlLayer"></a>KmlLayer</h5><h5 id="GpxLayer"><a href="#GpxLayer" class="headerlink" title="GpxLayer"></a>GpxLayer</h5><h5 id="ClusterLayer"><a href="#ClusterLayer" class="headerlink" title="ClusterLayer"></a>ClusterLayer</h5><h5 id="HeatLayer"><a href="#HeatLayer" class="headerlink" title="HeatLayer"></a>HeatLayer</h5><h5 id="WindLayer"><a href="#WindLayer" class="headerlink" title="WindLayer"></a>WindLayer</h5><h5 id="S3MLayer"><a href="#S3MLayer" class="headerlink" title="S3MLayer"></a>S3MLayer</h5><h3 id="覆盖元素"><a href="#覆盖元素" class="headerlink" title="覆盖元素"></a>覆盖元素</h3><h5 id="Overlay"><a href="#Overlay" class="headerlink" title="Overlay"></a>Overlay</h5><h5 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h5><h5 id="Polyline"><a href="#Polyline" class="headerlink" title="Polyline"></a>Polyline</h5><h5 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h5><h5 id="Billboard"><a href="#Billboard" class="headerlink" title="Billboard"></a>Billboard</h5><h5 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h5><h5 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h5><h5 id="Rectangle"><a href="#Rectangle" class="headerlink" title="Rectangle"></a>Rectangle</h5><h5 id="Wall"><a href="#Wall" class="headerlink" title="Wall"></a>Wall</h5><h5 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h5><h5 id="Tileset"><a href="#Tileset" class="headerlink" title="Tileset"></a>Tileset</h5><h5 id="DivIcon"><a href="#DivIcon" class="headerlink" title="DivIcon"></a>DivIcon</h5><h5 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h5><h5 id="Corridor"><a href="#Corridor" class="headerlink" title="Corridor"></a>Corridor</h5><h5 id="Cylinder"><a href="#Cylinder" class="headerlink" title="Cylinder"></a>Cylinder</h5><h5 id="Ellipse"><a href="#Ellipse" class="headerlink" title="Ellipse"></a>Ellipse</h5><h5 id="Ellipsoid"><a href="#Ellipsoid" class="headerlink" title="Ellipsoid"></a>Ellipsoid</h5><h5 id="Plane"><a href="#Plane" class="headerlink" title="Plane"></a>Plane</h5><h5 id="PolylineVolume"><a href="#PolylineVolume" class="headerlink" title="PolylineVolume"></a>PolylineVolume</h5><h5 id="DynamicBillboard"><a href="#DynamicBillboard" class="headerlink" title="DynamicBillboard"></a>DynamicBillboard</h5><h5 id="DynamicModel"><a href="#DynamicModel" class="headerlink" title="DynamicModel"></a>DynamicModel</h5><h5 id="CustomBillboard"><a href="#CustomBillboard" class="headerlink" title="CustomBillboard"></a>CustomBillboard</h5><h5 id="CustomLabel"><a href="#CustomLabel" class="headerlink" title="CustomLabel"></a>CustomLabel</h5><h5 id="AttackArrow"><a href="#AttackArrow" class="headerlink" title="AttackArrow"></a>AttackArrow</h5><h5 id="DoubleArrow"><a href="#DoubleArrow" class="headerlink" title="DoubleArrow"></a>DoubleArrow</h5><h5 id="FineArrow"><a href="#FineArrow" class="headerlink" title="FineArrow"></a>FineArrow</h5><h5 id="GatheringPlace"><a href="#GatheringPlace" class="headerlink" title="GatheringPlace"></a>GatheringPlace</h5><h5 id="TailedAttackArrow"><a href="#TailedAttackArrow" class="headerlink" title="TailedAttackArrow"></a>TailedAttackArrow</h5><h5 id="BillboardPrimitive"><a href="#BillboardPrimitive" class="headerlink" title="BillboardPrimitive"></a>BillboardPrimitive</h5><h5 id="BounceBillboardPrimitive"><a href="#BounceBillboardPrimitive" class="headerlink" title="BounceBillboardPrimitive"></a>BounceBillboardPrimitive</h5><h5 id="DiffuseWallPrimitive"><a href="#DiffuseWallPrimitive" class="headerlink" title="DiffuseWallPrimitive"></a>DiffuseWallPrimitive</h5><h5 id="ElecEllipsoidPrimitive"><a href="#ElecEllipsoidPrimitive" class="headerlink" title="ElecEllipsoidPrimitive"></a>ElecEllipsoidPrimitive</h5><h5 id="FlowLinePrimitive"><a href="#FlowLinePrimitive" class="headerlink" title="FlowLinePrimitive"></a>FlowLinePrimitive</h5><h5 id="LabelPrimitive"><a href="#LabelPrimitive" class="headerlink" title="LabelPrimitive"></a>LabelPrimitive</h5><h5 id="LightCylinderPrimitive"><a href="#LightCylinderPrimitive" class="headerlink" title="LightCylinderPrimitive"></a>LightCylinderPrimitive</h5><h5 id="BounceLabelPrimitive"><a href="#BounceLabelPrimitive" class="headerlink" title="BounceLabelPrimitive"></a>BounceLabelPrimitive</h5><h5 id="ModelPrimitive"><a href="#ModelPrimitive" class="headerlink" title="ModelPrimitive"></a>ModelPrimitive</h5><h5 id="ModelCollectionPrimitive"><a href="#ModelCollectionPrimitive" class="headerlink" title="ModelCollectionPrimitive"></a>ModelCollectionPrimitive</h5><h5 id="PointPrimitive"><a href="#PointPrimitive" class="headerlink" title="PointPrimitive"></a>PointPrimitive</h5><h5 id="PolylinePrimitive"><a href="#PolylinePrimitive" class="headerlink" title="PolylinePrimitive"></a>PolylinePrimitive</h5><h5 id="ScanCirclePrimitive"><a href="#ScanCirclePrimitive" class="headerlink" title="ScanCirclePrimitive"></a>ScanCirclePrimitive</h5><h5 id="TrailLinePrimitive"><a href="#TrailLinePrimitive" class="headerlink" title="TrailLinePrimitive"></a>TrailLinePrimitive</h5><h5 id="WaterPrimitive"><a href="#WaterPrimitive" class="headerlink" title="WaterPrimitive"></a>WaterPrimitive</h5><h5 id="VideoPrimitive"><a href="#VideoPrimitive" class="headerlink" title="VideoPrimitive"></a>VideoPrimitive</h5><h3 id="材质属性"><a href="#材质属性" class="headerlink" title="材质属性"></a>材质属性</h3><h3 id="效果动画"><a href="#效果动画" class="headerlink" title="效果动画"></a>效果动画</h3><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><h3 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h3><h3 id="第三方集成"><a href="#第三方集成" class="headerlink" title="第三方集成"></a>第三方集成</h3>]]></content>
    
    
    <categories>
      
      <category>Gis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gis</tag>
      
      <tag>DC</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
